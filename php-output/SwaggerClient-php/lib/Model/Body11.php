<?php
/**
 * Body11
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Vincere REST API
 *
 * Last updated date: **2019-12-03**  Change log on **[GitHub](https://github.com/vincere-io/restful-api-support)**
 *
 * OpenAPI spec version: 2-oas3
 * Contact: integration@vincere.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Body11 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Body11 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'body_11';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'course' => 'string',
'degree_name' => 'string',
'department' => 'string',
'description' => 'string',
'education_level' => 'string',
'gpa' => 'string',
'grade' => 'string',
'graduation_date' => 'string',
'honorific' => 'string',
'honors' => 'string',
'institution_address' => 'string',
'institution_name' => 'string',
'major' => 'string',
'minor' => 'string',
'qualification' => 'string',
'school_name' => 'string',
'school_address' => 'string',
'start_date' => 'string',
'thesis' => 'string',
'training' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'course' => null,
'degree_name' => null,
'department' => null,
'description' => null,
'education_level' => null,
'gpa' => null,
'grade' => null,
'graduation_date' => null,
'honorific' => null,
'honors' => null,
'institution_address' => null,
'institution_name' => null,
'major' => null,
'minor' => null,
'qualification' => null,
'school_name' => null,
'school_address' => null,
'start_date' => null,
'thesis' => null,
'training' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'course' => 'course',
'degree_name' => 'degree_name',
'department' => 'department',
'description' => 'description',
'education_level' => 'education_level',
'gpa' => 'gpa',
'grade' => 'grade',
'graduation_date' => 'graduation_date',
'honorific' => 'honorific',
'honors' => 'honors',
'institution_address' => 'institution_address',
'institution_name' => 'institution_name',
'major' => 'major',
'minor' => 'minor',
'qualification' => 'qualification',
'school_name' => 'school_name',
'school_address' => 'school_address',
'start_date' => 'start_date',
'thesis' => 'thesis',
'training' => 'training'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'course' => 'setCourse',
'degree_name' => 'setDegreeName',
'department' => 'setDepartment',
'description' => 'setDescription',
'education_level' => 'setEducationLevel',
'gpa' => 'setGpa',
'grade' => 'setGrade',
'graduation_date' => 'setGraduationDate',
'honorific' => 'setHonorific',
'honors' => 'setHonors',
'institution_address' => 'setInstitutionAddress',
'institution_name' => 'setInstitutionName',
'major' => 'setMajor',
'minor' => 'setMinor',
'qualification' => 'setQualification',
'school_name' => 'setSchoolName',
'school_address' => 'setSchoolAddress',
'start_date' => 'setStartDate',
'thesis' => 'setThesis',
'training' => 'setTraining'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'course' => 'getCourse',
'degree_name' => 'getDegreeName',
'department' => 'getDepartment',
'description' => 'getDescription',
'education_level' => 'getEducationLevel',
'gpa' => 'getGpa',
'grade' => 'getGrade',
'graduation_date' => 'getGraduationDate',
'honorific' => 'getHonorific',
'honors' => 'getHonors',
'institution_address' => 'getInstitutionAddress',
'institution_name' => 'getInstitutionName',
'major' => 'getMajor',
'minor' => 'getMinor',
'qualification' => 'getQualification',
'school_name' => 'getSchoolName',
'school_address' => 'getSchoolAddress',
'start_date' => 'getStartDate',
'thesis' => 'getThesis',
'training' => 'getTraining'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['course'] = isset($data['course']) ? $data['course'] : null;
        $this->container['degree_name'] = isset($data['degree_name']) ? $data['degree_name'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['education_level'] = isset($data['education_level']) ? $data['education_level'] : null;
        $this->container['gpa'] = isset($data['gpa']) ? $data['gpa'] : null;
        $this->container['grade'] = isset($data['grade']) ? $data['grade'] : null;
        $this->container['graduation_date'] = isset($data['graduation_date']) ? $data['graduation_date'] : null;
        $this->container['honorific'] = isset($data['honorific']) ? $data['honorific'] : null;
        $this->container['honors'] = isset($data['honors']) ? $data['honors'] : null;
        $this->container['institution_address'] = isset($data['institution_address']) ? $data['institution_address'] : null;
        $this->container['institution_name'] = isset($data['institution_name']) ? $data['institution_name'] : null;
        $this->container['major'] = isset($data['major']) ? $data['major'] : null;
        $this->container['minor'] = isset($data['minor']) ? $data['minor'] : null;
        $this->container['qualification'] = isset($data['qualification']) ? $data['qualification'] : null;
        $this->container['school_name'] = isset($data['school_name']) ? $data['school_name'] : null;
        $this->container['school_address'] = isset($data['school_address']) ? $data['school_address'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['thesis'] = isset($data['thesis']) ? $data['thesis'] : null;
        $this->container['training'] = isset($data['training']) ? $data['training'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets course
     *
     * @return string
     */
    public function getCourse()
    {
        return $this->container['course'];
    }

    /**
     * Sets course
     *
     * @param string $course course
     *
     * @return $this
     */
    public function setCourse($course)
    {
        $this->container['course'] = $course;

        return $this;
    }

    /**
     * Gets degree_name
     *
     * @return string
     */
    public function getDegreeName()
    {
        return $this->container['degree_name'];
    }

    /**
     * Sets degree_name
     *
     * @param string $degree_name degree_name
     *
     * @return $this
     */
    public function setDegreeName($degree_name)
    {
        $this->container['degree_name'] = $degree_name;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string $department department
     *
     * @return $this
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets education_level
     *
     * @return string
     */
    public function getEducationLevel()
    {
        return $this->container['education_level'];
    }

    /**
     * Sets education_level
     *
     * @param string $education_level please refer to the reference section of education levels
     *
     * @return $this
     */
    public function setEducationLevel($education_level)
    {
        $this->container['education_level'] = $education_level;

        return $this;
    }

    /**
     * Gets gpa
     *
     * @return string
     */
    public function getGpa()
    {
        return $this->container['gpa'];
    }

    /**
     * Sets gpa
     *
     * @param string $gpa gpa
     *
     * @return $this
     */
    public function setGpa($gpa)
    {
        $this->container['gpa'] = $gpa;

        return $this;
    }

    /**
     * Gets grade
     *
     * @return string
     */
    public function getGrade()
    {
        return $this->container['grade'];
    }

    /**
     * Sets grade
     *
     * @param string $grade grade
     *
     * @return $this
     */
    public function setGrade($grade)
    {
        $this->container['grade'] = $grade;

        return $this;
    }

    /**
     * Gets graduation_date
     *
     * @return string
     */
    public function getGraduationDate()
    {
        return $this->container['graduation_date'];
    }

    /**
     * Sets graduation_date
     *
     * @param string $graduation_date Please use the consistent format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\" but **the time part will be ignored**.
     *
     * @return $this
     */
    public function setGraduationDate($graduation_date)
    {
        $this->container['graduation_date'] = $graduation_date;

        return $this;
    }

    /**
     * Gets honorific
     *
     * @return string
     */
    public function getHonorific()
    {
        return $this->container['honorific'];
    }

    /**
     * Sets honorific
     *
     * @param string $honorific honorific
     *
     * @return $this
     */
    public function setHonorific($honorific)
    {
        $this->container['honorific'] = $honorific;

        return $this;
    }

    /**
     * Gets honors
     *
     * @return string
     */
    public function getHonors()
    {
        return $this->container['honors'];
    }

    /**
     * Sets honors
     *
     * @param string $honors honors
     *
     * @return $this
     */
    public function setHonors($honors)
    {
        $this->container['honors'] = $honors;

        return $this;
    }

    /**
     * Gets institution_address
     *
     * @return string
     */
    public function getInstitutionAddress()
    {
        return $this->container['institution_address'];
    }

    /**
     * Sets institution_address
     *
     * @param string $institution_address institution_address
     *
     * @return $this
     */
    public function setInstitutionAddress($institution_address)
    {
        $this->container['institution_address'] = $institution_address;

        return $this;
    }

    /**
     * Gets institution_name
     *
     * @return string
     */
    public function getInstitutionName()
    {
        return $this->container['institution_name'];
    }

    /**
     * Sets institution_name
     *
     * @param string $institution_name institution_name
     *
     * @return $this
     */
    public function setInstitutionName($institution_name)
    {
        $this->container['institution_name'] = $institution_name;

        return $this;
    }

    /**
     * Gets major
     *
     * @return string
     */
    public function getMajor()
    {
        return $this->container['major'];
    }

    /**
     * Sets major
     *
     * @param string $major major
     *
     * @return $this
     */
    public function setMajor($major)
    {
        $this->container['major'] = $major;

        return $this;
    }

    /**
     * Gets minor
     *
     * @return string
     */
    public function getMinor()
    {
        return $this->container['minor'];
    }

    /**
     * Sets minor
     *
     * @param string $minor minor
     *
     * @return $this
     */
    public function setMinor($minor)
    {
        $this->container['minor'] = $minor;

        return $this;
    }

    /**
     * Gets qualification
     *
     * @return string
     */
    public function getQualification()
    {
        return $this->container['qualification'];
    }

    /**
     * Sets qualification
     *
     * @param string $qualification qualification
     *
     * @return $this
     */
    public function setQualification($qualification)
    {
        $this->container['qualification'] = $qualification;

        return $this;
    }

    /**
     * Gets school_name
     *
     * @return string
     */
    public function getSchoolName()
    {
        return $this->container['school_name'];
    }

    /**
     * Sets school_name
     *
     * @param string $school_name school_name
     *
     * @return $this
     */
    public function setSchoolName($school_name)
    {
        $this->container['school_name'] = $school_name;

        return $this;
    }

    /**
     * Gets school_address
     *
     * @return string
     */
    public function getSchoolAddress()
    {
        return $this->container['school_address'];
    }

    /**
     * Sets school_address
     *
     * @param string $school_address school_address
     *
     * @return $this
     */
    public function setSchoolAddress($school_address)
    {
        $this->container['school_address'] = $school_address;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date Please use the consistent format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\" but **the time part will be ignored**.
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets thesis
     *
     * @return string
     */
    public function getThesis()
    {
        return $this->container['thesis'];
    }

    /**
     * Sets thesis
     *
     * @param string $thesis thesis
     *
     * @return $this
     */
    public function setThesis($thesis)
    {
        $this->container['thesis'] = $thesis;

        return $this;
    }

    /**
     * Gets training
     *
     * @return string
     */
    public function getTraining()
    {
        return $this->container['training'];
    }

    /**
     * Sets training
     *
     * @param string $training training
     *
     * @return $this
     */
    public function setTraining($training)
    {
        $this->container['training'] = $training;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
