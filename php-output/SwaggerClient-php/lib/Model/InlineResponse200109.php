<?php
/**
 * InlineResponse200109
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Vincere REST API
 *
 * Last updated date: **2019-12-03**  Change log on **[GitHub](https://github.com/vincere-io/restful-api-support)**
 *
 * OpenAPI spec version: 2-oas3
 * Contact: integration@vincere.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse200109 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse200109 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_109';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'primary_approver_id' => 'string',
'primary_approver_name' => 'string',
'primary_approver_email' => 'string',
'secondary_approver_id' => 'string',
'secondary_approver_name' => 'string',
'secondary_approver_email' => 'string',
'approval_required_mode' => 'string',
'use_timesheet_for_payroll' => 'bool',
'use_timesheet_for_invoicing' => 'bool',
'use_timesheet_for_expenses' => 'bool',
'fixed_timesheet' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'primary_approver_id' => null,
'primary_approver_name' => null,
'primary_approver_email' => null,
'secondary_approver_id' => null,
'secondary_approver_name' => null,
'secondary_approver_email' => null,
'approval_required_mode' => null,
'use_timesheet_for_payroll' => null,
'use_timesheet_for_invoicing' => null,
'use_timesheet_for_expenses' => null,
'fixed_timesheet' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'primary_approver_id' => 'primary_approver_id',
'primary_approver_name' => 'primary_approver_name',
'primary_approver_email' => 'primary_approver_email',
'secondary_approver_id' => 'secondary_approver_id',
'secondary_approver_name' => 'secondary_approver_name',
'secondary_approver_email' => 'secondary_approver_email',
'approval_required_mode' => 'approval_required_mode',
'use_timesheet_for_payroll' => 'use_timesheet_for_payroll',
'use_timesheet_for_invoicing' => 'use_timesheet_for_invoicing',
'use_timesheet_for_expenses' => 'use_timesheet_for_expenses',
'fixed_timesheet' => 'fixed_timesheet'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'primary_approver_id' => 'setPrimaryApproverId',
'primary_approver_name' => 'setPrimaryApproverName',
'primary_approver_email' => 'setPrimaryApproverEmail',
'secondary_approver_id' => 'setSecondaryApproverId',
'secondary_approver_name' => 'setSecondaryApproverName',
'secondary_approver_email' => 'setSecondaryApproverEmail',
'approval_required_mode' => 'setApprovalRequiredMode',
'use_timesheet_for_payroll' => 'setUseTimesheetForPayroll',
'use_timesheet_for_invoicing' => 'setUseTimesheetForInvoicing',
'use_timesheet_for_expenses' => 'setUseTimesheetForExpenses',
'fixed_timesheet' => 'setFixedTimesheet'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'primary_approver_id' => 'getPrimaryApproverId',
'primary_approver_name' => 'getPrimaryApproverName',
'primary_approver_email' => 'getPrimaryApproverEmail',
'secondary_approver_id' => 'getSecondaryApproverId',
'secondary_approver_name' => 'getSecondaryApproverName',
'secondary_approver_email' => 'getSecondaryApproverEmail',
'approval_required_mode' => 'getApprovalRequiredMode',
'use_timesheet_for_payroll' => 'getUseTimesheetForPayroll',
'use_timesheet_for_invoicing' => 'getUseTimesheetForInvoicing',
'use_timesheet_for_expenses' => 'getUseTimesheetForExpenses',
'fixed_timesheet' => 'getFixedTimesheet'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const APPROVAL_REQUIRED_MODE_ONE_OF_THE_APPROVERS = 'ONE_OF_THE_APPROVERS';
const APPROVAL_REQUIRED_MODE_BOTH_APPROVERS = 'BOTH_APPROVERS';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApprovalRequiredModeAllowableValues()
    {
        return [
            self::APPROVAL_REQUIRED_MODE_ONE_OF_THE_APPROVERS,
self::APPROVAL_REQUIRED_MODE_BOTH_APPROVERS,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['primary_approver_id'] = isset($data['primary_approver_id']) ? $data['primary_approver_id'] : null;
        $this->container['primary_approver_name'] = isset($data['primary_approver_name']) ? $data['primary_approver_name'] : null;
        $this->container['primary_approver_email'] = isset($data['primary_approver_email']) ? $data['primary_approver_email'] : null;
        $this->container['secondary_approver_id'] = isset($data['secondary_approver_id']) ? $data['secondary_approver_id'] : null;
        $this->container['secondary_approver_name'] = isset($data['secondary_approver_name']) ? $data['secondary_approver_name'] : null;
        $this->container['secondary_approver_email'] = isset($data['secondary_approver_email']) ? $data['secondary_approver_email'] : null;
        $this->container['approval_required_mode'] = isset($data['approval_required_mode']) ? $data['approval_required_mode'] : null;
        $this->container['use_timesheet_for_payroll'] = isset($data['use_timesheet_for_payroll']) ? $data['use_timesheet_for_payroll'] : null;
        $this->container['use_timesheet_for_invoicing'] = isset($data['use_timesheet_for_invoicing']) ? $data['use_timesheet_for_invoicing'] : null;
        $this->container['use_timesheet_for_expenses'] = isset($data['use_timesheet_for_expenses']) ? $data['use_timesheet_for_expenses'] : null;
        $this->container['fixed_timesheet'] = isset($data['fixed_timesheet']) ? $data['fixed_timesheet'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getApprovalRequiredModeAllowableValues();
        if (!is_null($this->container['approval_required_mode']) && !in_array($this->container['approval_required_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'approval_required_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets primary_approver_id
     *
     * @return string
     */
    public function getPrimaryApproverId()
    {
        return $this->container['primary_approver_id'];
    }

    /**
     * Sets primary_approver_id
     *
     * @param string $primary_approver_id when choose option Time Management Astute Payroll, primary_approver_id is string \"harry.bubble2\" or \"123\"
     *
     * @return $this
     */
    public function setPrimaryApproverId($primary_approver_id)
    {
        $this->container['primary_approver_id'] = $primary_approver_id;

        return $this;
    }

    /**
     * Gets primary_approver_name
     *
     * @return string
     */
    public function getPrimaryApproverName()
    {
        return $this->container['primary_approver_name'];
    }

    /**
     * Sets primary_approver_name
     *
     * @param string $primary_approver_name primary_approver_name
     *
     * @return $this
     */
    public function setPrimaryApproverName($primary_approver_name)
    {
        $this->container['primary_approver_name'] = $primary_approver_name;

        return $this;
    }

    /**
     * Gets primary_approver_email
     *
     * @return string
     */
    public function getPrimaryApproverEmail()
    {
        return $this->container['primary_approver_email'];
    }

    /**
     * Sets primary_approver_email
     *
     * @param string $primary_approver_email email
     *
     * @return $this
     */
    public function setPrimaryApproverEmail($primary_approver_email)
    {
        $this->container['primary_approver_email'] = $primary_approver_email;

        return $this;
    }

    /**
     * Gets secondary_approver_id
     *
     * @return string
     */
    public function getSecondaryApproverId()
    {
        return $this->container['secondary_approver_id'];
    }

    /**
     * Sets secondary_approver_id
     *
     * @param string $secondary_approver_id when choose option Time Management Astute Payroll, primary_approver_id is string \"harry.bubble2\" or \"123\"
     *
     * @return $this
     */
    public function setSecondaryApproverId($secondary_approver_id)
    {
        $this->container['secondary_approver_id'] = $secondary_approver_id;

        return $this;
    }

    /**
     * Gets secondary_approver_name
     *
     * @return string
     */
    public function getSecondaryApproverName()
    {
        return $this->container['secondary_approver_name'];
    }

    /**
     * Sets secondary_approver_name
     *
     * @param string $secondary_approver_name secondary_approver_name
     *
     * @return $this
     */
    public function setSecondaryApproverName($secondary_approver_name)
    {
        $this->container['secondary_approver_name'] = $secondary_approver_name;

        return $this;
    }

    /**
     * Gets secondary_approver_email
     *
     * @return string
     */
    public function getSecondaryApproverEmail()
    {
        return $this->container['secondary_approver_email'];
    }

    /**
     * Sets secondary_approver_email
     *
     * @param string $secondary_approver_email email
     *
     * @return $this
     */
    public function setSecondaryApproverEmail($secondary_approver_email)
    {
        $this->container['secondary_approver_email'] = $secondary_approver_email;

        return $this;
    }

    /**
     * Gets approval_required_mode
     *
     * @return string
     */
    public function getApprovalRequiredMode()
    {
        return $this->container['approval_required_mode'];
    }

    /**
     * Sets approval_required_mode
     *
     * @param string $approval_required_mode this return value of approval_required_mode and when save on database 1 is ONE_OF_THE_APPROVERS and 2 is
     *
     * @return $this
     */
    public function setApprovalRequiredMode($approval_required_mode)
    {
        $allowedValues = $this->getApprovalRequiredModeAllowableValues();
        if (!is_null($approval_required_mode) && !in_array($approval_required_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'approval_required_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['approval_required_mode'] = $approval_required_mode;

        return $this;
    }

    /**
     * Gets use_timesheet_for_payroll
     *
     * @return bool
     */
    public function getUseTimesheetForPayroll()
    {
        return $this->container['use_timesheet_for_payroll'];
    }

    /**
     * Sets use_timesheet_for_payroll
     *
     * @param bool $use_timesheet_for_payroll use_timesheet_for_payroll
     *
     * @return $this
     */
    public function setUseTimesheetForPayroll($use_timesheet_for_payroll)
    {
        $this->container['use_timesheet_for_payroll'] = $use_timesheet_for_payroll;

        return $this;
    }

    /**
     * Gets use_timesheet_for_invoicing
     *
     * @return bool
     */
    public function getUseTimesheetForInvoicing()
    {
        return $this->container['use_timesheet_for_invoicing'];
    }

    /**
     * Sets use_timesheet_for_invoicing
     *
     * @param bool $use_timesheet_for_invoicing use_timesheet_for_invoicing
     *
     * @return $this
     */
    public function setUseTimesheetForInvoicing($use_timesheet_for_invoicing)
    {
        $this->container['use_timesheet_for_invoicing'] = $use_timesheet_for_invoicing;

        return $this;
    }

    /**
     * Gets use_timesheet_for_expenses
     *
     * @return bool
     */
    public function getUseTimesheetForExpenses()
    {
        return $this->container['use_timesheet_for_expenses'];
    }

    /**
     * Sets use_timesheet_for_expenses
     *
     * @param bool $use_timesheet_for_expenses use_timesheet_for_expenses
     *
     * @return $this
     */
    public function setUseTimesheetForExpenses($use_timesheet_for_expenses)
    {
        $this->container['use_timesheet_for_expenses'] = $use_timesheet_for_expenses;

        return $this;
    }

    /**
     * Gets fixed_timesheet
     *
     * @return bool
     */
    public function getFixedTimesheet()
    {
        return $this->container['fixed_timesheet'];
    }

    /**
     * Sets fixed_timesheet
     *
     * @param bool $fixed_timesheet fixed_timesheet
     *
     * @return $this
     */
    public function setFixedTimesheet($fixed_timesheet)
    {
        $this->container['fixed_timesheet'] = $fixed_timesheet;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
