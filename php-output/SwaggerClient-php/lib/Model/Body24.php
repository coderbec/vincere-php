<?php
/**
 * Body24
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Vincere REST API
 *
 * Last updated date: **2019-12-03**  Change log on **[GitHub](https://github.com/vincere-io/restful-api-support)**
 *
 * OpenAPI spec version: 2-oas3
 * Contact: integration@vincere.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Body24 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Body24 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'body_24';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'admin_time_temp' => 'bool',
'contact_source_id' => 'int',
'company_id' => 'int',
'contact_owners' => 'float[]',
'creator_id' => 'int',
'customer_probability' => 'int',
'date_of_birth' => 'string',
'department' => 'string',
'email' => 'string',
'external_id' => 'string',
'facebook' => 'string',
'first_name' => 'string',
'first_name_kana' => 'string',
'gender_title' => 'string',
'home_phone' => 'string',
'is_assistant' => 'bool',
'job_level' => 'string',
'job_level_hierarchy' => 'int',
'job_title' => 'string',
'last_name' => 'string',
'last_name_kana' => 'string',
'linkedin' => 'string',
'middle_name' => 'string',
'middle_name_kana' => 'string',
'note' => 'string',
'mobile_phone' => 'string',
'phone' => 'string',
'preferred_contact_method' => 'string',
'preferred_time_from' => 'string',
'preferred_time_to' => 'string',
'personal_email' => 'string',
'registration_date' => 'string',
'report_to_contact_id' => 'int',
'skills' => 'string',
'skype' => 'string',
'start_date' => 'string',
'switchboard_phone' => 'string',
'switchboard_phone_ext' => 'string',
'twitter' => 'string',
'xing' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'admin_time_temp' => null,
'contact_source_id' => null,
'company_id' => null,
'contact_owners' => null,
'creator_id' => null,
'customer_probability' => null,
'date_of_birth' => null,
'department' => null,
'email' => null,
'external_id' => null,
'facebook' => null,
'first_name' => null,
'first_name_kana' => null,
'gender_title' => null,
'home_phone' => null,
'is_assistant' => null,
'job_level' => null,
'job_level_hierarchy' => null,
'job_title' => null,
'last_name' => null,
'last_name_kana' => null,
'linkedin' => null,
'middle_name' => null,
'middle_name_kana' => null,
'note' => null,
'mobile_phone' => null,
'phone' => null,
'preferred_contact_method' => null,
'preferred_time_from' => null,
'preferred_time_to' => null,
'personal_email' => null,
'registration_date' => null,
'report_to_contact_id' => null,
'skills' => null,
'skype' => null,
'start_date' => null,
'switchboard_phone' => null,
'switchboard_phone_ext' => null,
'twitter' => null,
'xing' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'admin_time_temp' => 'admin_time_temp',
'contact_source_id' => 'contact_source_id',
'company_id' => 'company_id',
'contact_owners' => 'contact_owners',
'creator_id' => 'creator_id',
'customer_probability' => 'customer_probability',
'date_of_birth' => 'date_of_birth',
'department' => 'department',
'email' => 'email',
'external_id' => 'external_id',
'facebook' => 'facebook',
'first_name' => 'first_name',
'first_name_kana' => 'first_name_kana',
'gender_title' => 'gender_title',
'home_phone' => 'home_phone',
'is_assistant' => 'is_assistant',
'job_level' => 'job_level',
'job_level_hierarchy' => 'job_level_hierarchy',
'job_title' => 'job_title',
'last_name' => 'last_name',
'last_name_kana' => 'last_name_kana',
'linkedin' => 'linkedin',
'middle_name' => 'middle_name',
'middle_name_kana' => 'middle_name_kana',
'note' => 'note',
'mobile_phone' => 'mobile_phone',
'phone' => 'phone',
'preferred_contact_method' => 'preferred_contact_method',
'preferred_time_from' => 'preferred_time_from',
'preferred_time_to' => 'preferred_time_to',
'personal_email' => 'personal_email',
'registration_date' => 'registration_date',
'report_to_contact_id' => 'report_to_contact_id',
'skills' => 'skills',
'skype' => 'skype',
'start_date' => 'start_date',
'switchboard_phone' => 'switchboard_phone',
'switchboard_phone_ext' => 'switchboard_phone_ext',
'twitter' => 'twitter',
'xing' => 'xing'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'admin_time_temp' => 'setAdminTimeTemp',
'contact_source_id' => 'setContactSourceId',
'company_id' => 'setCompanyId',
'contact_owners' => 'setContactOwners',
'creator_id' => 'setCreatorId',
'customer_probability' => 'setCustomerProbability',
'date_of_birth' => 'setDateOfBirth',
'department' => 'setDepartment',
'email' => 'setEmail',
'external_id' => 'setExternalId',
'facebook' => 'setFacebook',
'first_name' => 'setFirstName',
'first_name_kana' => 'setFirstNameKana',
'gender_title' => 'setGenderTitle',
'home_phone' => 'setHomePhone',
'is_assistant' => 'setIsAssistant',
'job_level' => 'setJobLevel',
'job_level_hierarchy' => 'setJobLevelHierarchy',
'job_title' => 'setJobTitle',
'last_name' => 'setLastName',
'last_name_kana' => 'setLastNameKana',
'linkedin' => 'setLinkedin',
'middle_name' => 'setMiddleName',
'middle_name_kana' => 'setMiddleNameKana',
'note' => 'setNote',
'mobile_phone' => 'setMobilePhone',
'phone' => 'setPhone',
'preferred_contact_method' => 'setPreferredContactMethod',
'preferred_time_from' => 'setPreferredTimeFrom',
'preferred_time_to' => 'setPreferredTimeTo',
'personal_email' => 'setPersonalEmail',
'registration_date' => 'setRegistrationDate',
'report_to_contact_id' => 'setReportToContactId',
'skills' => 'setSkills',
'skype' => 'setSkype',
'start_date' => 'setStartDate',
'switchboard_phone' => 'setSwitchboardPhone',
'switchboard_phone_ext' => 'setSwitchboardPhoneExt',
'twitter' => 'setTwitter',
'xing' => 'setXing'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'admin_time_temp' => 'getAdminTimeTemp',
'contact_source_id' => 'getContactSourceId',
'company_id' => 'getCompanyId',
'contact_owners' => 'getContactOwners',
'creator_id' => 'getCreatorId',
'customer_probability' => 'getCustomerProbability',
'date_of_birth' => 'getDateOfBirth',
'department' => 'getDepartment',
'email' => 'getEmail',
'external_id' => 'getExternalId',
'facebook' => 'getFacebook',
'first_name' => 'getFirstName',
'first_name_kana' => 'getFirstNameKana',
'gender_title' => 'getGenderTitle',
'home_phone' => 'getHomePhone',
'is_assistant' => 'getIsAssistant',
'job_level' => 'getJobLevel',
'job_level_hierarchy' => 'getJobLevelHierarchy',
'job_title' => 'getJobTitle',
'last_name' => 'getLastName',
'last_name_kana' => 'getLastNameKana',
'linkedin' => 'getLinkedin',
'middle_name' => 'getMiddleName',
'middle_name_kana' => 'getMiddleNameKana',
'note' => 'getNote',
'mobile_phone' => 'getMobilePhone',
'phone' => 'getPhone',
'preferred_contact_method' => 'getPreferredContactMethod',
'preferred_time_from' => 'getPreferredTimeFrom',
'preferred_time_to' => 'getPreferredTimeTo',
'personal_email' => 'getPersonalEmail',
'registration_date' => 'getRegistrationDate',
'report_to_contact_id' => 'getReportToContactId',
'skills' => 'getSkills',
'skype' => 'getSkype',
'start_date' => 'getStartDate',
'switchboard_phone' => 'getSwitchboardPhone',
'switchboard_phone_ext' => 'getSwitchboardPhoneExt',
'twitter' => 'getTwitter',
'xing' => 'getXing'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['admin_time_temp'] = isset($data['admin_time_temp']) ? $data['admin_time_temp'] : null;
        $this->container['contact_source_id'] = isset($data['contact_source_id']) ? $data['contact_source_id'] : null;
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
        $this->container['contact_owners'] = isset($data['contact_owners']) ? $data['contact_owners'] : null;
        $this->container['creator_id'] = isset($data['creator_id']) ? $data['creator_id'] : null;
        $this->container['customer_probability'] = isset($data['customer_probability']) ? $data['customer_probability'] : null;
        $this->container['date_of_birth'] = isset($data['date_of_birth']) ? $data['date_of_birth'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['facebook'] = isset($data['facebook']) ? $data['facebook'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['first_name_kana'] = isset($data['first_name_kana']) ? $data['first_name_kana'] : null;
        $this->container['gender_title'] = isset($data['gender_title']) ? $data['gender_title'] : null;
        $this->container['home_phone'] = isset($data['home_phone']) ? $data['home_phone'] : null;
        $this->container['is_assistant'] = isset($data['is_assistant']) ? $data['is_assistant'] : null;
        $this->container['job_level'] = isset($data['job_level']) ? $data['job_level'] : null;
        $this->container['job_level_hierarchy'] = isset($data['job_level_hierarchy']) ? $data['job_level_hierarchy'] : null;
        $this->container['job_title'] = isset($data['job_title']) ? $data['job_title'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['last_name_kana'] = isset($data['last_name_kana']) ? $data['last_name_kana'] : null;
        $this->container['linkedin'] = isset($data['linkedin']) ? $data['linkedin'] : null;
        $this->container['middle_name'] = isset($data['middle_name']) ? $data['middle_name'] : null;
        $this->container['middle_name_kana'] = isset($data['middle_name_kana']) ? $data['middle_name_kana'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['mobile_phone'] = isset($data['mobile_phone']) ? $data['mobile_phone'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['preferred_contact_method'] = isset($data['preferred_contact_method']) ? $data['preferred_contact_method'] : null;
        $this->container['preferred_time_from'] = isset($data['preferred_time_from']) ? $data['preferred_time_from'] : null;
        $this->container['preferred_time_to'] = isset($data['preferred_time_to']) ? $data['preferred_time_to'] : null;
        $this->container['personal_email'] = isset($data['personal_email']) ? $data['personal_email'] : null;
        $this->container['registration_date'] = isset($data['registration_date']) ? $data['registration_date'] : null;
        $this->container['report_to_contact_id'] = isset($data['report_to_contact_id']) ? $data['report_to_contact_id'] : null;
        $this->container['skills'] = isset($data['skills']) ? $data['skills'] : null;
        $this->container['skype'] = isset($data['skype']) ? $data['skype'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['switchboard_phone'] = isset($data['switchboard_phone']) ? $data['switchboard_phone'] : null;
        $this->container['switchboard_phone_ext'] = isset($data['switchboard_phone_ext']) ? $data['switchboard_phone_ext'] : null;
        $this->container['twitter'] = isset($data['twitter']) ? $data['twitter'] : null;
        $this->container['xing'] = isset($data['xing']) ? $data['xing'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['company_id'] === null) {
            $invalidProperties[] = "'company_id' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ($this->container['registration_date'] === null) {
            $invalidProperties[] = "'registration_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets admin_time_temp
     *
     * @return bool
     */
    public function getAdminTimeTemp()
    {
        return $this->container['admin_time_temp'];
    }

    /**
     * Sets admin_time_temp
     *
     * @param bool $admin_time_temp true or false
     *
     * @return $this
     */
    public function setAdminTimeTemp($admin_time_temp)
    {
        $this->container['admin_time_temp'] = $admin_time_temp;

        return $this;
    }

    /**
     * Gets contact_source_id
     *
     * @return int
     */
    public function getContactSourceId()
    {
        return $this->container['contact_source_id'];
    }

    /**
     * Sets contact_source_id
     *
     * @param int $contact_source_id internal id of contact source in Vincere. Please refer to the reference section for contact source.
     *
     * @return $this
     */
    public function setContactSourceId($contact_source_id)
    {
        $this->container['contact_source_id'] = $contact_source_id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return int
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int $company_id company internal id
     *
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets contact_owners
     *
     * @return float[]
     */
    public function getContactOwners()
    {
        return $this->container['contact_owners'];
    }

    /**
     * Sets contact_owners
     *
     * @param float[] $contact_owners list of owners id in string format
     *
     * @return $this
     */
    public function setContactOwners($contact_owners)
    {
        $this->container['contact_owners'] = $contact_owners;

        return $this;
    }

    /**
     * Gets creator_id
     *
     * @return int
     */
    public function getCreatorId()
    {
        return $this->container['creator_id'];
    }

    /**
     * Sets creator_id
     *
     * @param int $creator_id internal id of an user in Vincere
     *
     * @return $this
     */
    public function setCreatorId($creator_id)
    {
        $this->container['creator_id'] = $creator_id;

        return $this;
    }

    /**
     * Gets customer_probability
     *
     * @return int
     */
    public function getCustomerProbability()
    {
        return $this->container['customer_probability'];
    }

    /**
     * Sets customer_probability
     *
     * @param int $customer_probability customer_probability
     *
     * @return $this
     */
    public function setCustomerProbability($customer_probability)
    {
        $this->container['customer_probability'] = $customer_probability;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return string
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param string $date_of_birth Date of Birth. Must be in format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"
     *
     * @return $this
     */
    public function setDateOfBirth($date_of_birth)
    {
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string $department department
     *
     * @return $this
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id contact external id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets facebook
     *
     * @return string
     */
    public function getFacebook()
    {
        return $this->container['facebook'];
    }

    /**
     * Sets facebook
     *
     * @param string $facebook Facebook Url
     *
     * @return $this
     */
    public function setFacebook($facebook)
    {
        $this->container['facebook'] = $facebook;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name First Name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets first_name_kana
     *
     * @return string
     */
    public function getFirstNameKana()
    {
        return $this->container['first_name_kana'];
    }

    /**
     * Sets first_name_kana
     *
     * @param string $first_name_kana First Name Kana
     *
     * @return $this
     */
    public function setFirstNameKana($first_name_kana)
    {
        $this->container['first_name_kana'] = $first_name_kana;

        return $this;
    }

    /**
     * Gets gender_title
     *
     * @return string
     */
    public function getGenderTitle()
    {
        return $this->container['gender_title'];
    }

    /**
     * Sets gender_title
     *
     * @param string $gender_title accepted gender title of a contact. Expected values are: Mr., Mrs., Ms., Miss., Dr., Captain
     *
     * @return $this
     */
    public function setGenderTitle($gender_title)
    {
        $this->container['gender_title'] = $gender_title;

        return $this;
    }

    /**
     * Gets home_phone
     *
     * @return string
     */
    public function getHomePhone()
    {
        return $this->container['home_phone'];
    }

    /**
     * Sets home_phone
     *
     * @param string $home_phone phone number
     *
     * @return $this
     */
    public function setHomePhone($home_phone)
    {
        $this->container['home_phone'] = $home_phone;

        return $this;
    }

    /**
     * Gets is_assistant
     *
     * @return bool
     */
    public function getIsAssistant()
    {
        return $this->container['is_assistant'];
    }

    /**
     * Sets is_assistant
     *
     * @param bool $is_assistant true or false
     *
     * @return $this
     */
    public function setIsAssistant($is_assistant)
    {
        $this->container['is_assistant'] = $is_assistant;

        return $this;
    }

    /**
     * Gets job_level
     *
     * @return string
     */
    public function getJobLevel()
    {
        return $this->container['job_level'];
    }

    /**
     * Sets job_level
     *
     * @param string $job_level job_level
     *
     * @return $this
     */
    public function setJobLevel($job_level)
    {
        $this->container['job_level'] = $job_level;

        return $this;
    }

    /**
     * Gets job_level_hierarchy
     *
     * @return int
     */
    public function getJobLevelHierarchy()
    {
        return $this->container['job_level_hierarchy'];
    }

    /**
     * Sets job_level_hierarchy
     *
     * @param int $job_level_hierarchy job_level_hierarchy
     *
     * @return $this
     */
    public function setJobLevelHierarchy($job_level_hierarchy)
    {
        $this->container['job_level_hierarchy'] = $job_level_hierarchy;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string $job_title Job Title
     *
     * @return $this
     */
    public function setJobTitle($job_title)
    {
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Last Name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets last_name_kana
     *
     * @return string
     */
    public function getLastNameKana()
    {
        return $this->container['last_name_kana'];
    }

    /**
     * Sets last_name_kana
     *
     * @param string $last_name_kana Last Name Kana
     *
     * @return $this
     */
    public function setLastNameKana($last_name_kana)
    {
        $this->container['last_name_kana'] = $last_name_kana;

        return $this;
    }

    /**
     * Gets linkedin
     *
     * @return string
     */
    public function getLinkedin()
    {
        return $this->container['linkedin'];
    }

    /**
     * Sets linkedin
     *
     * @param string $linkedin LinkedIn Url
     *
     * @return $this
     */
    public function setLinkedin($linkedin)
    {
        $this->container['linkedin'] = $linkedin;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string $middle_name Middle Name
     *
     * @return $this
     */
    public function setMiddleName($middle_name)
    {
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets middle_name_kana
     *
     * @return string
     */
    public function getMiddleNameKana()
    {
        return $this->container['middle_name_kana'];
    }

    /**
     * Sets middle_name_kana
     *
     * @param string $middle_name_kana Middle Name Kana
     *
     * @return $this
     */
    public function setMiddleNameKana($middle_name_kana)
    {
        $this->container['middle_name_kana'] = $middle_name_kana;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note Note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string $mobile_phone phone number
     *
     * @return $this
     */
    public function setMobilePhone($mobile_phone)
    {
        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone number
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets preferred_contact_method
     *
     * @return string
     */
    public function getPreferredContactMethod()
    {
        return $this->container['preferred_contact_method'];
    }

    /**
     * Sets preferred_contact_method
     *
     * @param string $preferred_contact_method preferred_contact_method
     *
     * @return $this
     */
    public function setPreferredContactMethod($preferred_contact_method)
    {
        $this->container['preferred_contact_method'] = $preferred_contact_method;

        return $this;
    }

    /**
     * Gets preferred_time_from
     *
     * @return string
     */
    public function getPreferredTimeFrom()
    {
        return $this->container['preferred_time_from'];
    }

    /**
     * Sets preferred_time_from
     *
     * @param string $preferred_time_from Must be in format \"HH:mm\"
     *
     * @return $this
     */
    public function setPreferredTimeFrom($preferred_time_from)
    {
        $this->container['preferred_time_from'] = $preferred_time_from;

        return $this;
    }

    /**
     * Gets preferred_time_to
     *
     * @return string
     */
    public function getPreferredTimeTo()
    {
        return $this->container['preferred_time_to'];
    }

    /**
     * Sets preferred_time_to
     *
     * @param string $preferred_time_to Must be in format \"HH:mm\"
     *
     * @return $this
     */
    public function setPreferredTimeTo($preferred_time_to)
    {
        $this->container['preferred_time_to'] = $preferred_time_to;

        return $this;
    }

    /**
     * Gets personal_email
     *
     * @return string
     */
    public function getPersonalEmail()
    {
        return $this->container['personal_email'];
    }

    /**
     * Sets personal_email
     *
     * @param string $personal_email email
     *
     * @return $this
     */
    public function setPersonalEmail($personal_email)
    {
        $this->container['personal_email'] = $personal_email;

        return $this;
    }

    /**
     * Gets registration_date
     *
     * @return string
     */
    public function getRegistrationDate()
    {
        return $this->container['registration_date'];
    }

    /**
     * Sets registration_date
     *
     * @param string $registration_date Registration Date. Must be in format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'.
     *
     * @return $this
     */
    public function setRegistrationDate($registration_date)
    {
        $this->container['registration_date'] = $registration_date;

        return $this;
    }

    /**
     * Gets report_to_contact_id
     *
     * @return int
     */
    public function getReportToContactId()
    {
        return $this->container['report_to_contact_id'];
    }

    /**
     * Sets report_to_contact_id
     *
     * @param int $report_to_contact_id contact internal id
     *
     * @return $this
     */
    public function setReportToContactId($report_to_contact_id)
    {
        $this->container['report_to_contact_id'] = $report_to_contact_id;

        return $this;
    }

    /**
     * Gets skills
     *
     * @return string
     */
    public function getSkills()
    {
        return $this->container['skills'];
    }

    /**
     * Sets skills
     *
     * @param string $skills Skill Summary, skills are deliminated by comma, i.e. \",\"
     *
     * @return $this
     */
    public function setSkills($skills)
    {
        $this->container['skills'] = $skills;

        return $this;
    }

    /**
     * Gets skype
     *
     * @return string
     */
    public function getSkype()
    {
        return $this->container['skype'];
    }

    /**
     * Sets skype
     *
     * @param string $skype Skype
     *
     * @return $this
     */
    public function setSkype($skype)
    {
        $this->container['skype'] = $skype;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date Must be in format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets switchboard_phone
     *
     * @return string
     */
    public function getSwitchboardPhone()
    {
        return $this->container['switchboard_phone'];
    }

    /**
     * Sets switchboard_phone
     *
     * @param string $switchboard_phone Switch Board number
     *
     * @return $this
     */
    public function setSwitchboardPhone($switchboard_phone)
    {
        $this->container['switchboard_phone'] = $switchboard_phone;

        return $this;
    }

    /**
     * Gets switchboard_phone_ext
     *
     * @return string
     */
    public function getSwitchboardPhoneExt()
    {
        return $this->container['switchboard_phone_ext'];
    }

    /**
     * Sets switchboard_phone_ext
     *
     * @param string $switchboard_phone_ext Switch Board extension
     *
     * @return $this
     */
    public function setSwitchboardPhoneExt($switchboard_phone_ext)
    {
        $this->container['switchboard_phone_ext'] = $switchboard_phone_ext;

        return $this;
    }

    /**
     * Gets twitter
     *
     * @return string
     */
    public function getTwitter()
    {
        return $this->container['twitter'];
    }

    /**
     * Sets twitter
     *
     * @param string $twitter Twitter Url
     *
     * @return $this
     */
    public function setTwitter($twitter)
    {
        $this->container['twitter'] = $twitter;

        return $this;
    }

    /**
     * Gets xing
     *
     * @return string
     */
    public function getXing()
    {
        return $this->container['xing'];
    }

    /**
     * Sets xing
     *
     * @param string $xing Xing Url
     *
     * @return $this
     */
    public function setXing($xing)
    {
        $this->container['xing'] = $xing;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
