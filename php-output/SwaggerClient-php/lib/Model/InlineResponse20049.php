<?php
/**
 * InlineResponse20049
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Vincere REST API
 *
 * Last updated date: **2019-12-03**  Change log on **[GitHub](https://github.com/vincere-io/restful-api-support)**
 *
 * OpenAPI spec version: 2-oas3
 * Contact: integration@vincere.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20049 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20049 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_49';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'content' => 'string',
'creator' => '\Swagger\Client\Model\InlineResponse20041',
'id' => 'int',
'insert_timestamp' => 'string',
'kpi_action_id' => 'float',
'main_entity_type' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'content' => null,
'creator' => null,
'id' => null,
'insert_timestamp' => null,
'kpi_action_id' => null,
'main_entity_type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'content' => 'content',
'creator' => 'creator',
'id' => 'id',
'insert_timestamp' => 'insert_timestamp',
'kpi_action_id' => 'kpi_action_id',
'main_entity_type' => 'main_entity_type'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'content' => 'setContent',
'creator' => 'setCreator',
'id' => 'setId',
'insert_timestamp' => 'setInsertTimestamp',
'kpi_action_id' => 'setKpiActionId',
'main_entity_type' => 'setMainEntityType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'content' => 'getContent',
'creator' => 'getCreator',
'id' => 'getId',
'insert_timestamp' => 'getInsertTimestamp',
'kpi_action_id' => 'getKpiActionId',
'main_entity_type' => 'getMainEntityType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MAIN_ENTITY_TYPE_CANDIDATE = 'CANDIDATE';
const MAIN_ENTITY_TYPE_COMPANY = 'COMPANY';
const MAIN_ENTITY_TYPE_CONTACT = 'CONTACT';
const MAIN_ENTITY_TYPE_JOB = 'JOB';
const MAIN_ENTITY_TYPE_OTHER_MEETING = 'OTHER_MEETING';
const MAIN_ENTITY_TYPE_PERSONAL = 'PERSONAL';
const MAIN_ENTITY_TYPE_PROJECT = 'PROJECT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMainEntityTypeAllowableValues()
    {
        return [
            self::MAIN_ENTITY_TYPE_CANDIDATE,
self::MAIN_ENTITY_TYPE_COMPANY,
self::MAIN_ENTITY_TYPE_CONTACT,
self::MAIN_ENTITY_TYPE_JOB,
self::MAIN_ENTITY_TYPE_OTHER_MEETING,
self::MAIN_ENTITY_TYPE_PERSONAL,
self::MAIN_ENTITY_TYPE_PROJECT,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['creator'] = isset($data['creator']) ? $data['creator'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['insert_timestamp'] = isset($data['insert_timestamp']) ? $data['insert_timestamp'] : null;
        $this->container['kpi_action_id'] = isset($data['kpi_action_id']) ? $data['kpi_action_id'] : null;
        $this->container['main_entity_type'] = isset($data['main_entity_type']) ? $data['main_entity_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMainEntityTypeAllowableValues();
        if (!is_null($this->container['main_entity_type']) && !in_array($this->container['main_entity_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'main_entity_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content content
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return \Swagger\Client\Model\InlineResponse20041
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param \Swagger\Client\Model\InlineResponse20041 $creator creator
     *
     * @return $this
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id internal comment id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets insert_timestamp
     *
     * @return string
     */
    public function getInsertTimestamp()
    {
        return $this->container['insert_timestamp'];
    }

    /**
     * Sets insert_timestamp
     *
     * @param string $insert_timestamp Created Date
     *
     * @return $this
     */
    public function setInsertTimestamp($insert_timestamp)
    {
        $this->container['insert_timestamp'] = $insert_timestamp;

        return $this;
    }

    /**
     * Gets kpi_action_id
     *
     * @return float
     */
    public function getKpiActionId()
    {
        return $this->container['kpi_action_id'];
    }

    /**
     * Sets kpi_action_id
     *
     * @param float $kpi_action_id the ID of the kpi action in Vincere. Please refer to the reference section for KPI actions.
     *
     * @return $this
     */
    public function setKpiActionId($kpi_action_id)
    {
        $this->container['kpi_action_id'] = $kpi_action_id;

        return $this;
    }

    /**
     * Gets main_entity_type
     *
     * @return string
     */
    public function getMainEntityType()
    {
        return $this->container['main_entity_type'];
    }

    /**
     * Sets main_entity_type
     *
     * @param string $main_entity_type The main entity of the activity. Based on the returned value, client can send request to another method to get details of the main entity.  For example, if return value is CANDIDATE, client can get details of the candidate by calling the api to get linked candidates.
     *
     * @return $this
     */
    public function setMainEntityType($main_entity_type)
    {
        $allowedValues = $this->getMainEntityTypeAllowableValues();
        if (!is_null($main_entity_type) && !in_array($main_entity_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'main_entity_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['main_entity_type'] = $main_entity_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
