<?php
/**
 * InlineResponse2008
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Vincere REST API
 *
 * Last updated date: **2019-12-03**  Change log on **[GitHub](https://github.com/vincere-io/restful-api-support)**
 *
 * OpenAPI spec version: 2-oas3
 * Contact: integration@vincere.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2008 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2008 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_8';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'candidate_id' => 'int',
'application_id' => 'int',
'job_id' => 'int',
'job_name' => 'string',
'stage' => 'string',
'company_city' => 'string',
'company_country' => 'string',
'status' => 'string',
'consent_status' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'candidate_id' => null,
'application_id' => null,
'job_id' => null,
'job_name' => null,
'stage' => null,
'company_city' => null,
'company_country' => null,
'status' => null,
'consent_status' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'candidate_id' => 'candidate_id',
'application_id' => 'application_id',
'job_id' => 'job_id',
'job_name' => 'job_name',
'stage' => 'stage',
'company_city' => 'company_city',
'company_country' => 'company_country',
'status' => 'status',
'consent_status' => 'consent_status'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'candidate_id' => 'setCandidateId',
'application_id' => 'setApplicationId',
'job_id' => 'setJobId',
'job_name' => 'setJobName',
'stage' => 'setStage',
'company_city' => 'setCompanyCity',
'company_country' => 'setCompanyCountry',
'status' => 'setStatus',
'consent_status' => 'setConsentStatus'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'candidate_id' => 'getCandidateId',
'application_id' => 'getApplicationId',
'job_id' => 'getJobId',
'job_name' => 'getJobName',
'stage' => 'getStage',
'company_city' => 'getCompanyCity',
'company_country' => 'getCompanyCountry',
'status' => 'getStatus',
'consent_status' => 'getConsentStatus'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STAGE_SHORTLISTED = 'SHORTLISTED';
const STAGE_SENT = 'SENT';
const STAGE_FIRST_INTERVIEW = 'FIRST_INTERVIEW';
const STAGE_SECOND_INTERVIEW = 'SECOND_INTERVIEW';
const STAGE_THIRD_INTERVIEW = 'THIRD_INTERVIEW';
const STAGE_FOURTH_INTERVIEW = 'FOURTH_INTERVIEW';
const STAGE_FIFTH_INTERVIEW = 'FIFTH_INTERVIEW';
const STAGE_LAST_INTERVIEW_ROUND = 'LAST_INTERVIEW_ROUND';
const STAGE_OFFERED = 'OFFERED';
const STAGE_PLACED = 'PLACED';
const STAGE_PLACEMENT_PERMANENT = 'PLACEMENT_PERMANENT';
const STAGE_PLACEMENT_CONTRACT = 'PLACEMENT_CONTRACT';
const STAGE_PLACEMENT_TEMP = 'PLACEMENT_TEMP';
const STAGE_INVOICED = 'INVOICED';
const STATUS_UNDER_CONSIDER = 'UNDER_CONSIDER';
const STATUS_CLOSED = 'CLOSED';
const STATUS_PENDING_INTERVIEW = 'PENDING_INTERVIEW';
const STATUS_PENDING_FEEDBACK = 'PENDING_FEEDBACK';
const CONSENT_STATUS_CONSENT_GIVEN = 'CONSENT_GIVEN';
const CONSENT_STATUS_WITHDRAW_CONSENT = 'WITHDRAW_CONSENT';
const CONSENT_STATUS_PENDING = 'PENDING';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStageAllowableValues()
    {
        return [
            self::STAGE_SHORTLISTED,
self::STAGE_SENT,
self::STAGE_FIRST_INTERVIEW,
self::STAGE_SECOND_INTERVIEW,
self::STAGE_THIRD_INTERVIEW,
self::STAGE_FOURTH_INTERVIEW,
self::STAGE_FIFTH_INTERVIEW,
self::STAGE_LAST_INTERVIEW_ROUND,
self::STAGE_OFFERED,
self::STAGE_PLACED,
self::STAGE_PLACEMENT_PERMANENT,
self::STAGE_PLACEMENT_CONTRACT,
self::STAGE_PLACEMENT_TEMP,
self::STAGE_INVOICED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UNDER_CONSIDER,
self::STATUS_CLOSED,
self::STATUS_PENDING_INTERVIEW,
self::STATUS_PENDING_FEEDBACK,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConsentStatusAllowableValues()
    {
        return [
            self::CONSENT_STATUS_CONSENT_GIVEN,
self::CONSENT_STATUS_WITHDRAW_CONSENT,
self::CONSENT_STATUS_PENDING,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['candidate_id'] = isset($data['candidate_id']) ? $data['candidate_id'] : null;
        $this->container['application_id'] = isset($data['application_id']) ? $data['application_id'] : null;
        $this->container['job_id'] = isset($data['job_id']) ? $data['job_id'] : null;
        $this->container['job_name'] = isset($data['job_name']) ? $data['job_name'] : null;
        $this->container['stage'] = isset($data['stage']) ? $data['stage'] : null;
        $this->container['company_city'] = isset($data['company_city']) ? $data['company_city'] : null;
        $this->container['company_country'] = isset($data['company_country']) ? $data['company_country'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['consent_status'] = isset($data['consent_status']) ? $data['consent_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStageAllowableValues();
        if (!is_null($this->container['stage']) && !in_array($this->container['stage'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'stage', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getConsentStatusAllowableValues();
        if (!is_null($this->container['consent_status']) && !in_array($this->container['consent_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'consent_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets candidate_id
     *
     * @return int
     */
    public function getCandidateId()
    {
        return $this->container['candidate_id'];
    }

    /**
     * Sets candidate_id
     *
     * @param int $candidate_id candidate internal id
     *
     * @return $this
     */
    public function setCandidateId($candidate_id)
    {
        $this->container['candidate_id'] = $candidate_id;

        return $this;
    }

    /**
     * Gets application_id
     *
     * @return int
     */
    public function getApplicationId()
    {
        return $this->container['application_id'];
    }

    /**
     * Sets application_id
     *
     * @param int $application_id internal id
     *
     * @return $this
     */
    public function setApplicationId($application_id)
    {
        $this->container['application_id'] = $application_id;

        return $this;
    }

    /**
     * Gets job_id
     *
     * @return int
     */
    public function getJobId()
    {
        return $this->container['job_id'];
    }

    /**
     * Sets job_id
     *
     * @param int $job_id internal id
     *
     * @return $this
     */
    public function setJobId($job_id)
    {
        $this->container['job_id'] = $job_id;

        return $this;
    }

    /**
     * Gets job_name
     *
     * @return string
     */
    public function getJobName()
    {
        return $this->container['job_name'];
    }

    /**
     * Sets job_name
     *
     * @param string $job_name job name
     *
     * @return $this
     */
    public function setJobName($job_name)
    {
        $this->container['job_name'] = $job_name;

        return $this;
    }

    /**
     * Gets stage
     *
     * @return string
     */
    public function getStage()
    {
        return $this->container['stage'];
    }

    /**
     * Sets stage
     *
     * @param string $stage The stage this application is at.
     *
     * @return $this
     */
    public function setStage($stage)
    {
        $allowedValues = $this->getStageAllowableValues();
        if (!is_null($stage) && !in_array($stage, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'stage', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stage'] = $stage;

        return $this;
    }

    /**
     * Gets company_city
     *
     * @return string
     */
    public function getCompanyCity()
    {
        return $this->container['company_city'];
    }

    /**
     * Sets company_city
     *
     * @param string $company_city Company's City
     *
     * @return $this
     */
    public function setCompanyCity($company_city)
    {
        $this->container['company_city'] = $company_city;

        return $this;
    }

    /**
     * Gets company_country
     *
     * @return string
     */
    public function getCompanyCountry()
    {
        return $this->container['company_country'];
    }

    /**
     * Sets company_country
     *
     * @param string $company_country Company's Country
     *
     * @return $this
     */
    public function setCompanyCountry($company_country)
    {
        $this->container['company_country'] = $company_country;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The Status this Application is at.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets consent_status
     *
     * @return string
     */
    public function getConsentStatus()
    {
        return $this->container['consent_status'];
    }

    /**
     * Sets consent_status
     *
     * @param string $consent_status The consent status of an application
     *
     * @return $this
     */
    public function setConsentStatus($consent_status)
    {
        $allowedValues = $this->getConsentStatusAllowableValues();
        if (!is_null($consent_status) && !in_array($consent_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'consent_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['consent_status'] = $consent_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
