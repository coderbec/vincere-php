<?php
/**
 * PlacementidcompanydetailAddress
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Vincere REST API
 *
 * Last updated date: **2019-12-03**  Change log on **[GitHub](https://github.com/vincere-io/restful-api-support)**
 *
 * OpenAPI spec version: 2-oas3
 * Contact: integration@vincere.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PlacementidcompanydetailAddress Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlacementidcompanydetailAddress implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'placementidcompanydetail_address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'location_name' => 'string',
'address' => 'string',
'district_suburb' => 'string',
'town_city' => 'string',
'zip_postal_code' => 'string',
'country' => 'string',
'state' => 'string',
'nearest_train_stn' => 'string',
'type' => 'string',
'phone_number' => 'string',
'note' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'location_name' => null,
'address' => null,
'district_suburb' => null,
'town_city' => null,
'zip_postal_code' => null,
'country' => null,
'state' => null,
'nearest_train_stn' => null,
'type' => null,
'phone_number' => null,
'note' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'location_name' => 'location_name',
'address' => 'address',
'district_suburb' => 'district_suburb',
'town_city' => 'town_city',
'zip_postal_code' => 'zip_postal_code',
'country' => 'country',
'state' => 'state',
'nearest_train_stn' => 'nearest_train_stn',
'type' => 'type',
'phone_number' => 'phone_number',
'note' => 'note'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'location_name' => 'setLocationName',
'address' => 'setAddress',
'district_suburb' => 'setDistrictSuburb',
'town_city' => 'setTownCity',
'zip_postal_code' => 'setZipPostalCode',
'country' => 'setCountry',
'state' => 'setState',
'nearest_train_stn' => 'setNearestTrainStn',
'type' => 'setType',
'phone_number' => 'setPhoneNumber',
'note' => 'setNote'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'location_name' => 'getLocationName',
'address' => 'getAddress',
'district_suburb' => 'getDistrictSuburb',
'town_city' => 'getTownCity',
'zip_postal_code' => 'getZipPostalCode',
'country' => 'getCountry',
'state' => 'getState',
'nearest_train_stn' => 'getNearestTrainStn',
'type' => 'getType',
'phone_number' => 'getPhoneNumber',
'note' => 'getNote'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_WORKPLACE = 'WORKPLACE';
const TYPE_MAILING_ADDRESS = 'MAILING_ADDRESS';
const TYPE_BILLING_ADDRESS = 'BILLING_ADDRESS';
const TYPE_CURRENT_ADDRESS = 'CURRENT_ADDRESS';
const TYPE_PERSONAL_ADDRESS = 'PERSONAL_ADDRESS';
const TYPE_HEADQUARTER = 'HEADQUARTER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_WORKPLACE,
self::TYPE_MAILING_ADDRESS,
self::TYPE_BILLING_ADDRESS,
self::TYPE_CURRENT_ADDRESS,
self::TYPE_PERSONAL_ADDRESS,
self::TYPE_HEADQUARTER,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['location_name'] = isset($data['location_name']) ? $data['location_name'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['district_suburb'] = isset($data['district_suburb']) ? $data['district_suburb'] : null;
        $this->container['town_city'] = isset($data['town_city']) ? $data['town_city'] : null;
        $this->container['zip_postal_code'] = isset($data['zip_postal_code']) ? $data['zip_postal_code'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['nearest_train_stn'] = isset($data['nearest_train_stn']) ? $data['nearest_train_stn'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The user's unique identifier, id must required when address not null
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets location_name
     *
     * @return string
     */
    public function getLocationName()
    {
        return $this->container['location_name'];
    }

    /**
     * Sets location_name
     *
     * @param string $location_name location name
     *
     * @return $this
     */
    public function setLocationName($location_name)
    {
        $this->container['location_name'] = $location_name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address of the location
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets district_suburb
     *
     * @return string
     */
    public function getDistrictSuburb()
    {
        return $this->container['district_suburb'];
    }

    /**
     * Sets district_suburb
     *
     * @param string $district_suburb district_suburb
     *
     * @return $this
     */
    public function setDistrictSuburb($district_suburb)
    {
        $this->container['district_suburb'] = $district_suburb;

        return $this;
    }

    /**
     * Gets town_city
     *
     * @return string
     */
    public function getTownCity()
    {
        return $this->container['town_city'];
    }

    /**
     * Sets town_city
     *
     * @param string $town_city town_city
     *
     * @return $this
     */
    public function setTownCity($town_city)
    {
        $this->container['town_city'] = $town_city;

        return $this;
    }

    /**
     * Gets zip_postal_code
     *
     * @return string
     */
    public function getZipPostalCode()
    {
        return $this->container['zip_postal_code'];
    }

    /**
     * Sets zip_postal_code
     *
     * @param string $zip_postal_code postal code
     *
     * @return $this
     */
    public function setZipPostalCode($zip_postal_code)
    {
        $this->container['zip_postal_code'] = $zip_postal_code;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Ex Viet Nam, Please refer to country reference section
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets nearest_train_stn
     *
     * @return string
     */
    public function getNearestTrainStn()
    {
        return $this->container['nearest_train_stn'];
    }

    /**
     * Sets nearest_train_stn
     *
     * @param string $nearest_train_stn the nearest train station
     *
     * @return $this
     */
    public function setNearestTrainStn($nearest_train_stn)
    {
        $this->container['nearest_train_stn'] = $nearest_train_stn;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type That must be one of all enum
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number phone number
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note Note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
