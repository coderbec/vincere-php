<?php
/**
 * InlineResponse200110ContentField
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Vincere REST API
 *
 * Last updated date: **2019-12-03**  Change log on **[GitHub](https://github.com/vincere-io/restful-api-support)**
 *
 * OpenAPI spec version: 2-oas3
 * Contact: integration@vincere.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse200110ContentField Class Doc Comment
 *
 * @category Class
 * @description field element in compliance setting
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse200110ContentField implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_110_content_field';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'x' => 'float',
'y' => 'float',
'w' => 'float',
'h' => 'float',
'required' => 'bool',
'label' => 'string',
'category' => 'string',
'editable' => 'bool',
'entity' => 'string',
'configurable_form_field_id' => 'float',
'layout_field_type' => 'string',
'label_language_code' => 'string',
'parent_id' => 'float',
'sub_heading_id' => 'float',
'field_key' => 'string',
'suggestion_needed' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'x' => null,
'y' => null,
'w' => null,
'h' => null,
'required' => null,
'label' => null,
'category' => null,
'editable' => null,
'entity' => null,
'configurable_form_field_id' => null,
'layout_field_type' => null,
'label_language_code' => null,
'parent_id' => null,
'sub_heading_id' => null,
'field_key' => null,
'suggestion_needed' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'x' => 'x',
'y' => 'y',
'w' => 'w',
'h' => 'h',
'required' => 'required',
'label' => 'label',
'category' => 'category',
'editable' => 'editable',
'entity' => 'entity',
'configurable_form_field_id' => 'configurable_form_field_id',
'layout_field_type' => 'layout_field_type',
'label_language_code' => 'label_language_code',
'parent_id' => 'parent_id',
'sub_heading_id' => 'sub_heading_id',
'field_key' => 'field_key',
'suggestion_needed' => 'suggestion_needed'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'x' => 'setX',
'y' => 'setY',
'w' => 'setW',
'h' => 'setH',
'required' => 'setRequired',
'label' => 'setLabel',
'category' => 'setCategory',
'editable' => 'setEditable',
'entity' => 'setEntity',
'configurable_form_field_id' => 'setConfigurableFormFieldId',
'layout_field_type' => 'setLayoutFieldType',
'label_language_code' => 'setLabelLanguageCode',
'parent_id' => 'setParentId',
'sub_heading_id' => 'setSubHeadingId',
'field_key' => 'setFieldKey',
'suggestion_needed' => 'setSuggestionNeeded'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'x' => 'getX',
'y' => 'getY',
'w' => 'getW',
'h' => 'getH',
'required' => 'getRequired',
'label' => 'getLabel',
'category' => 'getCategory',
'editable' => 'getEditable',
'entity' => 'getEntity',
'configurable_form_field_id' => 'getConfigurableFormFieldId',
'layout_field_type' => 'getLayoutFieldType',
'label_language_code' => 'getLabelLanguageCode',
'parent_id' => 'getParentId',
'sub_heading_id' => 'getSubHeadingId',
'field_key' => 'getFieldKey',
'suggestion_needed' => 'getSuggestionNeeded'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CATEGORY_CUSTOM_FIELD = 'custom_field';
const CATEGORY_SUB_HEADING = 'sub_heading';
const CATEGORY_WHITESPACE = 'whitespace';
const ENTITY_CANDIDATE = 'candidate';
const ENTITY_CONTACT = 'contact';
const ENTITY_JOB = 'job';
const ENTITY_COMPANY = 'company';
const LAYOUT_FIELD_TYPE_TEXT_FIELD = 'TEXT_FIELD';
const LAYOUT_FIELD_TYPE_TEXT_AREA = 'TEXT_AREA';
const LAYOUT_FIELD_TYPE_DATE_PICKER = 'DATE_PICKER';
const LAYOUT_FIELD_TYPE_DROP_DOWN = 'DROP_DOWN';
const LAYOUT_FIELD_TYPE_MULTIPLE_SELECTION = 'MULTIPLE_SELECTION';
const LAYOUT_FIELD_TYPE_CHECK_BOXES = 'CHECK_BOXES';
const LAYOUT_FIELD_TYPE_RADIO_BUTTON = 'RADIO_BUTTON';
const LAYOUT_FIELD_TYPE_TABLE = 'TABLE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCategoryAllowableValues()
    {
        return [
            self::CATEGORY_CUSTOM_FIELD,
self::CATEGORY_SUB_HEADING,
self::CATEGORY_WHITESPACE,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEntityAllowableValues()
    {
        return [
            self::ENTITY_CANDIDATE,
self::ENTITY_CONTACT,
self::ENTITY_JOB,
self::ENTITY_COMPANY,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLayoutFieldTypeAllowableValues()
    {
        return [
            self::LAYOUT_FIELD_TYPE_TEXT_FIELD,
self::LAYOUT_FIELD_TYPE_TEXT_AREA,
self::LAYOUT_FIELD_TYPE_DATE_PICKER,
self::LAYOUT_FIELD_TYPE_DROP_DOWN,
self::LAYOUT_FIELD_TYPE_MULTIPLE_SELECTION,
self::LAYOUT_FIELD_TYPE_CHECK_BOXES,
self::LAYOUT_FIELD_TYPE_RADIO_BUTTON,
self::LAYOUT_FIELD_TYPE_TABLE,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['x'] = isset($data['x']) ? $data['x'] : null;
        $this->container['y'] = isset($data['y']) ? $data['y'] : null;
        $this->container['w'] = isset($data['w']) ? $data['w'] : null;
        $this->container['h'] = isset($data['h']) ? $data['h'] : null;
        $this->container['required'] = isset($data['required']) ? $data['required'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['editable'] = isset($data['editable']) ? $data['editable'] : null;
        $this->container['entity'] = isset($data['entity']) ? $data['entity'] : null;
        $this->container['configurable_form_field_id'] = isset($data['configurable_form_field_id']) ? $data['configurable_form_field_id'] : null;
        $this->container['layout_field_type'] = isset($data['layout_field_type']) ? $data['layout_field_type'] : null;
        $this->container['label_language_code'] = isset($data['label_language_code']) ? $data['label_language_code'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['sub_heading_id'] = isset($data['sub_heading_id']) ? $data['sub_heading_id'] : null;
        $this->container['field_key'] = isset($data['field_key']) ? $data['field_key'] : null;
        $this->container['suggestion_needed'] = isset($data['suggestion_needed']) ? $data['suggestion_needed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCategoryAllowableValues();
        if (!is_null($this->container['category']) && !in_array($this->container['category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'category', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEntityAllowableValues();
        if (!is_null($this->container['entity']) && !in_array($this->container['entity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'entity', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLayoutFieldTypeAllowableValues();
        if (!is_null($this->container['layout_field_type']) && !in_array($this->container['layout_field_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'layout_field_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets x
     *
     * @return float
     */
    public function getX()
    {
        return $this->container['x'];
    }

    /**
     * Sets x
     *
     * @param float $x position x
     *
     * @return $this
     */
    public function setX($x)
    {
        $this->container['x'] = $x;

        return $this;
    }

    /**
     * Gets y
     *
     * @return float
     */
    public function getY()
    {
        return $this->container['y'];
    }

    /**
     * Sets y
     *
     * @param float $y position y
     *
     * @return $this
     */
    public function setY($y)
    {
        $this->container['y'] = $y;

        return $this;
    }

    /**
     * Gets w
     *
     * @return float
     */
    public function getW()
    {
        return $this->container['w'];
    }

    /**
     * Sets w
     *
     * @param float $w element width
     *
     * @return $this
     */
    public function setW($w)
    {
        $this->container['w'] = $w;

        return $this;
    }

    /**
     * Gets h
     *
     * @return float
     */
    public function getH()
    {
        return $this->container['h'];
    }

    /**
     * Sets h
     *
     * @param float $h element height
     *
     * @return $this
     */
    public function setH($h)
    {
        $this->container['h'] = $h;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool $required required field
     *
     * @return $this
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label of element
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category of fields
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $allowedValues = $this->getCategoryAllowableValues();
        if (!is_null($category) && !in_array($category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'category', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets editable
     *
     * @return bool
     */
    public function getEditable()
    {
        return $this->container['editable'];
    }

    /**
     * Sets editable
     *
     * @param bool $editable status of field edit or none edit
     *
     * @return $this
     */
    public function setEditable($editable)
    {
        $this->container['editable'] = $editable;

        return $this;
    }

    /**
     * Gets entity
     *
     * @return string
     */
    public function getEntity()
    {
        return $this->container['entity'];
    }

    /**
     * Sets entity
     *
     * @param string $entity entity of objects
     *
     * @return $this
     */
    public function setEntity($entity)
    {
        $allowedValues = $this->getEntityAllowableValues();
        if (!is_null($entity) && !in_array($entity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'entity', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['entity'] = $entity;

        return $this;
    }

    /**
     * Gets configurable_form_field_id
     *
     * @return float
     */
    public function getConfigurableFormFieldId()
    {
        return $this->container['configurable_form_field_id'];
    }

    /**
     * Sets configurable_form_field_id
     *
     * @param float $configurable_form_field_id id of custom field
     *
     * @return $this
     */
    public function setConfigurableFormFieldId($configurable_form_field_id)
    {
        $this->container['configurable_form_field_id'] = $configurable_form_field_id;

        return $this;
    }

    /**
     * Gets layout_field_type
     *
     * @return string
     */
    public function getLayoutFieldType()
    {
        return $this->container['layout_field_type'];
    }

    /**
     * Sets layout_field_type
     *
     * @param string $layout_field_type type of field
     *
     * @return $this
     */
    public function setLayoutFieldType($layout_field_type)
    {
        $allowedValues = $this->getLayoutFieldTypeAllowableValues();
        if (!is_null($layout_field_type) && !in_array($layout_field_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'layout_field_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['layout_field_type'] = $layout_field_type;

        return $this;
    }

    /**
     * Gets label_language_code
     *
     * @return string
     */
    public function getLabelLanguageCode()
    {
        return $this->container['label_language_code'];
    }

    /**
     * Sets label_language_code
     *
     * @param string $label_language_code code of label of element
     *
     * @return $this
     */
    public function setLabelLanguageCode($label_language_code)
    {
        $this->container['label_language_code'] = $label_language_code;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return float
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param float $parent_id parent if of custom field
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets sub_heading_id
     *
     * @return float
     */
    public function getSubHeadingId()
    {
        return $this->container['sub_heading_id'];
    }

    /**
     * Sets sub_heading_id
     *
     * @param float $sub_heading_id id of sud heading for layout
     *
     * @return $this
     */
    public function setSubHeadingId($sub_heading_id)
    {
        $this->container['sub_heading_id'] = $sub_heading_id;

        return $this;
    }

    /**
     * Gets field_key
     *
     * @return string
     */
    public function getFieldKey()
    {
        return $this->container['field_key'];
    }

    /**
     * Sets field_key
     *
     * @param string $field_key key of element of custom field
     *
     * @return $this
     */
    public function setFieldKey($field_key)
    {
        $this->container['field_key'] = $field_key;

        return $this;
    }

    /**
     * Gets suggestion_needed
     *
     * @return bool
     */
    public function getSuggestionNeeded()
    {
        return $this->container['suggestion_needed'];
    }

    /**
     * Sets suggestion_needed
     *
     * @param bool $suggestion_needed support suggestion
     *
     * @return $this
     */
    public function setSuggestionNeeded($suggestion_needed)
    {
        $this->container['suggestion_needed'] = $suggestion_needed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
