<?php
/**
 * CandidateidcustomfieldsData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Vincere REST API
 *
 * Last updated date: **2019-12-03**  Change log on **[GitHub](https://github.com/vincere-io/restful-api-support)**
 *
 * OpenAPI spec version: 2-oas3
 * Contact: integration@vincere.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CandidateidcustomfieldsData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CandidateidcustomfieldsData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'candidateidcustomfields_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date_value' => 'string',
'element_value_groups' => 'object[][]',
'field_key' => 'string',
'field_value' => 'string',
'field_value_ids' => 'int[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date_value' => null,
'element_value_groups' => null,
'field_key' => null,
'field_value' => null,
'field_value_ids' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_value' => 'date_value',
'element_value_groups' => 'element_value_groups',
'field_key' => 'field_key',
'field_value' => 'field_value',
'field_value_ids' => 'field_value_ids'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_value' => 'setDateValue',
'element_value_groups' => 'setElementValueGroups',
'field_key' => 'setFieldKey',
'field_value' => 'setFieldValue',
'field_value_ids' => 'setFieldValueIds'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_value' => 'getDateValue',
'element_value_groups' => 'getElementValueGroups',
'field_key' => 'getFieldKey',
'field_value' => 'getFieldValue',
'field_value_ids' => 'getFieldValueIds'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date_value'] = isset($data['date_value']) ? $data['date_value'] : null;
        $this->container['element_value_groups'] = isset($data['element_value_groups']) ? $data['element_value_groups'] : null;
        $this->container['field_key'] = isset($data['field_key']) ? $data['field_key'] : null;
        $this->container['field_value'] = isset($data['field_value']) ? $data['field_value'] : null;
        $this->container['field_value_ids'] = isset($data['field_value_ids']) ? $data['field_value_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date_value
     *
     * @return string
     */
    public function getDateValue()
    {
        return $this->container['date_value'];
    }

    /**
     * Sets date_value
     *
     * @param string $date_value this property is taken into account if the custom field is of type DATE_PICKER. Must be in format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\".
     *
     * @return $this
     */
    public function setDateValue($date_value)
    {
        $this->container['date_value'] = $date_value;

        return $this;
    }

    /**
     * Gets element_value_groups
     *
     * @return object[][]
     */
    public function getElementValueGroups()
    {
        return $this->container['element_value_groups'];
    }

    /**
     * Sets element_value_groups
     *
     * @param object[][] $element_value_groups this property is taken into account if the custom field is of type GROUP.
     *
     * @return $this
     */
    public function setElementValueGroups($element_value_groups)
    {
        $this->container['element_value_groups'] = $element_value_groups;

        return $this;
    }

    /**
     * Gets field_key
     *
     * @return string
     */
    public function getFieldKey()
    {
        return $this->container['field_key'];
    }

    /**
     * Sets field_key
     *
     * @param string $field_key the key of the custom field in Vincere. Please refer to the reference section for custom field.
     *
     * @return $this
     */
    public function setFieldKey($field_key)
    {
        $this->container['field_key'] = $field_key;

        return $this;
    }

    /**
     * Gets field_value
     *
     * @return string
     */
    public function getFieldValue()
    {
        return $this->container['field_value'];
    }

    /**
     * Sets field_value
     *
     * @param string $field_value this property is taken into account if the custom field is of type TEXT_BOX or TEXT_AREA
     *
     * @return $this
     */
    public function setFieldValue($field_value)
    {
        $this->container['field_value'] = $field_value;

        return $this;
    }

    /**
     * Gets field_value_ids
     *
     * @return int[]
     */
    public function getFieldValueIds()
    {
        return $this->container['field_value_ids'];
    }

    /**
     * Sets field_value_ids
     *
     * @param int[] $field_value_ids this property is taken into account if the custom field is of type CHECK_BOX, SELECT_BOX, RADIO, MULTIPLE_SELECTION
     *
     * @return $this
     */
    public function setFieldValueIds($field_value_ids)
    {
        $this->container['field_value_ids'] = $field_value_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
