<?php
/**
 * InlineResponse20038PtoPaidTimeOffInHours
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Vincere REST API
 *
 * Last updated date: **2019-12-03**  Change log on **[GitHub](https://github.com/vincere-io/restful-api-support)**
 *
 * OpenAPI spec version: 2-oas3
 * Contact: integration@vincere.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20038PtoPaidTimeOffInHours Class Doc Comment
 *
 * @category Class
 * @description pto_paid_time_off_in_hour in system
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20038PtoPaidTimeOffInHours implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_38_pto_paid_time_off_in_hours';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code_name' => 'string',
'code_type' => 'string',
'accrual_tracking' => 'bool',
'charge_to_client' => 'bool',
'paid_hours' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code_name' => null,
'code_type' => null,
'accrual_tracking' => null,
'charge_to_client' => null,
'paid_hours' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code_name' => 'code_name',
'code_type' => 'code_type',
'accrual_tracking' => 'accrual_tracking',
'charge_to_client' => 'charge_to_client',
'paid_hours' => 'paid_hours'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code_name' => 'setCodeName',
'code_type' => 'setCodeType',
'accrual_tracking' => 'setAccrualTracking',
'charge_to_client' => 'setChargeToClient',
'paid_hours' => 'setPaidHours'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code_name' => 'getCodeName',
'code_type' => 'getCodeType',
'accrual_tracking' => 'getAccrualTracking',
'charge_to_client' => 'getChargeToClient',
'paid_hours' => 'getPaidHours'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code_name'] = isset($data['code_name']) ? $data['code_name'] : null;
        $this->container['code_type'] = isset($data['code_type']) ? $data['code_type'] : null;
        $this->container['accrual_tracking'] = isset($data['accrual_tracking']) ? $data['accrual_tracking'] : null;
        $this->container['charge_to_client'] = isset($data['charge_to_client']) ? $data['charge_to_client'] : null;
        $this->container['paid_hours'] = isset($data['paid_hours']) ? $data['paid_hours'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code_name
     *
     * @return string
     */
    public function getCodeName()
    {
        return $this->container['code_name'];
    }

    /**
     * Sets code_name
     *
     * @param string $code_name code_name
     *
     * @return $this
     */
    public function setCodeName($code_name)
    {
        $this->container['code_name'] = $code_name;

        return $this;
    }

    /**
     * Gets code_type
     *
     * @return string
     */
    public function getCodeType()
    {
        return $this->container['code_type'];
    }

    /**
     * Sets code_type
     *
     * @param string $code_type code_type
     *
     * @return $this
     */
    public function setCodeType($code_type)
    {
        $this->container['code_type'] = $code_type;

        return $this;
    }

    /**
     * Gets accrual_tracking
     *
     * @return bool
     */
    public function getAccrualTracking()
    {
        return $this->container['accrual_tracking'];
    }

    /**
     * Sets accrual_tracking
     *
     * @param bool $accrual_tracking accrual_tracking
     *
     * @return $this
     */
    public function setAccrualTracking($accrual_tracking)
    {
        $this->container['accrual_tracking'] = $accrual_tracking;

        return $this;
    }

    /**
     * Gets charge_to_client
     *
     * @return bool
     */
    public function getChargeToClient()
    {
        return $this->container['charge_to_client'];
    }

    /**
     * Sets charge_to_client
     *
     * @param bool $charge_to_client charge_to_client
     *
     * @return $this
     */
    public function setChargeToClient($charge_to_client)
    {
        $this->container['charge_to_client'] = $charge_to_client;

        return $this;
    }

    /**
     * Gets paid_hours
     *
     * @return float
     */
    public function getPaidHours()
    {
        return $this->container['paid_hours'];
    }

    /**
     * Sets paid_hours
     *
     * @param float $paid_hours paid_hours
     *
     * @return $this
     */
    public function setPaidHours($paid_hours)
    {
        $this->container['paid_hours'] = $paid_hours;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
