<?php
/**
 * InlineResponse20029Content
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Vincere REST API
 *
 * Last updated date: **2019-12-03**  Change log on **[GitHub](https://github.com/vincere-io/restful-api-support)**
 *
 * OpenAPI spec version: 2-oas3
 * Contact: integration@vincere.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20029Content Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20029Content implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_29_content';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'close_date' => 'string',
'employment_type' => 'string',
'external_id' => 'string',
'floated_job' => 'bool',
'head_count' => 'int',
'position_id' => 'int',
'job_title' => 'string',
'job_type' => 'string',
'open_date' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'close_date' => null,
'employment_type' => null,
'external_id' => null,
'floated_job' => null,
'head_count' => null,
'position_id' => null,
'job_title' => null,
'job_type' => null,
'open_date' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'close_date' => 'close_date',
'employment_type' => 'employment_type',
'external_id' => 'external_id',
'floated_job' => 'floated_job',
'head_count' => 'head_count',
'position_id' => 'position_id',
'job_title' => 'job_title',
'job_type' => 'job_type',
'open_date' => 'open_date'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'close_date' => 'setCloseDate',
'employment_type' => 'setEmploymentType',
'external_id' => 'setExternalId',
'floated_job' => 'setFloatedJob',
'head_count' => 'setHeadCount',
'position_id' => 'setPositionId',
'job_title' => 'setJobTitle',
'job_type' => 'setJobType',
'open_date' => 'setOpenDate'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'close_date' => 'getCloseDate',
'employment_type' => 'getEmploymentType',
'external_id' => 'getExternalId',
'floated_job' => 'getFloatedJob',
'head_count' => 'getHeadCount',
'position_id' => 'getPositionId',
'job_title' => 'getJobTitle',
'job_type' => 'getJobType',
'open_date' => 'getOpenDate'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const JOB_TYPE_PERMANENT = 'PERMANENT';
const JOB_TYPE_PART_TIME = 'PART_TIME';
const JOB_TYPE_TEMPORARY = 'TEMPORARY';
const JOB_TYPE_CONTRACT = 'CONTRACT';
const JOB_TYPE_TEMP_TO_PERM = 'TEMP_TO_PERM';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJobTypeAllowableValues()
    {
        return [
            self::JOB_TYPE_PERMANENT,
self::JOB_TYPE_PART_TIME,
self::JOB_TYPE_TEMPORARY,
self::JOB_TYPE_CONTRACT,
self::JOB_TYPE_TEMP_TO_PERM,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['close_date'] = isset($data['close_date']) ? $data['close_date'] : null;
        $this->container['employment_type'] = isset($data['employment_type']) ? $data['employment_type'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['floated_job'] = isset($data['floated_job']) ? $data['floated_job'] : null;
        $this->container['head_count'] = isset($data['head_count']) ? $data['head_count'] : null;
        $this->container['position_id'] = isset($data['position_id']) ? $data['position_id'] : null;
        $this->container['job_title'] = isset($data['job_title']) ? $data['job_title'] : null;
        $this->container['job_type'] = isset($data['job_type']) ? $data['job_type'] : null;
        $this->container['open_date'] = isset($data['open_date']) ? $data['open_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getJobTypeAllowableValues();
        if (!is_null($this->container['job_type']) && !in_array($this->container['job_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'job_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets close_date
     *
     * @return string
     */
    public function getCloseDate()
    {
        return $this->container['close_date'];
    }

    /**
     * Sets close_date
     *
     * @param string $close_date Close Date for the job. Must be in format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"
     *
     * @return $this
     */
    public function setCloseDate($close_date)
    {
        $this->container['close_date'] = $close_date;

        return $this;
    }

    /**
     * Gets employment_type
     *
     * @return string
     */
    public function getEmploymentType()
    {
        return $this->container['employment_type'];
    }

    /**
     * Sets employment_type
     *
     * @param string $employment_type Employment Type. Please refer to reference section of employment type for possible values.
     *
     * @return $this
     */
    public function setEmploymentType($employment_type)
    {
        $this->container['employment_type'] = $employment_type;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id external Reference id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets floated_job
     *
     * @return bool
     */
    public function getFloatedJob()
    {
        return $this->container['floated_job'];
    }

    /**
     * Sets floated_job
     *
     * @param bool $floated_job true if this is a floated job.
     *
     * @return $this
     */
    public function setFloatedJob($floated_job)
    {
        $this->container['floated_job'] = $floated_job;

        return $this;
    }

    /**
     * Gets head_count
     *
     * @return int
     */
    public function getHeadCount()
    {
        return $this->container['head_count'];
    }

    /**
     * Sets head_count
     *
     * @param int $head_count Head count
     *
     * @return $this
     */
    public function setHeadCount($head_count)
    {
        $this->container['head_count'] = $head_count;

        return $this;
    }

    /**
     * Gets position_id
     *
     * @return int
     */
    public function getPositionId()
    {
        return $this->container['position_id'];
    }

    /**
     * Sets position_id
     *
     * @param int $position_id internal id
     *
     * @return $this
     */
    public function setPositionId($position_id)
    {
        $this->container['position_id'] = $position_id;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string $job_title Job Title
     *
     * @return $this
     */
    public function setJobTitle($job_title)
    {
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets job_type
     *
     * @return string
     */
    public function getJobType()
    {
        return $this->container['job_type'];
    }

    /**
     * Sets job_type
     *
     * @param string $job_type Job Type. Please refer to reference section of job types for possible values.
     *
     * @return $this
     */
    public function setJobType($job_type)
    {
        $allowedValues = $this->getJobTypeAllowableValues();
        if (!is_null($job_type) && !in_array($job_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'job_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['job_type'] = $job_type;

        return $this;
    }

    /**
     * Gets open_date
     *
     * @return string
     */
    public function getOpenDate()
    {
        return $this->container['open_date'];
    }

    /**
     * Sets open_date
     *
     * @param string $open_date Open Date for the job. Must be in format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"
     *
     * @return $this
     */
    public function setOpenDate($open_date)
    {
        $this->container['open_date'] = $open_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
