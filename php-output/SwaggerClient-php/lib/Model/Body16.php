<?php
/**
 * Body16
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Vincere REST API
 *
 * Last updated date: **2019-12-03**  Change log on **[GitHub](https://github.com/vincere-io/restful-api-support)**
 *
 * OpenAPI spec version: 2-oas3
 * Contact: integration@vincere.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Body16 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Body16 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'body_16';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => 'string',
'company_name' => 'string',
'current_employer' => 'bool',
'experience_in_company' => 'string',
'functional_expertise_id' => 'int',
'industry_id' => 'int',
'job_title' => 'string',
'sub_function_id' => 'int',
'work_from' => 'string',
'work_to' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
'company_name' => null,
'current_employer' => null,
'experience_in_company' => null,
'functional_expertise_id' => null,
'industry_id' => null,
'job_title' => null,
'sub_function_id' => null,
'work_from' => null,
'work_to' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
'company_name' => 'company_name',
'current_employer' => 'current_employer',
'experience_in_company' => 'experience_in_company',
'functional_expertise_id' => 'functional_expertise_id',
'industry_id' => 'industry_id',
'job_title' => 'job_title',
'sub_function_id' => 'sub_function_id',
'work_from' => 'work_from',
'work_to' => 'work_to'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
'company_name' => 'setCompanyName',
'current_employer' => 'setCurrentEmployer',
'experience_in_company' => 'setExperienceInCompany',
'functional_expertise_id' => 'setFunctionalExpertiseId',
'industry_id' => 'setIndustryId',
'job_title' => 'setJobTitle',
'sub_function_id' => 'setSubFunctionId',
'work_from' => 'setWorkFrom',
'work_to' => 'setWorkTo'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
'company_name' => 'getCompanyName',
'current_employer' => 'getCurrentEmployer',
'experience_in_company' => 'getExperienceInCompany',
'functional_expertise_id' => 'getFunctionalExpertiseId',
'industry_id' => 'getIndustryId',
'job_title' => 'getJobTitle',
'sub_function_id' => 'getSubFunctionId',
'work_from' => 'getWorkFrom',
'work_to' => 'getWorkTo'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['current_employer'] = isset($data['current_employer']) ? $data['current_employer'] : null;
        $this->container['experience_in_company'] = isset($data['experience_in_company']) ? $data['experience_in_company'] : null;
        $this->container['functional_expertise_id'] = isset($data['functional_expertise_id']) ? $data['functional_expertise_id'] : null;
        $this->container['industry_id'] = isset($data['industry_id']) ? $data['industry_id'] : null;
        $this->container['job_title'] = isset($data['job_title']) ? $data['job_title'] : null;
        $this->container['sub_function_id'] = isset($data['sub_function_id']) ? $data['sub_function_id'] : null;
        $this->container['work_from'] = isset($data['work_from']) ? $data['work_from'] : null;
        $this->container['work_to'] = isset($data['work_to']) ? $data['work_to'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name Company Name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets current_employer
     *
     * @return bool
     */
    public function getCurrentEmployer()
    {
        return $this->container['current_employer'];
    }

    /**
     * Sets current_employer
     *
     * @param bool $current_employer true if candidate is currently working for this company. Otherwise, it should be false.
     *
     * @return $this
     */
    public function setCurrentEmployer($current_employer)
    {
        $this->container['current_employer'] = $current_employer;

        return $this;
    }

    /**
     * Gets experience_in_company
     *
     * @return string
     */
    public function getExperienceInCompany()
    {
        return $this->container['experience_in_company'];
    }

    /**
     * Sets experience_in_company
     *
     * @param string $experience_in_company experience_in_company
     *
     * @return $this
     */
    public function setExperienceInCompany($experience_in_company)
    {
        $this->container['experience_in_company'] = $experience_in_company;

        return $this;
    }

    /**
     * Gets functional_expertise_id
     *
     * @return int
     */
    public function getFunctionalExpertiseId()
    {
        return $this->container['functional_expertise_id'];
    }

    /**
     * Sets functional_expertise_id
     *
     * @param int $functional_expertise_id internal id of functional expertise in Vincere. Please refer to reference section of functional expertise.
     *
     * @return $this
     */
    public function setFunctionalExpertiseId($functional_expertise_id)
    {
        $this->container['functional_expertise_id'] = $functional_expertise_id;

        return $this;
    }

    /**
     * Gets industry_id
     *
     * @return int
     */
    public function getIndustryId()
    {
        return $this->container['industry_id'];
    }

    /**
     * Sets industry_id
     *
     * @param int $industry_id internal id of industry in Vincere. Please refer to reference section of industry.
     *
     * @return $this
     */
    public function setIndustryId($industry_id)
    {
        $this->container['industry_id'] = $industry_id;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string $job_title Job Title
     *
     * @return $this
     */
    public function setJobTitle($job_title)
    {
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets sub_function_id
     *
     * @return int
     */
    public function getSubFunctionId()
    {
        return $this->container['sub_function_id'];
    }

    /**
     * Sets sub_function_id
     *
     * @param int $sub_function_id internal id of subfunctional expertise in Vincere. Please refer to reference section of subfunctional expertise.
     *
     * @return $this
     */
    public function setSubFunctionId($sub_function_id)
    {
        $this->container['sub_function_id'] = $sub_function_id;

        return $this;
    }

    /**
     * Gets work_from
     *
     * @return string
     */
    public function getWorkFrom()
    {
        return $this->container['work_from'];
    }

    /**
     * Sets work_from
     *
     * @param string $work_from Please use the consistent format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\" but be aware that **the time part will be ignored**.
     *
     * @return $this
     */
    public function setWorkFrom($work_from)
    {
        $this->container['work_from'] = $work_from;

        return $this;
    }

    /**
     * Gets work_to
     *
     * @return string
     */
    public function getWorkTo()
    {
        return $this->container['work_to'];
    }

    /**
     * Sets work_to
     *
     * @param string $work_to Please use the consistent format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\" but be aware that **the time part will be ignored**.
     *
     * @return $this
     */
    public function setWorkTo($work_to)
    {
        $this->container['work_to'] = $work_to;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
