<?php
/**
 * InlineResponse20038
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Vincere REST API
 *
 * Last updated date: **2019-12-03**  Change log on **[GitHub](https://github.com/vincere-io/restful-api-support)**
 *
 * OpenAPI spec version: 2-oas3
 * Contact: integration@vincere.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20038 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20038 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_38';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'contract_length' => 'float',
'currency' => 'string',
'formatted_pay_rate' => 'string',
'formatted_salary_from' => 'string',
'formatted_salary_to' => 'string',
'id' => 'int',
'pay_rate' => 'float',
'salary_from' => 'string',
'salary_to' => 'string',
'salary_type' => 'string',
'use_quick_fee_forecast' => 'bool',
'quick_fee' => 'float',
'profit' => 'float',
'job_type' => 'string',
'employment_type' => 'string',
'mths_year' => 'float',
'salary_rate_per_month' => 'float',
'formatted_salary_rate_per_month' => 'string',
'annual_salary' => 'float',
'formatted_annual_salary' => 'string',
'gross_annual_salary' => 'float',
'formatted_gross_annual_salary' => 'string',
'formatted_profit' => 'string',
'incentives' => '\Swagger\Client\Model\InlineResponse20038Incentives[]',
'exempt_incentives' => '\Swagger\Client\Model\InlineResponse20038Incentives[]',
'optional_factors' => '\Swagger\Client\Model\InlineResponse20038OptionalFactors[]',
'stat_gov_taxes' => '\Swagger\Client\Model\InlineResponse20038StatGovTaxes[]',
'annual_paid_holidays' => 'float',
'working_hours_per_day' => 'float',
'working_days_per_month' => 'float',
'annual_paid_sick_days' => 'float',
'working_days_per_week' => 'float',
'working_weeks_per_month' => 'float',
'fee_model_name' => 'string',
'fee_model_type' => 'string',
'fee_model_detail_job_type' => 'string',
'fee_model_fee_rate' => 'float',
'fee_model_gross_annual_salary' => 'bool',
'fee_model_incentives_guarantee' => 'bool',
'fee_model_exempt_incentives' => 'bool',
'fee_model_stat_gov_taxes' => 'bool',
'fee_model_optional_factor' => 'bool',
'fee_model_comment' => 'bool',
'fee_model_contract_period' => 'string',
'fee_model_start_date' => 'string',
'fee_model_invoice_date' => 'string',
'fee_model_invoice_payment_term' => 'float',
'fee_model_fixed_fee_currency' => 'string',
'fee_model_fixed_fee_amount' => 'float',
'formatted_fee_model_fixed_fee_amount' => 'string',
'fee_model_fixed_fee_comment' => 'string',
'fee_model_retainer_currency' => 'string',
'fee_model_retainer_comment' => 'string',
'fee_model_retainer_details' => '\Swagger\Client\Model\InlineResponse20038FeeModelRetainerDetails[]',
'fee_model_retainer_total_amount' => 'float',
'fee_model_no_fee_payable_description' => 'string',
'interval_base_pay' => 'float',
'formatted_interval_base_pay' => 'string',
'interval_base_charge' => 'float',
'formatted_interval_base_charge' => 'string',
'interval_base_profit' => 'float',
'formatted_interval_base_profit' => 'string',
'total_contract_pay' => 'float',
'formatted_total_contract_pay' => 'string',
'total_contract_charge' => 'float',
'formatted_total_contract_charge' => 'string',
'total_contract_profit' => 'float',
'formatted_total_contract_profit' => 'string',
'time_management' => 'string',
'pay_interval' => 'string',
'contract_length_type' => 'string',
'pay_range_from' => 'float',
'pay_range_to' => 'float',
'formatted_pay_range_from' => 'string',
'formatted_pay_range_to' => 'string',
'base_pay_rate' => 'float',
'formatted_base_pay_rate' => 'string',
'on_costs_number' => 'float',
'formatted_on_costs_number' => 'string',
'on_costs_percentage_in_decimal' => 'float',
'total_pay_rate' => 'float',
'formatted_total_pay_rate' => 'string',
'margin_percentage_in_decimal' => 'float',
'markup_percentage_in_decimal' => 'float',
'profit_margin' => 'float',
'formatted_profit_margin' => 'string',
'charge_rate' => 'float',
'formatted_charge_rate' => 'string',
'total_pay_calculation' => 'string',
'calculate_charge_using' => 'string',
'start_of_week' => 'string',
'pay_cycle' => 'string',
'astute_pay_cycle_id' => 'float',
'astute_rule_group_id' => 'float',
'astute_rate_card_id' => 'float',
'first_half_of_month' => 'float',
'second_half_of_month' => 'float',
'pay_and_charge_incl_overtimes' => '\Swagger\Client\Model\InlineResponse20038PayAndChargeInclOvertimes[]',
'allowances_subject_to_stat_govt_taxes' => '\Swagger\Client\Model\InlineResponse20038AllowancesSubjectToStatGovtTaxes[]',
'allowances_not_subject_to_stat_govt_taxes' => '\Swagger\Client\Model\InlineResponse20038AllowancesNotSubjectToStatGovtTaxes[]',
'contract_based_optional_factors' => '\Swagger\Client\Model\InlineResponse20038ContractBasedOptionalFactors[]',
'pto_paid_time_off_in_hours' => '\Swagger\Client\Model\InlineResponse20038PtoPaidTimeOffInHours[]',
'timesheets_pay_rules' => '\Swagger\Client\Model\InlineResponse20038TimesheetsPayRules[]',
'timesheets_pay_rule_exceptions' => '\Swagger\Client\Model\InlineResponse20038TimesheetsPayRules[]',
'fee_model_invoice_pay_interval' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'contract_length' => null,
'currency' => null,
'formatted_pay_rate' => null,
'formatted_salary_from' => null,
'formatted_salary_to' => null,
'id' => null,
'pay_rate' => null,
'salary_from' => null,
'salary_to' => null,
'salary_type' => null,
'use_quick_fee_forecast' => null,
'quick_fee' => null,
'profit' => null,
'job_type' => null,
'employment_type' => null,
'mths_year' => null,
'salary_rate_per_month' => null,
'formatted_salary_rate_per_month' => null,
'annual_salary' => null,
'formatted_annual_salary' => null,
'gross_annual_salary' => null,
'formatted_gross_annual_salary' => null,
'formatted_profit' => null,
'incentives' => null,
'exempt_incentives' => null,
'optional_factors' => null,
'stat_gov_taxes' => null,
'annual_paid_holidays' => null,
'working_hours_per_day' => null,
'working_days_per_month' => null,
'annual_paid_sick_days' => null,
'working_days_per_week' => null,
'working_weeks_per_month' => null,
'fee_model_name' => null,
'fee_model_type' => null,
'fee_model_detail_job_type' => null,
'fee_model_fee_rate' => null,
'fee_model_gross_annual_salary' => null,
'fee_model_incentives_guarantee' => null,
'fee_model_exempt_incentives' => null,
'fee_model_stat_gov_taxes' => null,
'fee_model_optional_factor' => null,
'fee_model_comment' => null,
'fee_model_contract_period' => null,
'fee_model_start_date' => null,
'fee_model_invoice_date' => null,
'fee_model_invoice_payment_term' => null,
'fee_model_fixed_fee_currency' => null,
'fee_model_fixed_fee_amount' => null,
'formatted_fee_model_fixed_fee_amount' => null,
'fee_model_fixed_fee_comment' => null,
'fee_model_retainer_currency' => null,
'fee_model_retainer_comment' => null,
'fee_model_retainer_details' => null,
'fee_model_retainer_total_amount' => null,
'fee_model_no_fee_payable_description' => null,
'interval_base_pay' => null,
'formatted_interval_base_pay' => null,
'interval_base_charge' => null,
'formatted_interval_base_charge' => null,
'interval_base_profit' => null,
'formatted_interval_base_profit' => null,
'total_contract_pay' => null,
'formatted_total_contract_pay' => null,
'total_contract_charge' => null,
'formatted_total_contract_charge' => null,
'total_contract_profit' => null,
'formatted_total_contract_profit' => null,
'time_management' => null,
'pay_interval' => null,
'contract_length_type' => null,
'pay_range_from' => null,
'pay_range_to' => null,
'formatted_pay_range_from' => null,
'formatted_pay_range_to' => null,
'base_pay_rate' => null,
'formatted_base_pay_rate' => null,
'on_costs_number' => null,
'formatted_on_costs_number' => null,
'on_costs_percentage_in_decimal' => null,
'total_pay_rate' => null,
'formatted_total_pay_rate' => null,
'margin_percentage_in_decimal' => null,
'markup_percentage_in_decimal' => null,
'profit_margin' => null,
'formatted_profit_margin' => null,
'charge_rate' => null,
'formatted_charge_rate' => null,
'total_pay_calculation' => null,
'calculate_charge_using' => null,
'start_of_week' => null,
'pay_cycle' => null,
'astute_pay_cycle_id' => null,
'astute_rule_group_id' => null,
'astute_rate_card_id' => null,
'first_half_of_month' => null,
'second_half_of_month' => null,
'pay_and_charge_incl_overtimes' => null,
'allowances_subject_to_stat_govt_taxes' => null,
'allowances_not_subject_to_stat_govt_taxes' => null,
'contract_based_optional_factors' => null,
'pto_paid_time_off_in_hours' => null,
'timesheets_pay_rules' => null,
'timesheets_pay_rule_exceptions' => null,
'fee_model_invoice_pay_interval' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contract_length' => 'contract_length',
'currency' => 'currency',
'formatted_pay_rate' => 'formatted_pay_rate',
'formatted_salary_from' => 'formatted_salary_from',
'formatted_salary_to' => 'formatted_salary_to',
'id' => 'id',
'pay_rate' => 'pay_rate',
'salary_from' => 'salary_from',
'salary_to' => 'salary_to',
'salary_type' => 'salary_type',
'use_quick_fee_forecast' => 'use_quick_fee_forecast',
'quick_fee' => 'quick_fee',
'profit' => 'profit',
'job_type' => 'job_type',
'employment_type' => 'employment_type',
'mths_year' => 'mths_year',
'salary_rate_per_month' => 'salary_rate_per_month',
'formatted_salary_rate_per_month' => 'formatted_salary_rate_per_month',
'annual_salary' => 'annual_salary',
'formatted_annual_salary' => 'formatted_annual_salary',
'gross_annual_salary' => 'gross_annual_salary',
'formatted_gross_annual_salary' => 'formatted_gross_annual_salary',
'formatted_profit' => 'formatted_profit',
'incentives' => 'incentives',
'exempt_incentives' => 'exempt_incentives',
'optional_factors' => 'optional_factors',
'stat_gov_taxes' => 'stat_gov_taxes',
'annual_paid_holidays' => 'annual_paid_holidays',
'working_hours_per_day' => 'working_hours_per_day',
'working_days_per_month' => 'working_days_per_month',
'annual_paid_sick_days' => 'annual_paid_sick_days',
'working_days_per_week' => 'working_days_per_week',
'working_weeks_per_month' => 'working_weeks_per_month',
'fee_model_name' => 'fee_model_name',
'fee_model_type' => 'fee_model_type',
'fee_model_detail_job_type' => 'fee_model_detail_job_type',
'fee_model_fee_rate' => 'fee_model_fee_rate',
'fee_model_gross_annual_salary' => 'fee_model_gross_annual_salary',
'fee_model_incentives_guarantee' => 'fee_model_incentives_guarantee',
'fee_model_exempt_incentives' => 'fee_model_exempt_incentives',
'fee_model_stat_gov_taxes' => 'fee_model_stat_gov_taxes',
'fee_model_optional_factor' => 'fee_model_optional_factor',
'fee_model_comment' => 'fee_model_comment',
'fee_model_contract_period' => 'fee_model_contract_period',
'fee_model_start_date' => 'fee_model_start_date',
'fee_model_invoice_date' => 'fee_model_invoice_date',
'fee_model_invoice_payment_term' => 'fee_model_invoice_payment_term',
'fee_model_fixed_fee_currency' => 'fee_model_fixed_fee_currency',
'fee_model_fixed_fee_amount' => 'fee_model_fixed_fee_amount',
'formatted_fee_model_fixed_fee_amount' => 'formatted_fee_model_fixed_fee_amount',
'fee_model_fixed_fee_comment' => 'fee_model_fixed_fee_comment',
'fee_model_retainer_currency' => 'fee_model_retainer_currency',
'fee_model_retainer_comment' => 'fee_model_retainer_comment',
'fee_model_retainer_details' => 'fee_model_retainer_details',
'fee_model_retainer_total_amount' => 'fee_model_retainer_total_amount',
'fee_model_no_fee_payable_description' => 'fee_model_no_fee_payable_description',
'interval_base_pay' => 'interval_base_pay',
'formatted_interval_base_pay' => 'formatted_interval_base_pay',
'interval_base_charge' => 'interval_base_charge',
'formatted_interval_base_charge' => 'formatted_interval_base_charge',
'interval_base_profit' => 'interval_base_profit',
'formatted_interval_base_profit' => 'formatted_interval_base_profit',
'total_contract_pay' => 'total_contract_pay',
'formatted_total_contract_pay' => 'formatted_total_contract_pay',
'total_contract_charge' => 'total_contract_charge',
'formatted_total_contract_charge' => 'formatted_total_contract_charge',
'total_contract_profit' => 'total_contract_profit',
'formatted_total_contract_profit' => 'formatted_total_contract_profit',
'time_management' => 'time_management',
'pay_interval' => 'pay_interval',
'contract_length_type' => 'contract_length_type',
'pay_range_from' => 'pay_range_from',
'pay_range_to' => 'pay_range_to',
'formatted_pay_range_from' => 'formatted_pay_range_from',
'formatted_pay_range_to' => 'formatted_pay_range_to',
'base_pay_rate' => 'base_pay_rate',
'formatted_base_pay_rate' => 'formatted_base_pay_rate',
'on_costs_number' => 'on_costs_number',
'formatted_on_costs_number' => 'formatted_on_costs_number',
'on_costs_percentage_in_decimal' => 'on_costs_percentage_in_decimal',
'total_pay_rate' => 'total_pay_rate',
'formatted_total_pay_rate' => 'formatted_total_pay_rate',
'margin_percentage_in_decimal' => 'margin_percentage_in_decimal',
'markup_percentage_in_decimal' => 'markup_percentage_in_decimal',
'profit_margin' => 'profit_margin',
'formatted_profit_margin' => 'formatted_profit_margin',
'charge_rate' => 'charge_rate',
'formatted_charge_rate' => 'formatted_charge_rate',
'total_pay_calculation' => 'total_pay_calculation',
'calculate_charge_using' => 'calculate_charge_using',
'start_of_week' => 'start_of_week',
'pay_cycle' => 'pay_cycle',
'astute_pay_cycle_id' => 'astute_pay_cycle_id',
'astute_rule_group_id' => 'astute_rule_group_id',
'astute_rate_card_id' => 'astute_rate_card_id',
'first_half_of_month' => 'first_half_of_month',
'second_half_of_month' => 'second_half_of_month',
'pay_and_charge_incl_overtimes' => 'pay_and_charge_incl_overtimes',
'allowances_subject_to_stat_govt_taxes' => 'allowances_subject_to_stat_govt_taxes',
'allowances_not_subject_to_stat_govt_taxes' => 'allowances_not_subject_to_stat_govt_taxes',
'contract_based_optional_factors' => 'contract_based_optional_factors',
'pto_paid_time_off_in_hours' => 'pto_paid_time_off_in_hours',
'timesheets_pay_rules' => 'timesheets_pay_rules',
'timesheets_pay_rule_exceptions' => 'timesheets_pay_rule_exceptions',
'fee_model_invoice_pay_interval' => 'fee_model_invoice_pay_interval'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contract_length' => 'setContractLength',
'currency' => 'setCurrency',
'formatted_pay_rate' => 'setFormattedPayRate',
'formatted_salary_from' => 'setFormattedSalaryFrom',
'formatted_salary_to' => 'setFormattedSalaryTo',
'id' => 'setId',
'pay_rate' => 'setPayRate',
'salary_from' => 'setSalaryFrom',
'salary_to' => 'setSalaryTo',
'salary_type' => 'setSalaryType',
'use_quick_fee_forecast' => 'setUseQuickFeeForecast',
'quick_fee' => 'setQuickFee',
'profit' => 'setProfit',
'job_type' => 'setJobType',
'employment_type' => 'setEmploymentType',
'mths_year' => 'setMthsYear',
'salary_rate_per_month' => 'setSalaryRatePerMonth',
'formatted_salary_rate_per_month' => 'setFormattedSalaryRatePerMonth',
'annual_salary' => 'setAnnualSalary',
'formatted_annual_salary' => 'setFormattedAnnualSalary',
'gross_annual_salary' => 'setGrossAnnualSalary',
'formatted_gross_annual_salary' => 'setFormattedGrossAnnualSalary',
'formatted_profit' => 'setFormattedProfit',
'incentives' => 'setIncentives',
'exempt_incentives' => 'setExemptIncentives',
'optional_factors' => 'setOptionalFactors',
'stat_gov_taxes' => 'setStatGovTaxes',
'annual_paid_holidays' => 'setAnnualPaidHolidays',
'working_hours_per_day' => 'setWorkingHoursPerDay',
'working_days_per_month' => 'setWorkingDaysPerMonth',
'annual_paid_sick_days' => 'setAnnualPaidSickDays',
'working_days_per_week' => 'setWorkingDaysPerWeek',
'working_weeks_per_month' => 'setWorkingWeeksPerMonth',
'fee_model_name' => 'setFeeModelName',
'fee_model_type' => 'setFeeModelType',
'fee_model_detail_job_type' => 'setFeeModelDetailJobType',
'fee_model_fee_rate' => 'setFeeModelFeeRate',
'fee_model_gross_annual_salary' => 'setFeeModelGrossAnnualSalary',
'fee_model_incentives_guarantee' => 'setFeeModelIncentivesGuarantee',
'fee_model_exempt_incentives' => 'setFeeModelExemptIncentives',
'fee_model_stat_gov_taxes' => 'setFeeModelStatGovTaxes',
'fee_model_optional_factor' => 'setFeeModelOptionalFactor',
'fee_model_comment' => 'setFeeModelComment',
'fee_model_contract_period' => 'setFeeModelContractPeriod',
'fee_model_start_date' => 'setFeeModelStartDate',
'fee_model_invoice_date' => 'setFeeModelInvoiceDate',
'fee_model_invoice_payment_term' => 'setFeeModelInvoicePaymentTerm',
'fee_model_fixed_fee_currency' => 'setFeeModelFixedFeeCurrency',
'fee_model_fixed_fee_amount' => 'setFeeModelFixedFeeAmount',
'formatted_fee_model_fixed_fee_amount' => 'setFormattedFeeModelFixedFeeAmount',
'fee_model_fixed_fee_comment' => 'setFeeModelFixedFeeComment',
'fee_model_retainer_currency' => 'setFeeModelRetainerCurrency',
'fee_model_retainer_comment' => 'setFeeModelRetainerComment',
'fee_model_retainer_details' => 'setFeeModelRetainerDetails',
'fee_model_retainer_total_amount' => 'setFeeModelRetainerTotalAmount',
'fee_model_no_fee_payable_description' => 'setFeeModelNoFeePayableDescription',
'interval_base_pay' => 'setIntervalBasePay',
'formatted_interval_base_pay' => 'setFormattedIntervalBasePay',
'interval_base_charge' => 'setIntervalBaseCharge',
'formatted_interval_base_charge' => 'setFormattedIntervalBaseCharge',
'interval_base_profit' => 'setIntervalBaseProfit',
'formatted_interval_base_profit' => 'setFormattedIntervalBaseProfit',
'total_contract_pay' => 'setTotalContractPay',
'formatted_total_contract_pay' => 'setFormattedTotalContractPay',
'total_contract_charge' => 'setTotalContractCharge',
'formatted_total_contract_charge' => 'setFormattedTotalContractCharge',
'total_contract_profit' => 'setTotalContractProfit',
'formatted_total_contract_profit' => 'setFormattedTotalContractProfit',
'time_management' => 'setTimeManagement',
'pay_interval' => 'setPayInterval',
'contract_length_type' => 'setContractLengthType',
'pay_range_from' => 'setPayRangeFrom',
'pay_range_to' => 'setPayRangeTo',
'formatted_pay_range_from' => 'setFormattedPayRangeFrom',
'formatted_pay_range_to' => 'setFormattedPayRangeTo',
'base_pay_rate' => 'setBasePayRate',
'formatted_base_pay_rate' => 'setFormattedBasePayRate',
'on_costs_number' => 'setOnCostsNumber',
'formatted_on_costs_number' => 'setFormattedOnCostsNumber',
'on_costs_percentage_in_decimal' => 'setOnCostsPercentageInDecimal',
'total_pay_rate' => 'setTotalPayRate',
'formatted_total_pay_rate' => 'setFormattedTotalPayRate',
'margin_percentage_in_decimal' => 'setMarginPercentageInDecimal',
'markup_percentage_in_decimal' => 'setMarkupPercentageInDecimal',
'profit_margin' => 'setProfitMargin',
'formatted_profit_margin' => 'setFormattedProfitMargin',
'charge_rate' => 'setChargeRate',
'formatted_charge_rate' => 'setFormattedChargeRate',
'total_pay_calculation' => 'setTotalPayCalculation',
'calculate_charge_using' => 'setCalculateChargeUsing',
'start_of_week' => 'setStartOfWeek',
'pay_cycle' => 'setPayCycle',
'astute_pay_cycle_id' => 'setAstutePayCycleId',
'astute_rule_group_id' => 'setAstuteRuleGroupId',
'astute_rate_card_id' => 'setAstuteRateCardId',
'first_half_of_month' => 'setFirstHalfOfMonth',
'second_half_of_month' => 'setSecondHalfOfMonth',
'pay_and_charge_incl_overtimes' => 'setPayAndChargeInclOvertimes',
'allowances_subject_to_stat_govt_taxes' => 'setAllowancesSubjectToStatGovtTaxes',
'allowances_not_subject_to_stat_govt_taxes' => 'setAllowancesNotSubjectToStatGovtTaxes',
'contract_based_optional_factors' => 'setContractBasedOptionalFactors',
'pto_paid_time_off_in_hours' => 'setPtoPaidTimeOffInHours',
'timesheets_pay_rules' => 'setTimesheetsPayRules',
'timesheets_pay_rule_exceptions' => 'setTimesheetsPayRuleExceptions',
'fee_model_invoice_pay_interval' => 'setFeeModelInvoicePayInterval'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contract_length' => 'getContractLength',
'currency' => 'getCurrency',
'formatted_pay_rate' => 'getFormattedPayRate',
'formatted_salary_from' => 'getFormattedSalaryFrom',
'formatted_salary_to' => 'getFormattedSalaryTo',
'id' => 'getId',
'pay_rate' => 'getPayRate',
'salary_from' => 'getSalaryFrom',
'salary_to' => 'getSalaryTo',
'salary_type' => 'getSalaryType',
'use_quick_fee_forecast' => 'getUseQuickFeeForecast',
'quick_fee' => 'getQuickFee',
'profit' => 'getProfit',
'job_type' => 'getJobType',
'employment_type' => 'getEmploymentType',
'mths_year' => 'getMthsYear',
'salary_rate_per_month' => 'getSalaryRatePerMonth',
'formatted_salary_rate_per_month' => 'getFormattedSalaryRatePerMonth',
'annual_salary' => 'getAnnualSalary',
'formatted_annual_salary' => 'getFormattedAnnualSalary',
'gross_annual_salary' => 'getGrossAnnualSalary',
'formatted_gross_annual_salary' => 'getFormattedGrossAnnualSalary',
'formatted_profit' => 'getFormattedProfit',
'incentives' => 'getIncentives',
'exempt_incentives' => 'getExemptIncentives',
'optional_factors' => 'getOptionalFactors',
'stat_gov_taxes' => 'getStatGovTaxes',
'annual_paid_holidays' => 'getAnnualPaidHolidays',
'working_hours_per_day' => 'getWorkingHoursPerDay',
'working_days_per_month' => 'getWorkingDaysPerMonth',
'annual_paid_sick_days' => 'getAnnualPaidSickDays',
'working_days_per_week' => 'getWorkingDaysPerWeek',
'working_weeks_per_month' => 'getWorkingWeeksPerMonth',
'fee_model_name' => 'getFeeModelName',
'fee_model_type' => 'getFeeModelType',
'fee_model_detail_job_type' => 'getFeeModelDetailJobType',
'fee_model_fee_rate' => 'getFeeModelFeeRate',
'fee_model_gross_annual_salary' => 'getFeeModelGrossAnnualSalary',
'fee_model_incentives_guarantee' => 'getFeeModelIncentivesGuarantee',
'fee_model_exempt_incentives' => 'getFeeModelExemptIncentives',
'fee_model_stat_gov_taxes' => 'getFeeModelStatGovTaxes',
'fee_model_optional_factor' => 'getFeeModelOptionalFactor',
'fee_model_comment' => 'getFeeModelComment',
'fee_model_contract_period' => 'getFeeModelContractPeriod',
'fee_model_start_date' => 'getFeeModelStartDate',
'fee_model_invoice_date' => 'getFeeModelInvoiceDate',
'fee_model_invoice_payment_term' => 'getFeeModelInvoicePaymentTerm',
'fee_model_fixed_fee_currency' => 'getFeeModelFixedFeeCurrency',
'fee_model_fixed_fee_amount' => 'getFeeModelFixedFeeAmount',
'formatted_fee_model_fixed_fee_amount' => 'getFormattedFeeModelFixedFeeAmount',
'fee_model_fixed_fee_comment' => 'getFeeModelFixedFeeComment',
'fee_model_retainer_currency' => 'getFeeModelRetainerCurrency',
'fee_model_retainer_comment' => 'getFeeModelRetainerComment',
'fee_model_retainer_details' => 'getFeeModelRetainerDetails',
'fee_model_retainer_total_amount' => 'getFeeModelRetainerTotalAmount',
'fee_model_no_fee_payable_description' => 'getFeeModelNoFeePayableDescription',
'interval_base_pay' => 'getIntervalBasePay',
'formatted_interval_base_pay' => 'getFormattedIntervalBasePay',
'interval_base_charge' => 'getIntervalBaseCharge',
'formatted_interval_base_charge' => 'getFormattedIntervalBaseCharge',
'interval_base_profit' => 'getIntervalBaseProfit',
'formatted_interval_base_profit' => 'getFormattedIntervalBaseProfit',
'total_contract_pay' => 'getTotalContractPay',
'formatted_total_contract_pay' => 'getFormattedTotalContractPay',
'total_contract_charge' => 'getTotalContractCharge',
'formatted_total_contract_charge' => 'getFormattedTotalContractCharge',
'total_contract_profit' => 'getTotalContractProfit',
'formatted_total_contract_profit' => 'getFormattedTotalContractProfit',
'time_management' => 'getTimeManagement',
'pay_interval' => 'getPayInterval',
'contract_length_type' => 'getContractLengthType',
'pay_range_from' => 'getPayRangeFrom',
'pay_range_to' => 'getPayRangeTo',
'formatted_pay_range_from' => 'getFormattedPayRangeFrom',
'formatted_pay_range_to' => 'getFormattedPayRangeTo',
'base_pay_rate' => 'getBasePayRate',
'formatted_base_pay_rate' => 'getFormattedBasePayRate',
'on_costs_number' => 'getOnCostsNumber',
'formatted_on_costs_number' => 'getFormattedOnCostsNumber',
'on_costs_percentage_in_decimal' => 'getOnCostsPercentageInDecimal',
'total_pay_rate' => 'getTotalPayRate',
'formatted_total_pay_rate' => 'getFormattedTotalPayRate',
'margin_percentage_in_decimal' => 'getMarginPercentageInDecimal',
'markup_percentage_in_decimal' => 'getMarkupPercentageInDecimal',
'profit_margin' => 'getProfitMargin',
'formatted_profit_margin' => 'getFormattedProfitMargin',
'charge_rate' => 'getChargeRate',
'formatted_charge_rate' => 'getFormattedChargeRate',
'total_pay_calculation' => 'getTotalPayCalculation',
'calculate_charge_using' => 'getCalculateChargeUsing',
'start_of_week' => 'getStartOfWeek',
'pay_cycle' => 'getPayCycle',
'astute_pay_cycle_id' => 'getAstutePayCycleId',
'astute_rule_group_id' => 'getAstuteRuleGroupId',
'astute_rate_card_id' => 'getAstuteRateCardId',
'first_half_of_month' => 'getFirstHalfOfMonth',
'second_half_of_month' => 'getSecondHalfOfMonth',
'pay_and_charge_incl_overtimes' => 'getPayAndChargeInclOvertimes',
'allowances_subject_to_stat_govt_taxes' => 'getAllowancesSubjectToStatGovtTaxes',
'allowances_not_subject_to_stat_govt_taxes' => 'getAllowancesNotSubjectToStatGovtTaxes',
'contract_based_optional_factors' => 'getContractBasedOptionalFactors',
'pto_paid_time_off_in_hours' => 'getPtoPaidTimeOffInHours',
'timesheets_pay_rules' => 'getTimesheetsPayRules',
'timesheets_pay_rule_exceptions' => 'getTimesheetsPayRuleExceptions',
'fee_model_invoice_pay_interval' => 'getFeeModelInvoicePayInterval'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SALARY_TYPE_ANNUAL = 'ANNUAL';
const SALARY_TYPE_HOURLY = 'HOURLY';
const SALARY_TYPE_DAILY = 'DAILY';
const SALARY_TYPE_WEEKLY = 'WEEKLY';
const SALARY_TYPE_MONTHLY = 'MONTHLY';
const SALARY_TYPE_QUATERLY = 'QUATERLY';
const SALARY_TYPE_YEARLY = 'YEARLY';
const JOB_TYPE_PERMANENT = 'PERMANENT';
const JOB_TYPE_PART_TIME = 'PART_TIME';
const JOB_TYPE_TEMPORARY = 'TEMPORARY';
const JOB_TYPE_CONTRACT = 'CONTRACT';
const JOB_TYPE_TEMP_TO_PERM = 'TEMP_TO_PERM';
const FEE_MODEL_TYPE_BASE_VARIABLE = 'BASE_VARIABLE';
const FEE_MODEL_TYPE_FIXED_FEE = 'FIXED_FEE';
const FEE_MODEL_TYPE_RETAINER = 'RETAINER';
const FEE_MODEL_TYPE_NO_FEE = 'NO_FEE';
const FEE_MODEL_DETAIL_JOB_TYPE_PERMANENT = 'PERMANENT';
const FEE_MODEL_DETAIL_JOB_TYPE_PART_TIME = 'PART_TIME';
const FEE_MODEL_DETAIL_JOB_TYPE_TEMPORARY = 'TEMPORARY';
const FEE_MODEL_DETAIL_JOB_TYPE_CONTRACT = 'CONTRACT';
const FEE_MODEL_DETAIL_JOB_TYPE_TEMP_TO_PERM = 'TEMP_TO_PERM';
const FEE_MODEL_CONTRACT_PERIOD_FIXED_PERIOD = 'FIXED_PERIOD';
const FEE_MODEL_CONTRACT_PERIOD_NO_FIXED_PERIOD = 'NO_FIXED_PERIOD';
const TIME_MANAGEMENT_MANUAL = 'MANUAL';
const TIME_MANAGEMENT_TIME_TEMP = 'TIME_TEMP';
const TIME_MANAGEMENT_ASTUTE_PAYROLL = 'ASTUTE_PAYROLL';
const PAY_INTERVAL_HOURLY = 'HOURLY';
const PAY_INTERVAL_DAILY = 'DAILY';
const PAY_INTERVAL_WEEKLY = 'WEEKLY';
const PAY_INTERVAL_MONTHLY = 'MONTHLY';
const CONTRACT_LENGTH_TYPE_HOUR = 'HOUR';
const CONTRACT_LENGTH_TYPE_DAY = 'DAY';
const CONTRACT_LENGTH_TYPE_WEEK = 'WEEK';
const CONTRACT_LENGTH_TYPE_MONTH = 'MONTH';
const CONTRACT_LENGTH_TYPE_YEAR = 'YEAR';
const PAY_CYCLE_WEEKLY = 'WEEKLY';
const PAY_CYCLE_BI_WEEKLY = 'BI_WEEKLY';
const PAY_CYCLE_SEMI_MONTHLY = 'SEMI_MONTHLY';
const PAY_CYCLE_FOUR_WEEKLY = 'FOUR_WEEKLY';
const PAY_CYCLE_MONTHLY = 'MONTHLY';
const PAY_CYCLE_TIMESHEET = 'TIMESHEET';
const PAY_CYCLE_PROJECT_COMPLETION = 'PROJECT_COMPLETION';
const PAY_CYCLE_CUSTOM = 'CUSTOM';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSalaryTypeAllowableValues()
    {
        return [
            self::SALARY_TYPE_ANNUAL,
self::SALARY_TYPE_HOURLY,
self::SALARY_TYPE_DAILY,
self::SALARY_TYPE_WEEKLY,
self::SALARY_TYPE_MONTHLY,
self::SALARY_TYPE_QUATERLY,
self::SALARY_TYPE_YEARLY,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJobTypeAllowableValues()
    {
        return [
            self::JOB_TYPE_PERMANENT,
self::JOB_TYPE_PART_TIME,
self::JOB_TYPE_TEMPORARY,
self::JOB_TYPE_CONTRACT,
self::JOB_TYPE_TEMP_TO_PERM,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFeeModelTypeAllowableValues()
    {
        return [
            self::FEE_MODEL_TYPE_BASE_VARIABLE,
self::FEE_MODEL_TYPE_FIXED_FEE,
self::FEE_MODEL_TYPE_RETAINER,
self::FEE_MODEL_TYPE_NO_FEE,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFeeModelDetailJobTypeAllowableValues()
    {
        return [
            self::FEE_MODEL_DETAIL_JOB_TYPE_PERMANENT,
self::FEE_MODEL_DETAIL_JOB_TYPE_PART_TIME,
self::FEE_MODEL_DETAIL_JOB_TYPE_TEMPORARY,
self::FEE_MODEL_DETAIL_JOB_TYPE_CONTRACT,
self::FEE_MODEL_DETAIL_JOB_TYPE_TEMP_TO_PERM,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFeeModelContractPeriodAllowableValues()
    {
        return [
            self::FEE_MODEL_CONTRACT_PERIOD_FIXED_PERIOD,
self::FEE_MODEL_CONTRACT_PERIOD_NO_FIXED_PERIOD,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTimeManagementAllowableValues()
    {
        return [
            self::TIME_MANAGEMENT_MANUAL,
self::TIME_MANAGEMENT_TIME_TEMP,
self::TIME_MANAGEMENT_ASTUTE_PAYROLL,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPayIntervalAllowableValues()
    {
        return [
            self::PAY_INTERVAL_HOURLY,
self::PAY_INTERVAL_DAILY,
self::PAY_INTERVAL_WEEKLY,
self::PAY_INTERVAL_MONTHLY,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContractLengthTypeAllowableValues()
    {
        return [
            self::CONTRACT_LENGTH_TYPE_HOUR,
self::CONTRACT_LENGTH_TYPE_DAY,
self::CONTRACT_LENGTH_TYPE_WEEK,
self::CONTRACT_LENGTH_TYPE_MONTH,
self::CONTRACT_LENGTH_TYPE_YEAR,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPayCycleAllowableValues()
    {
        return [
            self::PAY_CYCLE_WEEKLY,
self::PAY_CYCLE_BI_WEEKLY,
self::PAY_CYCLE_SEMI_MONTHLY,
self::PAY_CYCLE_FOUR_WEEKLY,
self::PAY_CYCLE_MONTHLY,
self::PAY_CYCLE_TIMESHEET,
self::PAY_CYCLE_PROJECT_COMPLETION,
self::PAY_CYCLE_CUSTOM,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contract_length'] = isset($data['contract_length']) ? $data['contract_length'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['formatted_pay_rate'] = isset($data['formatted_pay_rate']) ? $data['formatted_pay_rate'] : null;
        $this->container['formatted_salary_from'] = isset($data['formatted_salary_from']) ? $data['formatted_salary_from'] : null;
        $this->container['formatted_salary_to'] = isset($data['formatted_salary_to']) ? $data['formatted_salary_to'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['pay_rate'] = isset($data['pay_rate']) ? $data['pay_rate'] : null;
        $this->container['salary_from'] = isset($data['salary_from']) ? $data['salary_from'] : null;
        $this->container['salary_to'] = isset($data['salary_to']) ? $data['salary_to'] : null;
        $this->container['salary_type'] = isset($data['salary_type']) ? $data['salary_type'] : null;
        $this->container['use_quick_fee_forecast'] = isset($data['use_quick_fee_forecast']) ? $data['use_quick_fee_forecast'] : null;
        $this->container['quick_fee'] = isset($data['quick_fee']) ? $data['quick_fee'] : null;
        $this->container['profit'] = isset($data['profit']) ? $data['profit'] : null;
        $this->container['job_type'] = isset($data['job_type']) ? $data['job_type'] : null;
        $this->container['employment_type'] = isset($data['employment_type']) ? $data['employment_type'] : null;
        $this->container['mths_year'] = isset($data['mths_year']) ? $data['mths_year'] : null;
        $this->container['salary_rate_per_month'] = isset($data['salary_rate_per_month']) ? $data['salary_rate_per_month'] : null;
        $this->container['formatted_salary_rate_per_month'] = isset($data['formatted_salary_rate_per_month']) ? $data['formatted_salary_rate_per_month'] : null;
        $this->container['annual_salary'] = isset($data['annual_salary']) ? $data['annual_salary'] : null;
        $this->container['formatted_annual_salary'] = isset($data['formatted_annual_salary']) ? $data['formatted_annual_salary'] : null;
        $this->container['gross_annual_salary'] = isset($data['gross_annual_salary']) ? $data['gross_annual_salary'] : null;
        $this->container['formatted_gross_annual_salary'] = isset($data['formatted_gross_annual_salary']) ? $data['formatted_gross_annual_salary'] : null;
        $this->container['formatted_profit'] = isset($data['formatted_profit']) ? $data['formatted_profit'] : null;
        $this->container['incentives'] = isset($data['incentives']) ? $data['incentives'] : null;
        $this->container['exempt_incentives'] = isset($data['exempt_incentives']) ? $data['exempt_incentives'] : null;
        $this->container['optional_factors'] = isset($data['optional_factors']) ? $data['optional_factors'] : null;
        $this->container['stat_gov_taxes'] = isset($data['stat_gov_taxes']) ? $data['stat_gov_taxes'] : null;
        $this->container['annual_paid_holidays'] = isset($data['annual_paid_holidays']) ? $data['annual_paid_holidays'] : null;
        $this->container['working_hours_per_day'] = isset($data['working_hours_per_day']) ? $data['working_hours_per_day'] : null;
        $this->container['working_days_per_month'] = isset($data['working_days_per_month']) ? $data['working_days_per_month'] : null;
        $this->container['annual_paid_sick_days'] = isset($data['annual_paid_sick_days']) ? $data['annual_paid_sick_days'] : null;
        $this->container['working_days_per_week'] = isset($data['working_days_per_week']) ? $data['working_days_per_week'] : null;
        $this->container['working_weeks_per_month'] = isset($data['working_weeks_per_month']) ? $data['working_weeks_per_month'] : null;
        $this->container['fee_model_name'] = isset($data['fee_model_name']) ? $data['fee_model_name'] : null;
        $this->container['fee_model_type'] = isset($data['fee_model_type']) ? $data['fee_model_type'] : null;
        $this->container['fee_model_detail_job_type'] = isset($data['fee_model_detail_job_type']) ? $data['fee_model_detail_job_type'] : null;
        $this->container['fee_model_fee_rate'] = isset($data['fee_model_fee_rate']) ? $data['fee_model_fee_rate'] : null;
        $this->container['fee_model_gross_annual_salary'] = isset($data['fee_model_gross_annual_salary']) ? $data['fee_model_gross_annual_salary'] : null;
        $this->container['fee_model_incentives_guarantee'] = isset($data['fee_model_incentives_guarantee']) ? $data['fee_model_incentives_guarantee'] : null;
        $this->container['fee_model_exempt_incentives'] = isset($data['fee_model_exempt_incentives']) ? $data['fee_model_exempt_incentives'] : null;
        $this->container['fee_model_stat_gov_taxes'] = isset($data['fee_model_stat_gov_taxes']) ? $data['fee_model_stat_gov_taxes'] : null;
        $this->container['fee_model_optional_factor'] = isset($data['fee_model_optional_factor']) ? $data['fee_model_optional_factor'] : null;
        $this->container['fee_model_comment'] = isset($data['fee_model_comment']) ? $data['fee_model_comment'] : null;
        $this->container['fee_model_contract_period'] = isset($data['fee_model_contract_period']) ? $data['fee_model_contract_period'] : null;
        $this->container['fee_model_start_date'] = isset($data['fee_model_start_date']) ? $data['fee_model_start_date'] : null;
        $this->container['fee_model_invoice_date'] = isset($data['fee_model_invoice_date']) ? $data['fee_model_invoice_date'] : null;
        $this->container['fee_model_invoice_payment_term'] = isset($data['fee_model_invoice_payment_term']) ? $data['fee_model_invoice_payment_term'] : null;
        $this->container['fee_model_fixed_fee_currency'] = isset($data['fee_model_fixed_fee_currency']) ? $data['fee_model_fixed_fee_currency'] : null;
        $this->container['fee_model_fixed_fee_amount'] = isset($data['fee_model_fixed_fee_amount']) ? $data['fee_model_fixed_fee_amount'] : null;
        $this->container['formatted_fee_model_fixed_fee_amount'] = isset($data['formatted_fee_model_fixed_fee_amount']) ? $data['formatted_fee_model_fixed_fee_amount'] : null;
        $this->container['fee_model_fixed_fee_comment'] = isset($data['fee_model_fixed_fee_comment']) ? $data['fee_model_fixed_fee_comment'] : null;
        $this->container['fee_model_retainer_currency'] = isset($data['fee_model_retainer_currency']) ? $data['fee_model_retainer_currency'] : null;
        $this->container['fee_model_retainer_comment'] = isset($data['fee_model_retainer_comment']) ? $data['fee_model_retainer_comment'] : null;
        $this->container['fee_model_retainer_details'] = isset($data['fee_model_retainer_details']) ? $data['fee_model_retainer_details'] : null;
        $this->container['fee_model_retainer_total_amount'] = isset($data['fee_model_retainer_total_amount']) ? $data['fee_model_retainer_total_amount'] : null;
        $this->container['fee_model_no_fee_payable_description'] = isset($data['fee_model_no_fee_payable_description']) ? $data['fee_model_no_fee_payable_description'] : null;
        $this->container['interval_base_pay'] = isset($data['interval_base_pay']) ? $data['interval_base_pay'] : null;
        $this->container['formatted_interval_base_pay'] = isset($data['formatted_interval_base_pay']) ? $data['formatted_interval_base_pay'] : null;
        $this->container['interval_base_charge'] = isset($data['interval_base_charge']) ? $data['interval_base_charge'] : null;
        $this->container['formatted_interval_base_charge'] = isset($data['formatted_interval_base_charge']) ? $data['formatted_interval_base_charge'] : null;
        $this->container['interval_base_profit'] = isset($data['interval_base_profit']) ? $data['interval_base_profit'] : null;
        $this->container['formatted_interval_base_profit'] = isset($data['formatted_interval_base_profit']) ? $data['formatted_interval_base_profit'] : null;
        $this->container['total_contract_pay'] = isset($data['total_contract_pay']) ? $data['total_contract_pay'] : null;
        $this->container['formatted_total_contract_pay'] = isset($data['formatted_total_contract_pay']) ? $data['formatted_total_contract_pay'] : null;
        $this->container['total_contract_charge'] = isset($data['total_contract_charge']) ? $data['total_contract_charge'] : null;
        $this->container['formatted_total_contract_charge'] = isset($data['formatted_total_contract_charge']) ? $data['formatted_total_contract_charge'] : null;
        $this->container['total_contract_profit'] = isset($data['total_contract_profit']) ? $data['total_contract_profit'] : null;
        $this->container['formatted_total_contract_profit'] = isset($data['formatted_total_contract_profit']) ? $data['formatted_total_contract_profit'] : null;
        $this->container['time_management'] = isset($data['time_management']) ? $data['time_management'] : null;
        $this->container['pay_interval'] = isset($data['pay_interval']) ? $data['pay_interval'] : null;
        $this->container['contract_length_type'] = isset($data['contract_length_type']) ? $data['contract_length_type'] : null;
        $this->container['pay_range_from'] = isset($data['pay_range_from']) ? $data['pay_range_from'] : null;
        $this->container['pay_range_to'] = isset($data['pay_range_to']) ? $data['pay_range_to'] : null;
        $this->container['formatted_pay_range_from'] = isset($data['formatted_pay_range_from']) ? $data['formatted_pay_range_from'] : null;
        $this->container['formatted_pay_range_to'] = isset($data['formatted_pay_range_to']) ? $data['formatted_pay_range_to'] : null;
        $this->container['base_pay_rate'] = isset($data['base_pay_rate']) ? $data['base_pay_rate'] : null;
        $this->container['formatted_base_pay_rate'] = isset($data['formatted_base_pay_rate']) ? $data['formatted_base_pay_rate'] : null;
        $this->container['on_costs_number'] = isset($data['on_costs_number']) ? $data['on_costs_number'] : null;
        $this->container['formatted_on_costs_number'] = isset($data['formatted_on_costs_number']) ? $data['formatted_on_costs_number'] : null;
        $this->container['on_costs_percentage_in_decimal'] = isset($data['on_costs_percentage_in_decimal']) ? $data['on_costs_percentage_in_decimal'] : null;
        $this->container['total_pay_rate'] = isset($data['total_pay_rate']) ? $data['total_pay_rate'] : null;
        $this->container['formatted_total_pay_rate'] = isset($data['formatted_total_pay_rate']) ? $data['formatted_total_pay_rate'] : null;
        $this->container['margin_percentage_in_decimal'] = isset($data['margin_percentage_in_decimal']) ? $data['margin_percentage_in_decimal'] : null;
        $this->container['markup_percentage_in_decimal'] = isset($data['markup_percentage_in_decimal']) ? $data['markup_percentage_in_decimal'] : null;
        $this->container['profit_margin'] = isset($data['profit_margin']) ? $data['profit_margin'] : null;
        $this->container['formatted_profit_margin'] = isset($data['formatted_profit_margin']) ? $data['formatted_profit_margin'] : null;
        $this->container['charge_rate'] = isset($data['charge_rate']) ? $data['charge_rate'] : null;
        $this->container['formatted_charge_rate'] = isset($data['formatted_charge_rate']) ? $data['formatted_charge_rate'] : null;
        $this->container['total_pay_calculation'] = isset($data['total_pay_calculation']) ? $data['total_pay_calculation'] : null;
        $this->container['calculate_charge_using'] = isset($data['calculate_charge_using']) ? $data['calculate_charge_using'] : null;
        $this->container['start_of_week'] = isset($data['start_of_week']) ? $data['start_of_week'] : null;
        $this->container['pay_cycle'] = isset($data['pay_cycle']) ? $data['pay_cycle'] : null;
        $this->container['astute_pay_cycle_id'] = isset($data['astute_pay_cycle_id']) ? $data['astute_pay_cycle_id'] : null;
        $this->container['astute_rule_group_id'] = isset($data['astute_rule_group_id']) ? $data['astute_rule_group_id'] : null;
        $this->container['astute_rate_card_id'] = isset($data['astute_rate_card_id']) ? $data['astute_rate_card_id'] : null;
        $this->container['first_half_of_month'] = isset($data['first_half_of_month']) ? $data['first_half_of_month'] : null;
        $this->container['second_half_of_month'] = isset($data['second_half_of_month']) ? $data['second_half_of_month'] : null;
        $this->container['pay_and_charge_incl_overtimes'] = isset($data['pay_and_charge_incl_overtimes']) ? $data['pay_and_charge_incl_overtimes'] : null;
        $this->container['allowances_subject_to_stat_govt_taxes'] = isset($data['allowances_subject_to_stat_govt_taxes']) ? $data['allowances_subject_to_stat_govt_taxes'] : null;
        $this->container['allowances_not_subject_to_stat_govt_taxes'] = isset($data['allowances_not_subject_to_stat_govt_taxes']) ? $data['allowances_not_subject_to_stat_govt_taxes'] : null;
        $this->container['contract_based_optional_factors'] = isset($data['contract_based_optional_factors']) ? $data['contract_based_optional_factors'] : null;
        $this->container['pto_paid_time_off_in_hours'] = isset($data['pto_paid_time_off_in_hours']) ? $data['pto_paid_time_off_in_hours'] : null;
        $this->container['timesheets_pay_rules'] = isset($data['timesheets_pay_rules']) ? $data['timesheets_pay_rules'] : null;
        $this->container['timesheets_pay_rule_exceptions'] = isset($data['timesheets_pay_rule_exceptions']) ? $data['timesheets_pay_rule_exceptions'] : null;
        $this->container['fee_model_invoice_pay_interval'] = isset($data['fee_model_invoice_pay_interval']) ? $data['fee_model_invoice_pay_interval'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSalaryTypeAllowableValues();
        if (!is_null($this->container['salary_type']) && !in_array($this->container['salary_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'salary_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getJobTypeAllowableValues();
        if (!is_null($this->container['job_type']) && !in_array($this->container['job_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'job_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFeeModelTypeAllowableValues();
        if (!is_null($this->container['fee_model_type']) && !in_array($this->container['fee_model_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'fee_model_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFeeModelDetailJobTypeAllowableValues();
        if (!is_null($this->container['fee_model_detail_job_type']) && !in_array($this->container['fee_model_detail_job_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'fee_model_detail_job_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFeeModelContractPeriodAllowableValues();
        if (!is_null($this->container['fee_model_contract_period']) && !in_array($this->container['fee_model_contract_period'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'fee_model_contract_period', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTimeManagementAllowableValues();
        if (!is_null($this->container['time_management']) && !in_array($this->container['time_management'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'time_management', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPayIntervalAllowableValues();
        if (!is_null($this->container['pay_interval']) && !in_array($this->container['pay_interval'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'pay_interval', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getContractLengthTypeAllowableValues();
        if (!is_null($this->container['contract_length_type']) && !in_array($this->container['contract_length_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'contract_length_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPayCycleAllowableValues();
        if (!is_null($this->container['pay_cycle']) && !in_array($this->container['pay_cycle'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'pay_cycle', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contract_length
     *
     * @return float
     */
    public function getContractLength()
    {
        return $this->container['contract_length'];
    }

    /**
     * Sets contract_length
     *
     * @param float $contract_length Contract Length
     *
     * @return $this
     */
    public function setContractLength($contract_length)
    {
        $this->container['contract_length'] = $contract_length;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency. Please refer to reference list for the currency values.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets formatted_pay_rate
     *
     * @return string
     */
    public function getFormattedPayRate()
    {
        return $this->container['formatted_pay_rate'];
    }

    /**
     * Sets formatted_pay_rate
     *
     * @param string $formatted_pay_rate Formatted Pay Rate (e.g. USD $55,000.00)
     *
     * @return $this
     */
    public function setFormattedPayRate($formatted_pay_rate)
    {
        $this->container['formatted_pay_rate'] = $formatted_pay_rate;

        return $this;
    }

    /**
     * Gets formatted_salary_from
     *
     * @return string
     */
    public function getFormattedSalaryFrom()
    {
        return $this->container['formatted_salary_from'];
    }

    /**
     * Sets formatted_salary_from
     *
     * @param string $formatted_salary_from Formatted Salary Range From
     *
     * @return $this
     */
    public function setFormattedSalaryFrom($formatted_salary_from)
    {
        $this->container['formatted_salary_from'] = $formatted_salary_from;

        return $this;
    }

    /**
     * Gets formatted_salary_to
     *
     * @return string
     */
    public function getFormattedSalaryTo()
    {
        return $this->container['formatted_salary_to'];
    }

    /**
     * Sets formatted_salary_to
     *
     * @param string $formatted_salary_to Formatted Salary Range To
     *
     * @return $this
     */
    public function setFormattedSalaryTo($formatted_salary_to)
    {
        $this->container['formatted_salary_to'] = $formatted_salary_to;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id internal id of compensation
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets pay_rate
     *
     * @return float
     */
    public function getPayRate()
    {
        return $this->container['pay_rate'];
    }

    /**
     * Sets pay_rate
     *
     * @param float $pay_rate Pay Rate of job
     *
     * @return $this
     */
    public function setPayRate($pay_rate)
    {
        $this->container['pay_rate'] = $pay_rate;

        return $this;
    }

    /**
     * Gets salary_from
     *
     * @return string
     */
    public function getSalaryFrom()
    {
        return $this->container['salary_from'];
    }

    /**
     * Sets salary_from
     *
     * @param string $salary_from Salary Range From
     *
     * @return $this
     */
    public function setSalaryFrom($salary_from)
    {
        $this->container['salary_from'] = $salary_from;

        return $this;
    }

    /**
     * Gets salary_to
     *
     * @return string
     */
    public function getSalaryTo()
    {
        return $this->container['salary_to'];
    }

    /**
     * Sets salary_to
     *
     * @param string $salary_to Salary Range To
     *
     * @return $this
     */
    public function setSalaryTo($salary_to)
    {
        $this->container['salary_to'] = $salary_to;

        return $this;
    }

    /**
     * Gets salary_type
     *
     * @return string
     */
    public function getSalaryType()
    {
        return $this->container['salary_type'];
    }

    /**
     * Sets salary_type
     *
     * @param string $salary_type salary type
     *
     * @return $this
     */
    public function setSalaryType($salary_type)
    {
        $allowedValues = $this->getSalaryTypeAllowableValues();
        if (!is_null($salary_type) && !in_array($salary_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'salary_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['salary_type'] = $salary_type;

        return $this;
    }

    /**
     * Gets use_quick_fee_forecast
     *
     * @return bool
     */
    public function getUseQuickFeeForecast()
    {
        return $this->container['use_quick_fee_forecast'];
    }

    /**
     * Sets use_quick_fee_forecast
     *
     * @param bool $use_quick_fee_forecast this is check use quick fee forecast
     *
     * @return $this
     */
    public function setUseQuickFeeForecast($use_quick_fee_forecast)
    {
        $this->container['use_quick_fee_forecast'] = $use_quick_fee_forecast;

        return $this;
    }

    /**
     * Gets quick_fee
     *
     * @return float
     */
    public function getQuickFee()
    {
        return $this->container['quick_fee'];
    }

    /**
     * Sets quick_fee
     *
     * @param float $quick_fee total percentage fee
     *
     * @return $this
     */
    public function setQuickFee($quick_fee)
    {
        $this->container['quick_fee'] = $quick_fee;

        return $this;
    }

    /**
     * Gets profit
     *
     * @return float
     */
    public function getProfit()
    {
        return $this->container['profit'];
    }

    /**
     * Sets profit
     *
     * @param float $profit total number of profit pay
     *
     * @return $this
     */
    public function setProfit($profit)
    {
        $this->container['profit'] = $profit;

        return $this;
    }

    /**
     * Gets job_type
     *
     * @return string
     */
    public function getJobType()
    {
        return $this->container['job_type'];
    }

    /**
     * Sets job_type
     *
     * @param string $job_type Job Type. Please refer to reference section of job types for possible values.
     *
     * @return $this
     */
    public function setJobType($job_type)
    {
        $allowedValues = $this->getJobTypeAllowableValues();
        if (!is_null($job_type) && !in_array($job_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'job_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['job_type'] = $job_type;

        return $this;
    }

    /**
     * Gets employment_type
     *
     * @return string
     */
    public function getEmploymentType()
    {
        return $this->container['employment_type'];
    }

    /**
     * Sets employment_type
     *
     * @param string $employment_type Employment Type. Please refer to reference section of employment type for possible values.
     *
     * @return $this
     */
    public function setEmploymentType($employment_type)
    {
        $this->container['employment_type'] = $employment_type;

        return $this;
    }

    /**
     * Gets mths_year
     *
     * @return float
     */
    public function getMthsYear()
    {
        return $this->container['mths_year'];
    }

    /**
     * Sets mths_year
     *
     * @param float $mths_year the length of contract
     *
     * @return $this
     */
    public function setMthsYear($mths_year)
    {
        $this->container['mths_year'] = $mths_year;

        return $this;
    }

    /**
     * Gets salary_rate_per_month
     *
     * @return float
     */
    public function getSalaryRatePerMonth()
    {
        return $this->container['salary_rate_per_month'];
    }

    /**
     * Sets salary_rate_per_month
     *
     * @param float $salary_rate_per_month salary per month
     *
     * @return $this
     */
    public function setSalaryRatePerMonth($salary_rate_per_month)
    {
        $this->container['salary_rate_per_month'] = $salary_rate_per_month;

        return $this;
    }

    /**
     * Gets formatted_salary_rate_per_month
     *
     * @return string
     */
    public function getFormattedSalaryRatePerMonth()
    {
        return $this->container['formatted_salary_rate_per_month'];
    }

    /**
     * Sets formatted_salary_rate_per_month
     *
     * @param string $formatted_salary_rate_per_month Formatted Salary rate per month
     *
     * @return $this
     */
    public function setFormattedSalaryRatePerMonth($formatted_salary_rate_per_month)
    {
        $this->container['formatted_salary_rate_per_month'] = $formatted_salary_rate_per_month;

        return $this;
    }

    /**
     * Gets annual_salary
     *
     * @return float
     */
    public function getAnnualSalary()
    {
        return $this->container['annual_salary'];
    }

    /**
     * Sets annual_salary
     *
     * @param float $annual_salary total salary per year
     *
     * @return $this
     */
    public function setAnnualSalary($annual_salary)
    {
        $this->container['annual_salary'] = $annual_salary;

        return $this;
    }

    /**
     * Gets formatted_annual_salary
     *
     * @return string
     */
    public function getFormattedAnnualSalary()
    {
        return $this->container['formatted_annual_salary'];
    }

    /**
     * Sets formatted_annual_salary
     *
     * @param string $formatted_annual_salary Formatted Salary rate per year
     *
     * @return $this
     */
    public function setFormattedAnnualSalary($formatted_annual_salary)
    {
        $this->container['formatted_annual_salary'] = $formatted_annual_salary;

        return $this;
    }

    /**
     * Gets gross_annual_salary
     *
     * @return float
     */
    public function getGrossAnnualSalary()
    {
        return $this->container['gross_annual_salary'];
    }

    /**
     * Sets gross_annual_salary
     *
     * @param float $gross_annual_salary total salary include tax
     *
     * @return $this
     */
    public function setGrossAnnualSalary($gross_annual_salary)
    {
        $this->container['gross_annual_salary'] = $gross_annual_salary;

        return $this;
    }

    /**
     * Gets formatted_gross_annual_salary
     *
     * @return string
     */
    public function getFormattedGrossAnnualSalary()
    {
        return $this->container['formatted_gross_annual_salary'];
    }

    /**
     * Sets formatted_gross_annual_salary
     *
     * @param string $formatted_gross_annual_salary Formatted gross salary annual
     *
     * @return $this
     */
    public function setFormattedGrossAnnualSalary($formatted_gross_annual_salary)
    {
        $this->container['formatted_gross_annual_salary'] = $formatted_gross_annual_salary;

        return $this;
    }

    /**
     * Gets formatted_profit
     *
     * @return string
     */
    public function getFormattedProfit()
    {
        return $this->container['formatted_profit'];
    }

    /**
     * Sets formatted_profit
     *
     * @param string $formatted_profit Formatted profit rate
     *
     * @return $this
     */
    public function setFormattedProfit($formatted_profit)
    {
        $this->container['formatted_profit'] = $formatted_profit;

        return $this;
    }

    /**
     * Gets incentives
     *
     * @return \Swagger\Client\Model\InlineResponse20038Incentives[]
     */
    public function getIncentives()
    {
        return $this->container['incentives'];
    }

    /**
     * Sets incentives
     *
     * @param \Swagger\Client\Model\InlineResponse20038Incentives[] $incentives list of incentive
     *
     * @return $this
     */
    public function setIncentives($incentives)
    {
        $this->container['incentives'] = $incentives;

        return $this;
    }

    /**
     * Gets exempt_incentives
     *
     * @return \Swagger\Client\Model\InlineResponse20038Incentives[]
     */
    public function getExemptIncentives()
    {
        return $this->container['exempt_incentives'];
    }

    /**
     * Sets exempt_incentives
     *
     * @param \Swagger\Client\Model\InlineResponse20038Incentives[] $exempt_incentives list of incentive
     *
     * @return $this
     */
    public function setExemptIncentives($exempt_incentives)
    {
        $this->container['exempt_incentives'] = $exempt_incentives;

        return $this;
    }

    /**
     * Gets optional_factors
     *
     * @return \Swagger\Client\Model\InlineResponse20038OptionalFactors[]
     */
    public function getOptionalFactors()
    {
        return $this->container['optional_factors'];
    }

    /**
     * Sets optional_factors
     *
     * @param \Swagger\Client\Model\InlineResponse20038OptionalFactors[] $optional_factors list of optional_factor
     *
     * @return $this
     */
    public function setOptionalFactors($optional_factors)
    {
        $this->container['optional_factors'] = $optional_factors;

        return $this;
    }

    /**
     * Gets stat_gov_taxes
     *
     * @return \Swagger\Client\Model\InlineResponse20038StatGovTaxes[]
     */
    public function getStatGovTaxes()
    {
        return $this->container['stat_gov_taxes'];
    }

    /**
     * Sets stat_gov_taxes
     *
     * @param \Swagger\Client\Model\InlineResponse20038StatGovTaxes[] $stat_gov_taxes list of stat_gov_taxes
     *
     * @return $this
     */
    public function setStatGovTaxes($stat_gov_taxes)
    {
        $this->container['stat_gov_taxes'] = $stat_gov_taxes;

        return $this;
    }

    /**
     * Gets annual_paid_holidays
     *
     * @return float
     */
    public function getAnnualPaidHolidays()
    {
        return $this->container['annual_paid_holidays'];
    }

    /**
     * Sets annual_paid_holidays
     *
     * @param float $annual_paid_holidays number of paid holiday
     *
     * @return $this
     */
    public function setAnnualPaidHolidays($annual_paid_holidays)
    {
        $this->container['annual_paid_holidays'] = $annual_paid_holidays;

        return $this;
    }

    /**
     * Gets working_hours_per_day
     *
     * @return float
     */
    public function getWorkingHoursPerDay()
    {
        return $this->container['working_hours_per_day'];
    }

    /**
     * Sets working_hours_per_day
     *
     * @param float $working_hours_per_day number of working hours per day
     *
     * @return $this
     */
    public function setWorkingHoursPerDay($working_hours_per_day)
    {
        $this->container['working_hours_per_day'] = $working_hours_per_day;

        return $this;
    }

    /**
     * Gets working_days_per_month
     *
     * @return float
     */
    public function getWorkingDaysPerMonth()
    {
        return $this->container['working_days_per_month'];
    }

    /**
     * Sets working_days_per_month
     *
     * @param float $working_days_per_month number of working day per month
     *
     * @return $this
     */
    public function setWorkingDaysPerMonth($working_days_per_month)
    {
        $this->container['working_days_per_month'] = $working_days_per_month;

        return $this;
    }

    /**
     * Gets annual_paid_sick_days
     *
     * @return float
     */
    public function getAnnualPaidSickDays()
    {
        return $this->container['annual_paid_sick_days'];
    }

    /**
     * Sets annual_paid_sick_days
     *
     * @param float $annual_paid_sick_days number of paid sick day per yeary
     *
     * @return $this
     */
    public function setAnnualPaidSickDays($annual_paid_sick_days)
    {
        $this->container['annual_paid_sick_days'] = $annual_paid_sick_days;

        return $this;
    }

    /**
     * Gets working_days_per_week
     *
     * @return float
     */
    public function getWorkingDaysPerWeek()
    {
        return $this->container['working_days_per_week'];
    }

    /**
     * Sets working_days_per_week
     *
     * @param float $working_days_per_week number of working day per week
     *
     * @return $this
     */
    public function setWorkingDaysPerWeek($working_days_per_week)
    {
        $this->container['working_days_per_week'] = $working_days_per_week;

        return $this;
    }

    /**
     * Gets working_weeks_per_month
     *
     * @return float
     */
    public function getWorkingWeeksPerMonth()
    {
        return $this->container['working_weeks_per_month'];
    }

    /**
     * Sets working_weeks_per_month
     *
     * @param float $working_weeks_per_month number of working day per month
     *
     * @return $this
     */
    public function setWorkingWeeksPerMonth($working_weeks_per_month)
    {
        $this->container['working_weeks_per_month'] = $working_weeks_per_month;

        return $this;
    }

    /**
     * Gets fee_model_name
     *
     * @return string
     */
    public function getFeeModelName()
    {
        return $this->container['fee_model_name'];
    }

    /**
     * Sets fee_model_name
     *
     * @param string $fee_model_name fee model name only for permanent job
     *
     * @return $this
     */
    public function setFeeModelName($fee_model_name)
    {
        $this->container['fee_model_name'] = $fee_model_name;

        return $this;
    }

    /**
     * Gets fee_model_type
     *
     * @return string
     */
    public function getFeeModelType()
    {
        return $this->container['fee_model_type'];
    }

    /**
     * Sets fee_model_type
     *
     * @param string $fee_model_type fee model type only for permanent job
     *
     * @return $this
     */
    public function setFeeModelType($fee_model_type)
    {
        $allowedValues = $this->getFeeModelTypeAllowableValues();
        if (!is_null($fee_model_type) && !in_array($fee_model_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'fee_model_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fee_model_type'] = $fee_model_type;

        return $this;
    }

    /**
     * Gets fee_model_detail_job_type
     *
     * @return string
     */
    public function getFeeModelDetailJobType()
    {
        return $this->container['fee_model_detail_job_type'];
    }

    /**
     * Sets fee_model_detail_job_type
     *
     * @param string $fee_model_detail_job_type this is same job type
     *
     * @return $this
     */
    public function setFeeModelDetailJobType($fee_model_detail_job_type)
    {
        $allowedValues = $this->getFeeModelDetailJobTypeAllowableValues();
        if (!is_null($fee_model_detail_job_type) && !in_array($fee_model_detail_job_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'fee_model_detail_job_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fee_model_detail_job_type'] = $fee_model_detail_job_type;

        return $this;
    }

    /**
     * Gets fee_model_fee_rate
     *
     * @return float
     */
    public function getFeeModelFeeRate()
    {
        return $this->container['fee_model_fee_rate'];
    }

    /**
     * Sets fee_model_fee_rate
     *
     * @param float $fee_model_fee_rate this is fee rate only on fee model
     *
     * @return $this
     */
    public function setFeeModelFeeRate($fee_model_fee_rate)
    {
        $this->container['fee_model_fee_rate'] = $fee_model_fee_rate;

        return $this;
    }

    /**
     * Gets fee_model_gross_annual_salary
     *
     * @return bool
     */
    public function getFeeModelGrossAnnualSalary()
    {
        return $this->container['fee_model_gross_annual_salary'];
    }

    /**
     * Sets fee_model_gross_annual_salary
     *
     * @param bool $fee_model_gross_annual_salary append gross annual salary on fee model
     *
     * @return $this
     */
    public function setFeeModelGrossAnnualSalary($fee_model_gross_annual_salary)
    {
        $this->container['fee_model_gross_annual_salary'] = $fee_model_gross_annual_salary;

        return $this;
    }

    /**
     * Gets fee_model_incentives_guarantee
     *
     * @return bool
     */
    public function getFeeModelIncentivesGuarantee()
    {
        return $this->container['fee_model_incentives_guarantee'];
    }

    /**
     * Sets fee_model_incentives_guarantee
     *
     * @param bool $fee_model_incentives_guarantee append incentives guarantee on fee model
     *
     * @return $this
     */
    public function setFeeModelIncentivesGuarantee($fee_model_incentives_guarantee)
    {
        $this->container['fee_model_incentives_guarantee'] = $fee_model_incentives_guarantee;

        return $this;
    }

    /**
     * Gets fee_model_exempt_incentives
     *
     * @return bool
     */
    public function getFeeModelExemptIncentives()
    {
        return $this->container['fee_model_exempt_incentives'];
    }

    /**
     * Sets fee_model_exempt_incentives
     *
     * @param bool $fee_model_exempt_incentives append exempt incentives
     *
     * @return $this
     */
    public function setFeeModelExemptIncentives($fee_model_exempt_incentives)
    {
        $this->container['fee_model_exempt_incentives'] = $fee_model_exempt_incentives;

        return $this;
    }

    /**
     * Gets fee_model_stat_gov_taxes
     *
     * @return bool
     */
    public function getFeeModelStatGovTaxes()
    {
        return $this->container['fee_model_stat_gov_taxes'];
    }

    /**
     * Sets fee_model_stat_gov_taxes
     *
     * @param bool $fee_model_stat_gov_taxes append stat gov taxes on fee model
     *
     * @return $this
     */
    public function setFeeModelStatGovTaxes($fee_model_stat_gov_taxes)
    {
        $this->container['fee_model_stat_gov_taxes'] = $fee_model_stat_gov_taxes;

        return $this;
    }

    /**
     * Gets fee_model_optional_factor
     *
     * @return bool
     */
    public function getFeeModelOptionalFactor()
    {
        return $this->container['fee_model_optional_factor'];
    }

    /**
     * Sets fee_model_optional_factor
     *
     * @param bool $fee_model_optional_factor append optional factor on fee model
     *
     * @return $this
     */
    public function setFeeModelOptionalFactor($fee_model_optional_factor)
    {
        $this->container['fee_model_optional_factor'] = $fee_model_optional_factor;

        return $this;
    }

    /**
     * Gets fee_model_comment
     *
     * @return bool
     */
    public function getFeeModelComment()
    {
        return $this->container['fee_model_comment'];
    }

    /**
     * Sets fee_model_comment
     *
     * @param bool $fee_model_comment true if have fee model comment
     *
     * @return $this
     */
    public function setFeeModelComment($fee_model_comment)
    {
        $this->container['fee_model_comment'] = $fee_model_comment;

        return $this;
    }

    /**
     * Gets fee_model_contract_period
     *
     * @return string
     */
    public function getFeeModelContractPeriod()
    {
        return $this->container['fee_model_contract_period'];
    }

    /**
     * Sets fee_model_contract_period
     *
     * @param string $fee_model_contract_period check fixed period or no fixed period
     *
     * @return $this
     */
    public function setFeeModelContractPeriod($fee_model_contract_period)
    {
        $allowedValues = $this->getFeeModelContractPeriodAllowableValues();
        if (!is_null($fee_model_contract_period) && !in_array($fee_model_contract_period, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'fee_model_contract_period', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fee_model_contract_period'] = $fee_model_contract_period;

        return $this;
    }

    /**
     * Gets fee_model_start_date
     *
     * @return string
     */
    public function getFeeModelStartDate()
    {
        return $this->container['fee_model_start_date'];
    }

    /**
     * Sets fee_model_start_date
     *
     * @param string $fee_model_start_date start date fee model. Must be in format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"
     *
     * @return $this
     */
    public function setFeeModelStartDate($fee_model_start_date)
    {
        $this->container['fee_model_start_date'] = $fee_model_start_date;

        return $this;
    }

    /**
     * Gets fee_model_invoice_date
     *
     * @return string
     */
    public function getFeeModelInvoiceDate()
    {
        return $this->container['fee_model_invoice_date'];
    }

    /**
     * Sets fee_model_invoice_date
     *
     * @param string $fee_model_invoice_date date invoice fee model. Must be in format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"
     *
     * @return $this
     */
    public function setFeeModelInvoiceDate($fee_model_invoice_date)
    {
        $this->container['fee_model_invoice_date'] = $fee_model_invoice_date;

        return $this;
    }

    /**
     * Gets fee_model_invoice_payment_term
     *
     * @return float
     */
    public function getFeeModelInvoicePaymentTerm()
    {
        return $this->container['fee_model_invoice_payment_term'];
    }

    /**
     * Sets fee_model_invoice_payment_term
     *
     * @param float $fee_model_invoice_payment_term invoice payment term
     *
     * @return $this
     */
    public function setFeeModelInvoicePaymentTerm($fee_model_invoice_payment_term)
    {
        $this->container['fee_model_invoice_payment_term'] = $fee_model_invoice_payment_term;

        return $this;
    }

    /**
     * Gets fee_model_fixed_fee_currency
     *
     * @return string
     */
    public function getFeeModelFixedFeeCurrency()
    {
        return $this->container['fee_model_fixed_fee_currency'];
    }

    /**
     * Sets fee_model_fixed_fee_currency
     *
     * @param string $fee_model_fixed_fee_currency same currency of job
     *
     * @return $this
     */
    public function setFeeModelFixedFeeCurrency($fee_model_fixed_fee_currency)
    {
        $this->container['fee_model_fixed_fee_currency'] = $fee_model_fixed_fee_currency;

        return $this;
    }

    /**
     * Gets fee_model_fixed_fee_amount
     *
     * @return float
     */
    public function getFeeModelFixedFeeAmount()
    {
        return $this->container['fee_model_fixed_fee_amount'];
    }

    /**
     * Sets fee_model_fixed_fee_amount
     *
     * @param float $fee_model_fixed_fee_amount only on fee model retainer
     *
     * @return $this
     */
    public function setFeeModelFixedFeeAmount($fee_model_fixed_fee_amount)
    {
        $this->container['fee_model_fixed_fee_amount'] = $fee_model_fixed_fee_amount;

        return $this;
    }

    /**
     * Gets formatted_fee_model_fixed_fee_amount
     *
     * @return string
     */
    public function getFormattedFeeModelFixedFeeAmount()
    {
        return $this->container['formatted_fee_model_fixed_fee_amount'];
    }

    /**
     * Sets formatted_fee_model_fixed_fee_amount
     *
     * @param string $formatted_fee_model_fixed_fee_amount only on fee model retainer
     *
     * @return $this
     */
    public function setFormattedFeeModelFixedFeeAmount($formatted_fee_model_fixed_fee_amount)
    {
        $this->container['formatted_fee_model_fixed_fee_amount'] = $formatted_fee_model_fixed_fee_amount;

        return $this;
    }

    /**
     * Gets fee_model_fixed_fee_comment
     *
     * @return string
     */
    public function getFeeModelFixedFeeComment()
    {
        return $this->container['fee_model_fixed_fee_comment'];
    }

    /**
     * Sets fee_model_fixed_fee_comment
     *
     * @param string $fee_model_fixed_fee_comment content of fee model comment
     *
     * @return $this
     */
    public function setFeeModelFixedFeeComment($fee_model_fixed_fee_comment)
    {
        $this->container['fee_model_fixed_fee_comment'] = $fee_model_fixed_fee_comment;

        return $this;
    }

    /**
     * Gets fee_model_retainer_currency
     *
     * @return string
     */
    public function getFeeModelRetainerCurrency()
    {
        return $this->container['fee_model_retainer_currency'];
    }

    /**
     * Sets fee_model_retainer_currency
     *
     * @param string $fee_model_retainer_currency same job currency
     *
     * @return $this
     */
    public function setFeeModelRetainerCurrency($fee_model_retainer_currency)
    {
        $this->container['fee_model_retainer_currency'] = $fee_model_retainer_currency;

        return $this;
    }

    /**
     * Gets fee_model_retainer_comment
     *
     * @return string
     */
    public function getFeeModelRetainerComment()
    {
        return $this->container['fee_model_retainer_comment'];
    }

    /**
     * Sets fee_model_retainer_comment
     *
     * @param string $fee_model_retainer_comment only on fee model retainer
     *
     * @return $this
     */
    public function setFeeModelRetainerComment($fee_model_retainer_comment)
    {
        $this->container['fee_model_retainer_comment'] = $fee_model_retainer_comment;

        return $this;
    }

    /**
     * Gets fee_model_retainer_details
     *
     * @return \Swagger\Client\Model\InlineResponse20038FeeModelRetainerDetails[]
     */
    public function getFeeModelRetainerDetails()
    {
        return $this->container['fee_model_retainer_details'];
    }

    /**
     * Sets fee_model_retainer_details
     *
     * @param \Swagger\Client\Model\InlineResponse20038FeeModelRetainerDetails[] $fee_model_retainer_details list of fee_model_retainer_details
     *
     * @return $this
     */
    public function setFeeModelRetainerDetails($fee_model_retainer_details)
    {
        $this->container['fee_model_retainer_details'] = $fee_model_retainer_details;

        return $this;
    }

    /**
     * Gets fee_model_retainer_total_amount
     *
     * @return float
     */
    public function getFeeModelRetainerTotalAmount()
    {
        return $this->container['fee_model_retainer_total_amount'];
    }

    /**
     * Sets fee_model_retainer_total_amount
     *
     * @param float $fee_model_retainer_total_amount total fee model retainer amount
     *
     * @return $this
     */
    public function setFeeModelRetainerTotalAmount($fee_model_retainer_total_amount)
    {
        $this->container['fee_model_retainer_total_amount'] = $fee_model_retainer_total_amount;

        return $this;
    }

    /**
     * Gets fee_model_no_fee_payable_description
     *
     * @return string
     */
    public function getFeeModelNoFeePayableDescription()
    {
        return $this->container['fee_model_no_fee_payable_description'];
    }

    /**
     * Sets fee_model_no_fee_payable_description
     *
     * @param string $fee_model_no_fee_payable_description this comment content when check no feemodel payable
     *
     * @return $this
     */
    public function setFeeModelNoFeePayableDescription($fee_model_no_fee_payable_description)
    {
        $this->container['fee_model_no_fee_payable_description'] = $fee_model_no_fee_payable_description;

        return $this;
    }

    /**
     * Gets interval_base_pay
     *
     * @return float
     */
    public function getIntervalBasePay()
    {
        return $this->container['interval_base_pay'];
    }

    /**
     * Sets interval_base_pay
     *
     * @param float $interval_base_pay this is number of base pay on Monthy, Daily, Yearly
     *
     * @return $this
     */
    public function setIntervalBasePay($interval_base_pay)
    {
        $this->container['interval_base_pay'] = $interval_base_pay;

        return $this;
    }

    /**
     * Gets formatted_interval_base_pay
     *
     * @return string
     */
    public function getFormattedIntervalBasePay()
    {
        return $this->container['formatted_interval_base_pay'];
    }

    /**
     * Sets formatted_interval_base_pay
     *
     * @param string $formatted_interval_base_pay formatted_interval_base_pay
     *
     * @return $this
     */
    public function setFormattedIntervalBasePay($formatted_interval_base_pay)
    {
        $this->container['formatted_interval_base_pay'] = $formatted_interval_base_pay;

        return $this;
    }

    /**
     * Gets interval_base_charge
     *
     * @return float
     */
    public function getIntervalBaseCharge()
    {
        return $this->container['interval_base_charge'];
    }

    /**
     * Sets interval_base_charge
     *
     * @param float $interval_base_charge this is number of base charge on Monthy, Daily, Yearly
     *
     * @return $this
     */
    public function setIntervalBaseCharge($interval_base_charge)
    {
        $this->container['interval_base_charge'] = $interval_base_charge;

        return $this;
    }

    /**
     * Gets formatted_interval_base_charge
     *
     * @return string
     */
    public function getFormattedIntervalBaseCharge()
    {
        return $this->container['formatted_interval_base_charge'];
    }

    /**
     * Sets formatted_interval_base_charge
     *
     * @param string $formatted_interval_base_charge formatted_interval_base_charge
     *
     * @return $this
     */
    public function setFormattedIntervalBaseCharge($formatted_interval_base_charge)
    {
        $this->container['formatted_interval_base_charge'] = $formatted_interval_base_charge;

        return $this;
    }

    /**
     * Gets interval_base_profit
     *
     * @return float
     */
    public function getIntervalBaseProfit()
    {
        return $this->container['interval_base_profit'];
    }

    /**
     * Sets interval_base_profit
     *
     * @param float $interval_base_profit this is number of base profit on Monthy, Daily, Yearly
     *
     * @return $this
     */
    public function setIntervalBaseProfit($interval_base_profit)
    {
        $this->container['interval_base_profit'] = $interval_base_profit;

        return $this;
    }

    /**
     * Gets formatted_interval_base_profit
     *
     * @return string
     */
    public function getFormattedIntervalBaseProfit()
    {
        return $this->container['formatted_interval_base_profit'];
    }

    /**
     * Sets formatted_interval_base_profit
     *
     * @param string $formatted_interval_base_profit formatted_interval_base_profit
     *
     * @return $this
     */
    public function setFormattedIntervalBaseProfit($formatted_interval_base_profit)
    {
        $this->container['formatted_interval_base_profit'] = $formatted_interval_base_profit;

        return $this;
    }

    /**
     * Gets total_contract_pay
     *
     * @return float
     */
    public function getTotalContractPay()
    {
        return $this->container['total_contract_pay'];
    }

    /**
     * Sets total_contract_pay
     *
     * @param float $total_contract_pay this is number of total contract pay
     *
     * @return $this
     */
    public function setTotalContractPay($total_contract_pay)
    {
        $this->container['total_contract_pay'] = $total_contract_pay;

        return $this;
    }

    /**
     * Gets formatted_total_contract_pay
     *
     * @return string
     */
    public function getFormattedTotalContractPay()
    {
        return $this->container['formatted_total_contract_pay'];
    }

    /**
     * Sets formatted_total_contract_pay
     *
     * @param string $formatted_total_contract_pay formatted_total_contract_pay
     *
     * @return $this
     */
    public function setFormattedTotalContractPay($formatted_total_contract_pay)
    {
        $this->container['formatted_total_contract_pay'] = $formatted_total_contract_pay;

        return $this;
    }

    /**
     * Gets total_contract_charge
     *
     * @return float
     */
    public function getTotalContractCharge()
    {
        return $this->container['total_contract_charge'];
    }

    /**
     * Sets total_contract_charge
     *
     * @param float $total_contract_charge this is number of total contract charge
     *
     * @return $this
     */
    public function setTotalContractCharge($total_contract_charge)
    {
        $this->container['total_contract_charge'] = $total_contract_charge;

        return $this;
    }

    /**
     * Gets formatted_total_contract_charge
     *
     * @return string
     */
    public function getFormattedTotalContractCharge()
    {
        return $this->container['formatted_total_contract_charge'];
    }

    /**
     * Sets formatted_total_contract_charge
     *
     * @param string $formatted_total_contract_charge formatted_total_contract_charge
     *
     * @return $this
     */
    public function setFormattedTotalContractCharge($formatted_total_contract_charge)
    {
        $this->container['formatted_total_contract_charge'] = $formatted_total_contract_charge;

        return $this;
    }

    /**
     * Gets total_contract_profit
     *
     * @return float
     */
    public function getTotalContractProfit()
    {
        return $this->container['total_contract_profit'];
    }

    /**
     * Sets total_contract_profit
     *
     * @param float $total_contract_profit this is number of total contract profit
     *
     * @return $this
     */
    public function setTotalContractProfit($total_contract_profit)
    {
        $this->container['total_contract_profit'] = $total_contract_profit;

        return $this;
    }

    /**
     * Gets formatted_total_contract_profit
     *
     * @return string
     */
    public function getFormattedTotalContractProfit()
    {
        return $this->container['formatted_total_contract_profit'];
    }

    /**
     * Sets formatted_total_contract_profit
     *
     * @param string $formatted_total_contract_profit formatted_total_contract_profit
     *
     * @return $this
     */
    public function setFormattedTotalContractProfit($formatted_total_contract_profit)
    {
        $this->container['formatted_total_contract_profit'] = $formatted_total_contract_profit;

        return $this;
    }

    /**
     * Gets time_management
     *
     * @return string
     */
    public function getTimeManagement()
    {
        return $this->container['time_management'];
    }

    /**
     * Sets time_management
     *
     * @param string $time_management this is get from job with three value
     *
     * @return $this
     */
    public function setTimeManagement($time_management)
    {
        $allowedValues = $this->getTimeManagementAllowableValues();
        if (!is_null($time_management) && !in_array($time_management, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'time_management', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['time_management'] = $time_management;

        return $this;
    }

    /**
     * Gets pay_interval
     *
     * @return string
     */
    public function getPayInterval()
    {
        return $this->container['pay_interval'];
    }

    /**
     * Sets pay_interval
     *
     * @param string $pay_interval this is pay interval, HOURLY, WEEEKLY, MONTHY,...
     *
     * @return $this
     */
    public function setPayInterval($pay_interval)
    {
        $allowedValues = $this->getPayIntervalAllowableValues();
        if (!is_null($pay_interval) && !in_array($pay_interval, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'pay_interval', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pay_interval'] = $pay_interval;

        return $this;
    }

    /**
     * Gets contract_length_type
     *
     * @return string
     */
    public function getContractLengthType()
    {
        return $this->container['contract_length_type'];
    }

    /**
     * Sets contract_length_type
     *
     * @param string $contract_length_type this is length of contract
     *
     * @return $this
     */
    public function setContractLengthType($contract_length_type)
    {
        $allowedValues = $this->getContractLengthTypeAllowableValues();
        if (!is_null($contract_length_type) && !in_array($contract_length_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'contract_length_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['contract_length_type'] = $contract_length_type;

        return $this;
    }

    /**
     * Gets pay_range_from
     *
     * @return float
     */
    public function getPayRangeFrom()
    {
        return $this->container['pay_range_from'];
    }

    /**
     * Sets pay_range_from
     *
     * @param float $pay_range_from minium of pay salary
     *
     * @return $this
     */
    public function setPayRangeFrom($pay_range_from)
    {
        $this->container['pay_range_from'] = $pay_range_from;

        return $this;
    }

    /**
     * Gets pay_range_to
     *
     * @return float
     */
    public function getPayRangeTo()
    {
        return $this->container['pay_range_to'];
    }

    /**
     * Sets pay_range_to
     *
     * @param float $pay_range_to maxium of pay salary
     *
     * @return $this
     */
    public function setPayRangeTo($pay_range_to)
    {
        $this->container['pay_range_to'] = $pay_range_to;

        return $this;
    }

    /**
     * Gets formatted_pay_range_from
     *
     * @return string
     */
    public function getFormattedPayRangeFrom()
    {
        return $this->container['formatted_pay_range_from'];
    }

    /**
     * Sets formatted_pay_range_from
     *
     * @param string $formatted_pay_range_from formatted_pay_range_from
     *
     * @return $this
     */
    public function setFormattedPayRangeFrom($formatted_pay_range_from)
    {
        $this->container['formatted_pay_range_from'] = $formatted_pay_range_from;

        return $this;
    }

    /**
     * Gets formatted_pay_range_to
     *
     * @return string
     */
    public function getFormattedPayRangeTo()
    {
        return $this->container['formatted_pay_range_to'];
    }

    /**
     * Sets formatted_pay_range_to
     *
     * @param string $formatted_pay_range_to formatted_pay_range_to
     *
     * @return $this
     */
    public function setFormattedPayRangeTo($formatted_pay_range_to)
    {
        $this->container['formatted_pay_range_to'] = $formatted_pay_range_to;

        return $this;
    }

    /**
     * Gets base_pay_rate
     *
     * @return float
     */
    public function getBasePayRate()
    {
        return $this->container['base_pay_rate'];
    }

    /**
     * Sets base_pay_rate
     *
     * @param float $base_pay_rate pay rate with not contain tax and allowances
     *
     * @return $this
     */
    public function setBasePayRate($base_pay_rate)
    {
        $this->container['base_pay_rate'] = $base_pay_rate;

        return $this;
    }

    /**
     * Gets formatted_base_pay_rate
     *
     * @return string
     */
    public function getFormattedBasePayRate()
    {
        return $this->container['formatted_base_pay_rate'];
    }

    /**
     * Sets formatted_base_pay_rate
     *
     * @param string $formatted_base_pay_rate formatted_base_pay_rate
     *
     * @return $this
     */
    public function setFormattedBasePayRate($formatted_base_pay_rate)
    {
        $this->container['formatted_base_pay_rate'] = $formatted_base_pay_rate;

        return $this;
    }

    /**
     * Gets on_costs_number
     *
     * @return float
     */
    public function getOnCostsNumber()
    {
        return $this->container['on_costs_number'];
    }

    /**
     * Sets on_costs_number
     *
     * @param float $on_costs_number cost number
     *
     * @return $this
     */
    public function setOnCostsNumber($on_costs_number)
    {
        $this->container['on_costs_number'] = $on_costs_number;

        return $this;
    }

    /**
     * Gets formatted_on_costs_number
     *
     * @return string
     */
    public function getFormattedOnCostsNumber()
    {
        return $this->container['formatted_on_costs_number'];
    }

    /**
     * Sets formatted_on_costs_number
     *
     * @param string $formatted_on_costs_number formatted_on_costs_number
     *
     * @return $this
     */
    public function setFormattedOnCostsNumber($formatted_on_costs_number)
    {
        $this->container['formatted_on_costs_number'] = $formatted_on_costs_number;

        return $this;
    }

    /**
     * Gets on_costs_percentage_in_decimal
     *
     * @return float
     */
    public function getOnCostsPercentageInDecimal()
    {
        return $this->container['on_costs_percentage_in_decimal'];
    }

    /**
     * Sets on_costs_percentage_in_decimal
     *
     * @param float $on_costs_percentage_in_decimal cost number in percentage
     *
     * @return $this
     */
    public function setOnCostsPercentageInDecimal($on_costs_percentage_in_decimal)
    {
        $this->container['on_costs_percentage_in_decimal'] = $on_costs_percentage_in_decimal;

        return $this;
    }

    /**
     * Gets total_pay_rate
     *
     * @return float
     */
    public function getTotalPayRate()
    {
        return $this->container['total_pay_rate'];
    }

    /**
     * Sets total_pay_rate
     *
     * @param float $total_pay_rate pay rate with include tax and allowances
     *
     * @return $this
     */
    public function setTotalPayRate($total_pay_rate)
    {
        $this->container['total_pay_rate'] = $total_pay_rate;

        return $this;
    }

    /**
     * Gets formatted_total_pay_rate
     *
     * @return string
     */
    public function getFormattedTotalPayRate()
    {
        return $this->container['formatted_total_pay_rate'];
    }

    /**
     * Sets formatted_total_pay_rate
     *
     * @param string $formatted_total_pay_rate formatted_total_pay_rate
     *
     * @return $this
     */
    public function setFormattedTotalPayRate($formatted_total_pay_rate)
    {
        $this->container['formatted_total_pay_rate'] = $formatted_total_pay_rate;

        return $this;
    }

    /**
     * Gets margin_percentage_in_decimal
     *
     * @return float
     */
    public function getMarginPercentageInDecimal()
    {
        return $this->container['margin_percentage_in_decimal'];
    }

    /**
     * Sets margin_percentage_in_decimal
     *
     * @param float $margin_percentage_in_decimal profit and margin percentage
     *
     * @return $this
     */
    public function setMarginPercentageInDecimal($margin_percentage_in_decimal)
    {
        $this->container['margin_percentage_in_decimal'] = $margin_percentage_in_decimal;

        return $this;
    }

    /**
     * Gets markup_percentage_in_decimal
     *
     * @return float
     */
    public function getMarkupPercentageInDecimal()
    {
        return $this->container['markup_percentage_in_decimal'];
    }

    /**
     * Sets markup_percentage_in_decimal
     *
     * @param float $markup_percentage_in_decimal profit and margin percentage
     *
     * @return $this
     */
    public function setMarkupPercentageInDecimal($markup_percentage_in_decimal)
    {
        $this->container['markup_percentage_in_decimal'] = $markup_percentage_in_decimal;

        return $this;
    }

    /**
     * Gets profit_margin
     *
     * @return float
     */
    public function getProfitMargin()
    {
        return $this->container['profit_margin'];
    }

    /**
     * Sets profit_margin
     *
     * @param float $profit_margin profit and margin percentage
     *
     * @return $this
     */
    public function setProfitMargin($profit_margin)
    {
        $this->container['profit_margin'] = $profit_margin;

        return $this;
    }

    /**
     * Gets formatted_profit_margin
     *
     * @return string
     */
    public function getFormattedProfitMargin()
    {
        return $this->container['formatted_profit_margin'];
    }

    /**
     * Sets formatted_profit_margin
     *
     * @param string $formatted_profit_margin formatted_profit_margin
     *
     * @return $this
     */
    public function setFormattedProfitMargin($formatted_profit_margin)
    {
        $this->container['formatted_profit_margin'] = $formatted_profit_margin;

        return $this;
    }

    /**
     * Gets charge_rate
     *
     * @return float
     */
    public function getChargeRate()
    {
        return $this->container['charge_rate'];
    }

    /**
     * Sets charge_rate
     *
     * @param float $charge_rate pay rate with include tax and allowances
     *
     * @return $this
     */
    public function setChargeRate($charge_rate)
    {
        $this->container['charge_rate'] = $charge_rate;

        return $this;
    }

    /**
     * Gets formatted_charge_rate
     *
     * @return string
     */
    public function getFormattedChargeRate()
    {
        return $this->container['formatted_charge_rate'];
    }

    /**
     * Sets formatted_charge_rate
     *
     * @param string $formatted_charge_rate formatted_charge_rate
     *
     * @return $this
     */
    public function setFormattedChargeRate($formatted_charge_rate)
    {
        $this->container['formatted_charge_rate'] = $formatted_charge_rate;

        return $this;
    }

    /**
     * Gets total_pay_calculation
     *
     * @return string
     */
    public function getTotalPayCalculation()
    {
        return $this->container['total_pay_calculation'];
    }

    /**
     * Sets total_pay_calculation
     *
     * @param string $total_pay_calculation select pay type
     *
     * @return $this
     */
    public function setTotalPayCalculation($total_pay_calculation)
    {
        $this->container['total_pay_calculation'] = $total_pay_calculation;

        return $this;
    }

    /**
     * Gets calculate_charge_using
     *
     * @return string
     */
    public function getCalculateChargeUsing()
    {
        return $this->container['calculate_charge_using'];
    }

    /**
     * Sets calculate_charge_using
     *
     * @param string $calculate_charge_using select charge type
     *
     * @return $this
     */
    public function setCalculateChargeUsing($calculate_charge_using)
    {
        $this->container['calculate_charge_using'] = $calculate_charge_using;

        return $this;
    }

    /**
     * Gets start_of_week
     *
     * @return string
     */
    public function getStartOfWeek()
    {
        return $this->container['start_of_week'];
    }

    /**
     * Sets start_of_week
     *
     * @param string $start_of_week start day working of week
     *
     * @return $this
     */
    public function setStartOfWeek($start_of_week)
    {
        $this->container['start_of_week'] = $start_of_week;

        return $this;
    }

    /**
     * Gets pay_cycle
     *
     * @return string
     */
    public function getPayCycle()
    {
        return $this->container['pay_cycle'];
    }

    /**
     * Sets pay_cycle
     *
     * @param string $pay_cycle pay period
     *
     * @return $this
     */
    public function setPayCycle($pay_cycle)
    {
        $allowedValues = $this->getPayCycleAllowableValues();
        if (!is_null($pay_cycle) && !in_array($pay_cycle, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'pay_cycle', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pay_cycle'] = $pay_cycle;

        return $this;
    }

    /**
     * Gets astute_pay_cycle_id
     *
     * @return float
     */
    public function getAstutePayCycleId()
    {
        return $this->container['astute_pay_cycle_id'];
    }

    /**
     * Sets astute_pay_cycle_id
     *
     * @param float $astute_pay_cycle_id astute rate only on time managerment Astute Payroll
     *
     * @return $this
     */
    public function setAstutePayCycleId($astute_pay_cycle_id)
    {
        $this->container['astute_pay_cycle_id'] = $astute_pay_cycle_id;

        return $this;
    }

    /**
     * Gets astute_rule_group_id
     *
     * @return float
     */
    public function getAstuteRuleGroupId()
    {
        return $this->container['astute_rule_group_id'];
    }

    /**
     * Sets astute_rule_group_id
     *
     * @param float $astute_rule_group_id astute rule only on time managerment Astute Payroll
     *
     * @return $this
     */
    public function setAstuteRuleGroupId($astute_rule_group_id)
    {
        $this->container['astute_rule_group_id'] = $astute_rule_group_id;

        return $this;
    }

    /**
     * Gets astute_rate_card_id
     *
     * @return float
     */
    public function getAstuteRateCardId()
    {
        return $this->container['astute_rate_card_id'];
    }

    /**
     * Sets astute_rate_card_id
     *
     * @param float $astute_rate_card_id astute rate only on time managerment Astute Payroll
     *
     * @return $this
     */
    public function setAstuteRateCardId($astute_rate_card_id)
    {
        $this->container['astute_rate_card_id'] = $astute_rate_card_id;

        return $this;
    }

    /**
     * Gets first_half_of_month
     *
     * @return float
     */
    public function getFirstHalfOfMonth()
    {
        return $this->container['first_half_of_month'];
    }

    /**
     * Sets first_half_of_month
     *
     * @param float $first_half_of_month Only on Pay cycle Semi-monthy
     *
     * @return $this
     */
    public function setFirstHalfOfMonth($first_half_of_month)
    {
        $this->container['first_half_of_month'] = $first_half_of_month;

        return $this;
    }

    /**
     * Gets second_half_of_month
     *
     * @return float
     */
    public function getSecondHalfOfMonth()
    {
        return $this->container['second_half_of_month'];
    }

    /**
     * Sets second_half_of_month
     *
     * @param float $second_half_of_month Only on Pay cycle Semi-monthy
     *
     * @return $this
     */
    public function setSecondHalfOfMonth($second_half_of_month)
    {
        $this->container['second_half_of_month'] = $second_half_of_month;

        return $this;
    }

    /**
     * Gets pay_and_charge_incl_overtimes
     *
     * @return \Swagger\Client\Model\InlineResponse20038PayAndChargeInclOvertimes[]
     */
    public function getPayAndChargeInclOvertimes()
    {
        return $this->container['pay_and_charge_incl_overtimes'];
    }

    /**
     * Sets pay_and_charge_incl_overtimes
     *
     * @param \Swagger\Client\Model\InlineResponse20038PayAndChargeInclOvertimes[] $pay_and_charge_incl_overtimes list of pay_and_charge_incl_overtimes
     *
     * @return $this
     */
    public function setPayAndChargeInclOvertimes($pay_and_charge_incl_overtimes)
    {
        $this->container['pay_and_charge_incl_overtimes'] = $pay_and_charge_incl_overtimes;

        return $this;
    }

    /**
     * Gets allowances_subject_to_stat_govt_taxes
     *
     * @return \Swagger\Client\Model\InlineResponse20038AllowancesSubjectToStatGovtTaxes[]
     */
    public function getAllowancesSubjectToStatGovtTaxes()
    {
        return $this->container['allowances_subject_to_stat_govt_taxes'];
    }

    /**
     * Sets allowances_subject_to_stat_govt_taxes
     *
     * @param \Swagger\Client\Model\InlineResponse20038AllowancesSubjectToStatGovtTaxes[] $allowances_subject_to_stat_govt_taxes list of allowances_subject_to_stat_govt_taxes
     *
     * @return $this
     */
    public function setAllowancesSubjectToStatGovtTaxes($allowances_subject_to_stat_govt_taxes)
    {
        $this->container['allowances_subject_to_stat_govt_taxes'] = $allowances_subject_to_stat_govt_taxes;

        return $this;
    }

    /**
     * Gets allowances_not_subject_to_stat_govt_taxes
     *
     * @return \Swagger\Client\Model\InlineResponse20038AllowancesNotSubjectToStatGovtTaxes[]
     */
    public function getAllowancesNotSubjectToStatGovtTaxes()
    {
        return $this->container['allowances_not_subject_to_stat_govt_taxes'];
    }

    /**
     * Sets allowances_not_subject_to_stat_govt_taxes
     *
     * @param \Swagger\Client\Model\InlineResponse20038AllowancesNotSubjectToStatGovtTaxes[] $allowances_not_subject_to_stat_govt_taxes list of allowances_not_subject_to_stat_govt_taxes
     *
     * @return $this
     */
    public function setAllowancesNotSubjectToStatGovtTaxes($allowances_not_subject_to_stat_govt_taxes)
    {
        $this->container['allowances_not_subject_to_stat_govt_taxes'] = $allowances_not_subject_to_stat_govt_taxes;

        return $this;
    }

    /**
     * Gets contract_based_optional_factors
     *
     * @return \Swagger\Client\Model\InlineResponse20038ContractBasedOptionalFactors[]
     */
    public function getContractBasedOptionalFactors()
    {
        return $this->container['contract_based_optional_factors'];
    }

    /**
     * Sets contract_based_optional_factors
     *
     * @param \Swagger\Client\Model\InlineResponse20038ContractBasedOptionalFactors[] $contract_based_optional_factors list of contract_based_optional_factors
     *
     * @return $this
     */
    public function setContractBasedOptionalFactors($contract_based_optional_factors)
    {
        $this->container['contract_based_optional_factors'] = $contract_based_optional_factors;

        return $this;
    }

    /**
     * Gets pto_paid_time_off_in_hours
     *
     * @return \Swagger\Client\Model\InlineResponse20038PtoPaidTimeOffInHours[]
     */
    public function getPtoPaidTimeOffInHours()
    {
        return $this->container['pto_paid_time_off_in_hours'];
    }

    /**
     * Sets pto_paid_time_off_in_hours
     *
     * @param \Swagger\Client\Model\InlineResponse20038PtoPaidTimeOffInHours[] $pto_paid_time_off_in_hours list of pto_paid_time_off_in_hours
     *
     * @return $this
     */
    public function setPtoPaidTimeOffInHours($pto_paid_time_off_in_hours)
    {
        $this->container['pto_paid_time_off_in_hours'] = $pto_paid_time_off_in_hours;

        return $this;
    }

    /**
     * Gets timesheets_pay_rules
     *
     * @return \Swagger\Client\Model\InlineResponse20038TimesheetsPayRules[]
     */
    public function getTimesheetsPayRules()
    {
        return $this->container['timesheets_pay_rules'];
    }

    /**
     * Sets timesheets_pay_rules
     *
     * @param \Swagger\Client\Model\InlineResponse20038TimesheetsPayRules[] $timesheets_pay_rules list of timesheets_pay_rules
     *
     * @return $this
     */
    public function setTimesheetsPayRules($timesheets_pay_rules)
    {
        $this->container['timesheets_pay_rules'] = $timesheets_pay_rules;

        return $this;
    }

    /**
     * Gets timesheets_pay_rule_exceptions
     *
     * @return \Swagger\Client\Model\InlineResponse20038TimesheetsPayRules[]
     */
    public function getTimesheetsPayRuleExceptions()
    {
        return $this->container['timesheets_pay_rule_exceptions'];
    }

    /**
     * Sets timesheets_pay_rule_exceptions
     *
     * @param \Swagger\Client\Model\InlineResponse20038TimesheetsPayRules[] $timesheets_pay_rule_exceptions list of timesheets_pay_rules
     *
     * @return $this
     */
    public function setTimesheetsPayRuleExceptions($timesheets_pay_rule_exceptions)
    {
        $this->container['timesheets_pay_rule_exceptions'] = $timesheets_pay_rule_exceptions;

        return $this;
    }

    /**
     * Gets fee_model_invoice_pay_interval
     *
     * @return string
     */
    public function getFeeModelInvoicePayInterval()
    {
        return $this->container['fee_model_invoice_pay_interval'];
    }

    /**
     * Sets fee_model_invoice_pay_interval
     *
     * @param string $fee_model_invoice_pay_interval fee_model_invoice_pay_interval
     *
     * @return $this
     */
    public function setFeeModelInvoicePayInterval($fee_model_invoice_pay_interval)
    {
        $this->container['fee_model_invoice_pay_interval'] = $fee_model_invoice_pay_interval;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
