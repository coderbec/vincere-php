<?php
/**
 * InlineResponse20047Content
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Vincere REST API
 *
 * Last updated date: **2019-12-03**  Change log on **[GitHub](https://github.com/vincere-io/restful-api-support)**
 *
 * OpenAPI spec version: 2-oas3
 * Contact: integration@vincere.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20047Content Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20047Content implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_47_content';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'activity_type' => 'string',
'assignee' => '\Swagger\Client\Model\InlineResponse20041',
'candidate_first_name' => 'string',
'candidate_last_name' => 'string',
'candidate_middle_name' => 'string',
'categories' => '\Swagger\Client\Model\InlineResponse20050[]',
'company_name' => 'string',
'completed' => 'bool',
'contact_first_name' => 'string',
'contact_last_name' => 'string',
'contact_middle_name' => 'string',
'content' => 'string',
'creator' => '\Swagger\Client\Model\InlineResponse20041',
'due_date_start' => 'string',
'due_date_end' => 'string',
'id' => 'int',
'insert_timestamp' => 'string',
'job_title' => 'string',
'main_candidate_id' => 'int',
'main_company_id' => 'int',
'main_contact_id' => 'int',
'main_entity_type' => 'string',
'main_position_id' => 'int',
'subject' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'activity_type' => null,
'assignee' => null,
'candidate_first_name' => null,
'candidate_last_name' => null,
'candidate_middle_name' => null,
'categories' => null,
'company_name' => null,
'completed' => null,
'contact_first_name' => null,
'contact_last_name' => null,
'contact_middle_name' => null,
'content' => null,
'creator' => null,
'due_date_start' => null,
'due_date_end' => null,
'id' => null,
'insert_timestamp' => null,
'job_title' => null,
'main_candidate_id' => null,
'main_company_id' => null,
'main_contact_id' => null,
'main_entity_type' => null,
'main_position_id' => null,
'subject' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activity_type' => 'activity_type',
'assignee' => 'assignee',
'candidate_first_name' => 'candidate_first_name',
'candidate_last_name' => 'candidate_last_name',
'candidate_middle_name' => 'candidate_middle_name',
'categories' => 'categories',
'company_name' => 'company_name',
'completed' => 'completed',
'contact_first_name' => 'contact_first_name',
'contact_last_name' => 'contact_last_name',
'contact_middle_name' => 'contact_middle_name',
'content' => 'content',
'creator' => 'creator',
'due_date_start' => 'due_date_start',
'due_date_end' => 'due_date_end',
'id' => 'id',
'insert_timestamp' => 'insert_timestamp',
'job_title' => 'job_title',
'main_candidate_id' => 'main_candidate_id',
'main_company_id' => 'main_company_id',
'main_contact_id' => 'main_contact_id',
'main_entity_type' => 'main_entity_type',
'main_position_id' => 'main_position_id',
'subject' => 'subject'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activity_type' => 'setActivityType',
'assignee' => 'setAssignee',
'candidate_first_name' => 'setCandidateFirstName',
'candidate_last_name' => 'setCandidateLastName',
'candidate_middle_name' => 'setCandidateMiddleName',
'categories' => 'setCategories',
'company_name' => 'setCompanyName',
'completed' => 'setCompleted',
'contact_first_name' => 'setContactFirstName',
'contact_last_name' => 'setContactLastName',
'contact_middle_name' => 'setContactMiddleName',
'content' => 'setContent',
'creator' => 'setCreator',
'due_date_start' => 'setDueDateStart',
'due_date_end' => 'setDueDateEnd',
'id' => 'setId',
'insert_timestamp' => 'setInsertTimestamp',
'job_title' => 'setJobTitle',
'main_candidate_id' => 'setMainCandidateId',
'main_company_id' => 'setMainCompanyId',
'main_contact_id' => 'setMainContactId',
'main_entity_type' => 'setMainEntityType',
'main_position_id' => 'setMainPositionId',
'subject' => 'setSubject'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activity_type' => 'getActivityType',
'assignee' => 'getAssignee',
'candidate_first_name' => 'getCandidateFirstName',
'candidate_last_name' => 'getCandidateLastName',
'candidate_middle_name' => 'getCandidateMiddleName',
'categories' => 'getCategories',
'company_name' => 'getCompanyName',
'completed' => 'getCompleted',
'contact_first_name' => 'getContactFirstName',
'contact_last_name' => 'getContactLastName',
'contact_middle_name' => 'getContactMiddleName',
'content' => 'getContent',
'creator' => 'getCreator',
'due_date_start' => 'getDueDateStart',
'due_date_end' => 'getDueDateEnd',
'id' => 'getId',
'insert_timestamp' => 'getInsertTimestamp',
'job_title' => 'getJobTitle',
'main_candidate_id' => 'getMainCandidateId',
'main_company_id' => 'getMainCompanyId',
'main_contact_id' => 'getMainContactId',
'main_entity_type' => 'getMainEntityType',
'main_position_id' => 'getMainPositionId',
'subject' => 'getSubject'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACTIVITY_TYPE_COMMENT = 'COMMENT';
const ACTIVITY_TYPE_TASK = 'TASK';
const ACTIVITY_TYPE_MEETING = 'MEETING';
const MAIN_ENTITY_TYPE_CANDIDATE = 'CANDIDATE';
const MAIN_ENTITY_TYPE_COMPANY = 'COMPANY';
const MAIN_ENTITY_TYPE_CONTACT = 'CONTACT';
const MAIN_ENTITY_TYPE_JOB = 'JOB';
const MAIN_ENTITY_TYPE_OTHER_MEETING = 'OTHER_MEETING';
const MAIN_ENTITY_TYPE_PERSONAL = 'PERSONAL';
const MAIN_ENTITY_TYPE_PROJECT = 'PROJECT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActivityTypeAllowableValues()
    {
        return [
            self::ACTIVITY_TYPE_COMMENT,
self::ACTIVITY_TYPE_TASK,
self::ACTIVITY_TYPE_MEETING,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMainEntityTypeAllowableValues()
    {
        return [
            self::MAIN_ENTITY_TYPE_CANDIDATE,
self::MAIN_ENTITY_TYPE_COMPANY,
self::MAIN_ENTITY_TYPE_CONTACT,
self::MAIN_ENTITY_TYPE_JOB,
self::MAIN_ENTITY_TYPE_OTHER_MEETING,
self::MAIN_ENTITY_TYPE_PERSONAL,
self::MAIN_ENTITY_TYPE_PROJECT,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activity_type'] = isset($data['activity_type']) ? $data['activity_type'] : null;
        $this->container['assignee'] = isset($data['assignee']) ? $data['assignee'] : null;
        $this->container['candidate_first_name'] = isset($data['candidate_first_name']) ? $data['candidate_first_name'] : null;
        $this->container['candidate_last_name'] = isset($data['candidate_last_name']) ? $data['candidate_last_name'] : null;
        $this->container['candidate_middle_name'] = isset($data['candidate_middle_name']) ? $data['candidate_middle_name'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['completed'] = isset($data['completed']) ? $data['completed'] : null;
        $this->container['contact_first_name'] = isset($data['contact_first_name']) ? $data['contact_first_name'] : null;
        $this->container['contact_last_name'] = isset($data['contact_last_name']) ? $data['contact_last_name'] : null;
        $this->container['contact_middle_name'] = isset($data['contact_middle_name']) ? $data['contact_middle_name'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['creator'] = isset($data['creator']) ? $data['creator'] : null;
        $this->container['due_date_start'] = isset($data['due_date_start']) ? $data['due_date_start'] : null;
        $this->container['due_date_end'] = isset($data['due_date_end']) ? $data['due_date_end'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['insert_timestamp'] = isset($data['insert_timestamp']) ? $data['insert_timestamp'] : null;
        $this->container['job_title'] = isset($data['job_title']) ? $data['job_title'] : null;
        $this->container['main_candidate_id'] = isset($data['main_candidate_id']) ? $data['main_candidate_id'] : null;
        $this->container['main_company_id'] = isset($data['main_company_id']) ? $data['main_company_id'] : null;
        $this->container['main_contact_id'] = isset($data['main_contact_id']) ? $data['main_contact_id'] : null;
        $this->container['main_entity_type'] = isset($data['main_entity_type']) ? $data['main_entity_type'] : null;
        $this->container['main_position_id'] = isset($data['main_position_id']) ? $data['main_position_id'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getActivityTypeAllowableValues();
        if (!is_null($this->container['activity_type']) && !in_array($this->container['activity_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'activity_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMainEntityTypeAllowableValues();
        if (!is_null($this->container['main_entity_type']) && !in_array($this->container['main_entity_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'main_entity_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets activity_type
     *
     * @return string
     */
    public function getActivityType()
    {
        return $this->container['activity_type'];
    }

    /**
     * Sets activity_type
     *
     * @param string $activity_type this field is used to differentiate if the activity is Comment, Task or Meeting
     *
     * @return $this
     */
    public function setActivityType($activity_type)
    {
        $allowedValues = $this->getActivityTypeAllowableValues();
        if (!is_null($activity_type) && !in_array($activity_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'activity_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['activity_type'] = $activity_type;

        return $this;
    }

    /**
     * Gets assignee
     *
     * @return \Swagger\Client\Model\InlineResponse20041
     */
    public function getAssignee()
    {
        return $this->container['assignee'];
    }

    /**
     * Sets assignee
     *
     * @param \Swagger\Client\Model\InlineResponse20041 $assignee assignee
     *
     * @return $this
     */
    public function setAssignee($assignee)
    {
        $this->container['assignee'] = $assignee;

        return $this;
    }

    /**
     * Gets candidate_first_name
     *
     * @return string
     */
    public function getCandidateFirstName()
    {
        return $this->container['candidate_first_name'];
    }

    /**
     * Sets candidate_first_name
     *
     * @param string $candidate_first_name candidate_first_name
     *
     * @return $this
     */
    public function setCandidateFirstName($candidate_first_name)
    {
        $this->container['candidate_first_name'] = $candidate_first_name;

        return $this;
    }

    /**
     * Gets candidate_last_name
     *
     * @return string
     */
    public function getCandidateLastName()
    {
        return $this->container['candidate_last_name'];
    }

    /**
     * Sets candidate_last_name
     *
     * @param string $candidate_last_name candidate_last_name
     *
     * @return $this
     */
    public function setCandidateLastName($candidate_last_name)
    {
        $this->container['candidate_last_name'] = $candidate_last_name;

        return $this;
    }

    /**
     * Gets candidate_middle_name
     *
     * @return string
     */
    public function getCandidateMiddleName()
    {
        return $this->container['candidate_middle_name'];
    }

    /**
     * Sets candidate_middle_name
     *
     * @param string $candidate_middle_name candidate_middle_name
     *
     * @return $this
     */
    public function setCandidateMiddleName($candidate_middle_name)
    {
        $this->container['candidate_middle_name'] = $candidate_middle_name;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \Swagger\Client\Model\InlineResponse20050[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \Swagger\Client\Model\InlineResponse20050[] $categories categories
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name company_name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return bool
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param bool $completed For task or meeting, the value may be true or false. For comment, the value is null.
     *
     * @return $this
     */
    public function setCompleted($completed)
    {
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets contact_first_name
     *
     * @return string
     */
    public function getContactFirstName()
    {
        return $this->container['contact_first_name'];
    }

    /**
     * Sets contact_first_name
     *
     * @param string $contact_first_name contact_first_name
     *
     * @return $this
     */
    public function setContactFirstName($contact_first_name)
    {
        $this->container['contact_first_name'] = $contact_first_name;

        return $this;
    }

    /**
     * Gets contact_last_name
     *
     * @return string
     */
    public function getContactLastName()
    {
        return $this->container['contact_last_name'];
    }

    /**
     * Sets contact_last_name
     *
     * @param string $contact_last_name contact_last_name
     *
     * @return $this
     */
    public function setContactLastName($contact_last_name)
    {
        $this->container['contact_last_name'] = $contact_last_name;

        return $this;
    }

    /**
     * Gets contact_middle_name
     *
     * @return string
     */
    public function getContactMiddleName()
    {
        return $this->container['contact_middle_name'];
    }

    /**
     * Sets contact_middle_name
     *
     * @param string $contact_middle_name contact_middle_name
     *
     * @return $this
     */
    public function setContactMiddleName($contact_middle_name)
    {
        $this->container['contact_middle_name'] = $contact_middle_name;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content content
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return \Swagger\Client\Model\InlineResponse20041
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param \Swagger\Client\Model\InlineResponse20041 $creator creator
     *
     * @return $this
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets due_date_start
     *
     * @return string
     */
    public function getDueDateStart()
    {
        return $this->container['due_date_start'];
    }

    /**
     * Sets due_date_start
     *
     * @param string $due_date_start the start time for due date
     *
     * @return $this
     */
    public function setDueDateStart($due_date_start)
    {
        $this->container['due_date_start'] = $due_date_start;

        return $this;
    }

    /**
     * Gets due_date_end
     *
     * @return string
     */
    public function getDueDateEnd()
    {
        return $this->container['due_date_end'];
    }

    /**
     * Sets due_date_end
     *
     * @param string $due_date_end the end time for due date
     *
     * @return $this
     */
    public function setDueDateEnd($due_date_end)
    {
        $this->container['due_date_end'] = $due_date_end;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id of the Comment, Task or Meeting.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets insert_timestamp
     *
     * @return string
     */
    public function getInsertTimestamp()
    {
        return $this->container['insert_timestamp'];
    }

    /**
     * Sets insert_timestamp
     *
     * @param string $insert_timestamp Created Date
     *
     * @return $this
     */
    public function setInsertTimestamp($insert_timestamp)
    {
        $this->container['insert_timestamp'] = $insert_timestamp;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string $job_title job_title
     *
     * @return $this
     */
    public function setJobTitle($job_title)
    {
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets main_candidate_id
     *
     * @return int
     */
    public function getMainCandidateId()
    {
        return $this->container['main_candidate_id'];
    }

    /**
     * Sets main_candidate_id
     *
     * @param int $main_candidate_id candidate internal id
     *
     * @return $this
     */
    public function setMainCandidateId($main_candidate_id)
    {
        $this->container['main_candidate_id'] = $main_candidate_id;

        return $this;
    }

    /**
     * Gets main_company_id
     *
     * @return int
     */
    public function getMainCompanyId()
    {
        return $this->container['main_company_id'];
    }

    /**
     * Sets main_company_id
     *
     * @param int $main_company_id company internal id
     *
     * @return $this
     */
    public function setMainCompanyId($main_company_id)
    {
        $this->container['main_company_id'] = $main_company_id;

        return $this;
    }

    /**
     * Gets main_contact_id
     *
     * @return int
     */
    public function getMainContactId()
    {
        return $this->container['main_contact_id'];
    }

    /**
     * Sets main_contact_id
     *
     * @param int $main_contact_id contact internal id
     *
     * @return $this
     */
    public function setMainContactId($main_contact_id)
    {
        $this->container['main_contact_id'] = $main_contact_id;

        return $this;
    }

    /**
     * Gets main_entity_type
     *
     * @return string
     */
    public function getMainEntityType()
    {
        return $this->container['main_entity_type'];
    }

    /**
     * Sets main_entity_type
     *
     * @param string $main_entity_type main_entity_type
     *
     * @return $this
     */
    public function setMainEntityType($main_entity_type)
    {
        $allowedValues = $this->getMainEntityTypeAllowableValues();
        if (!is_null($main_entity_type) && !in_array($main_entity_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'main_entity_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['main_entity_type'] = $main_entity_type;

        return $this;
    }

    /**
     * Gets main_position_id
     *
     * @return int
     */
    public function getMainPositionId()
    {
        return $this->container['main_position_id'];
    }

    /**
     * Sets main_position_id
     *
     * @param int $main_position_id job internal id
     *
     * @return $this
     */
    public function setMainPositionId($main_position_id)
    {
        $this->container['main_position_id'] = $main_position_id;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject subject
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
