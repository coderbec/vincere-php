<?php
/**
 * Body9
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Vincere REST API
 *
 * Last updated date: **2019-12-03**  Change log on **[GitHub](https://github.com/vincere-io/restful-api-support)**
 *
 * OpenAPI spec version: 2-oas3
 * Contact: integration@vincere.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Body9 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Body9 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'body_9';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'affiliations' => 'string',
'availability_start' => 'string',
'candidate_source_id' => 'int',
'company_count' => 'int',
'company_name' => 'string',
'company_number' => 'string',
'contract_interval' => 'string',
'contract_rate' => 'float',
'country_of_domicile' => 'string',
'creator_id' => 'int',
'currency_type' => 'string',
'current_bonus' => 'float',
'current_salary' => 'float',
'date_of_birth' => 'string',
'desired_bonus' => 'float',
'desired_contract_rate' => 'float',
'desired_salary' => 'float',
'desired_salary_monthly' => 'float',
'driving_license_number' => 'string',
'driving_license_type' => 'string',
'education_summary' => 'string',
'email' => 'string',
'employment_type' => 'string',
'experience' => 'string',
'external_id' => 'string',
'emergency_name' => 'string',
'emergency_phone' => 'string',
'emergency_relationship' => 'string',
'emergency_email' => 'string',
'facebook' => 'string',
'first_name' => 'string',
'first_name_kana' => 'string',
'gender' => 'string',
'gender_title' => 'string',
'home_phone' => 'string',
'id' => 'int',
'ielts_score' => 'string',
'keyword' => 'string',
'last_name' => 'string',
'last_name_kana' => 'string',
'linked_contact_id' => 'int',
'linked_in' => 'string',
'marital_status' => 'string',
'met_status' => 'string',
'middle_name' => 'string',
'middle_name_kana' => 'string',
'mobile' => 'string',
'nationality' => 'string',
'nearest_train_station' => 'string',
'note' => 'string',
'note_by' => 'int',
'note_on' => 'string',
'notice_days' => 'int',
'objective' => 'string',
'other_benefits' => 'string',
'payment_type' => 'string',
'payslip_email' => 'string',
'passport_no' => 'string',
'personal_statements' => 'string',
'phone' => 'string',
'place_of_birth' => 'string',
'preferred_language' => 'string',
'present_salary_rate' => 'float',
'publications' => 'string',
'reference' => 'string',
'registration_date' => 'string',
'relocate' => 'bool',
'salary_months_per_year' => 'int',
'salary_type' => 'string',
'skills' => 'string',
'skype' => 'string',
'statements' => 'string',
'summary' => 'string',
'toeic_score' => 'string',
'twitter' => 'string',
'total_gross' => 'float',
'variant' => 'string',
'visa_note' => 'string',
'visa_number' => 'string',
'visa_renewal_date' => 'string',
'visa_status' => 'string',
'visa_type' => 'string',
'website' => 'string',
'work_email' => 'string',
'work_phone' => 'string',
'xing' => 'string',
'linked_in_resume_content' => 'string',
'nickname' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'affiliations' => null,
'availability_start' => null,
'candidate_source_id' => null,
'company_count' => null,
'company_name' => null,
'company_number' => null,
'contract_interval' => null,
'contract_rate' => null,
'country_of_domicile' => null,
'creator_id' => null,
'currency_type' => null,
'current_bonus' => null,
'current_salary' => null,
'date_of_birth' => null,
'desired_bonus' => null,
'desired_contract_rate' => null,
'desired_salary' => null,
'desired_salary_monthly' => null,
'driving_license_number' => null,
'driving_license_type' => null,
'education_summary' => null,
'email' => null,
'employment_type' => null,
'experience' => null,
'external_id' => null,
'emergency_name' => null,
'emergency_phone' => null,
'emergency_relationship' => null,
'emergency_email' => null,
'facebook' => null,
'first_name' => null,
'first_name_kana' => null,
'gender' => null,
'gender_title' => null,
'home_phone' => null,
'id' => null,
'ielts_score' => null,
'keyword' => null,
'last_name' => null,
'last_name_kana' => null,
'linked_contact_id' => null,
'linked_in' => null,
'marital_status' => null,
'met_status' => null,
'middle_name' => null,
'middle_name_kana' => null,
'mobile' => null,
'nationality' => null,
'nearest_train_station' => null,
'note' => null,
'note_by' => null,
'note_on' => null,
'notice_days' => null,
'objective' => null,
'other_benefits' => null,
'payment_type' => null,
'payslip_email' => null,
'passport_no' => null,
'personal_statements' => null,
'phone' => null,
'place_of_birth' => null,
'preferred_language' => null,
'present_salary_rate' => null,
'publications' => null,
'reference' => null,
'registration_date' => null,
'relocate' => null,
'salary_months_per_year' => null,
'salary_type' => null,
'skills' => null,
'skype' => null,
'statements' => null,
'summary' => null,
'toeic_score' => null,
'twitter' => null,
'total_gross' => null,
'variant' => null,
'visa_note' => null,
'visa_number' => null,
'visa_renewal_date' => null,
'visa_status' => null,
'visa_type' => null,
'website' => null,
'work_email' => null,
'work_phone' => null,
'xing' => null,
'linked_in_resume_content' => null,
'nickname' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'affiliations' => 'affiliations',
'availability_start' => 'availability_start',
'candidate_source_id' => 'candidate_source_id',
'company_count' => 'company_count',
'company_name' => 'company_name',
'company_number' => 'company_number',
'contract_interval' => 'contract_interval',
'contract_rate' => 'contract_rate',
'country_of_domicile' => 'country_of_domicile',
'creator_id' => 'creator_id',
'currency_type' => 'currency_type',
'current_bonus' => 'current_bonus',
'current_salary' => 'current_salary',
'date_of_birth' => 'date_of_birth',
'desired_bonus' => 'desired_bonus',
'desired_contract_rate' => 'desired_contract_rate',
'desired_salary' => 'desired_salary',
'desired_salary_monthly' => 'desired_salary_monthly',
'driving_license_number' => 'driving_license_number',
'driving_license_type' => 'driving_license_type',
'education_summary' => 'education_summary',
'email' => 'email',
'employment_type' => 'employment_type',
'experience' => 'experience',
'external_id' => 'external_id',
'emergency_name' => 'emergency_name',
'emergency_phone' => 'emergency_phone',
'emergency_relationship' => 'emergency_relationship',
'emergency_email' => 'emergency_email',
'facebook' => 'facebook',
'first_name' => 'first_name',
'first_name_kana' => 'first_name_kana',
'gender' => 'gender',
'gender_title' => 'gender_title',
'home_phone' => 'home_phone',
'id' => 'id',
'ielts_score' => 'ielts_score',
'keyword' => 'keyword',
'last_name' => 'last_name',
'last_name_kana' => 'last_name_kana',
'linked_contact_id' => 'linked_contact_id',
'linked_in' => 'linked_in',
'marital_status' => 'marital_status',
'met_status' => 'met_status',
'middle_name' => 'middle_name',
'middle_name_kana' => 'middle_name_kana',
'mobile' => 'mobile',
'nationality' => 'nationality',
'nearest_train_station' => 'nearest_train_station',
'note' => 'note',
'note_by' => 'note_by',
'note_on' => 'note_on',
'notice_days' => 'notice_days',
'objective' => 'objective',
'other_benefits' => 'other_benefits',
'payment_type' => 'payment_type',
'payslip_email' => 'payslip_email',
'passport_no' => 'passport_no',
'personal_statements' => 'personal_statements',
'phone' => 'phone',
'place_of_birth' => 'place_of_birth',
'preferred_language' => 'preferred_language',
'present_salary_rate' => 'present_salary_rate',
'publications' => 'publications',
'reference' => 'reference',
'registration_date' => 'registration_date',
'relocate' => 'relocate',
'salary_months_per_year' => 'salary_months_per_year',
'salary_type' => 'salary_type',
'skills' => 'skills',
'skype' => 'skype',
'statements' => 'statements',
'summary' => 'summary',
'toeic_score' => 'toeic_score',
'twitter' => 'twitter',
'total_gross' => 'total_gross',
'variant' => 'variant',
'visa_note' => 'visa_note',
'visa_number' => 'visa_number',
'visa_renewal_date' => 'visa_renewal_date',
'visa_status' => 'visa_status',
'visa_type' => 'visa_type',
'website' => 'website',
'work_email' => 'work_email',
'work_phone' => 'work_phone',
'xing' => 'xing',
'linked_in_resume_content' => 'linked_in_resume_content',
'nickname' => 'nickname'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'affiliations' => 'setAffiliations',
'availability_start' => 'setAvailabilityStart',
'candidate_source_id' => 'setCandidateSourceId',
'company_count' => 'setCompanyCount',
'company_name' => 'setCompanyName',
'company_number' => 'setCompanyNumber',
'contract_interval' => 'setContractInterval',
'contract_rate' => 'setContractRate',
'country_of_domicile' => 'setCountryOfDomicile',
'creator_id' => 'setCreatorId',
'currency_type' => 'setCurrencyType',
'current_bonus' => 'setCurrentBonus',
'current_salary' => 'setCurrentSalary',
'date_of_birth' => 'setDateOfBirth',
'desired_bonus' => 'setDesiredBonus',
'desired_contract_rate' => 'setDesiredContractRate',
'desired_salary' => 'setDesiredSalary',
'desired_salary_monthly' => 'setDesiredSalaryMonthly',
'driving_license_number' => 'setDrivingLicenseNumber',
'driving_license_type' => 'setDrivingLicenseType',
'education_summary' => 'setEducationSummary',
'email' => 'setEmail',
'employment_type' => 'setEmploymentType',
'experience' => 'setExperience',
'external_id' => 'setExternalId',
'emergency_name' => 'setEmergencyName',
'emergency_phone' => 'setEmergencyPhone',
'emergency_relationship' => 'setEmergencyRelationship',
'emergency_email' => 'setEmergencyEmail',
'facebook' => 'setFacebook',
'first_name' => 'setFirstName',
'first_name_kana' => 'setFirstNameKana',
'gender' => 'setGender',
'gender_title' => 'setGenderTitle',
'home_phone' => 'setHomePhone',
'id' => 'setId',
'ielts_score' => 'setIeltsScore',
'keyword' => 'setKeyword',
'last_name' => 'setLastName',
'last_name_kana' => 'setLastNameKana',
'linked_contact_id' => 'setLinkedContactId',
'linked_in' => 'setLinkedIn',
'marital_status' => 'setMaritalStatus',
'met_status' => 'setMetStatus',
'middle_name' => 'setMiddleName',
'middle_name_kana' => 'setMiddleNameKana',
'mobile' => 'setMobile',
'nationality' => 'setNationality',
'nearest_train_station' => 'setNearestTrainStation',
'note' => 'setNote',
'note_by' => 'setNoteBy',
'note_on' => 'setNoteOn',
'notice_days' => 'setNoticeDays',
'objective' => 'setObjective',
'other_benefits' => 'setOtherBenefits',
'payment_type' => 'setPaymentType',
'payslip_email' => 'setPayslipEmail',
'passport_no' => 'setPassportNo',
'personal_statements' => 'setPersonalStatements',
'phone' => 'setPhone',
'place_of_birth' => 'setPlaceOfBirth',
'preferred_language' => 'setPreferredLanguage',
'present_salary_rate' => 'setPresentSalaryRate',
'publications' => 'setPublications',
'reference' => 'setReference',
'registration_date' => 'setRegistrationDate',
'relocate' => 'setRelocate',
'salary_months_per_year' => 'setSalaryMonthsPerYear',
'salary_type' => 'setSalaryType',
'skills' => 'setSkills',
'skype' => 'setSkype',
'statements' => 'setStatements',
'summary' => 'setSummary',
'toeic_score' => 'setToeicScore',
'twitter' => 'setTwitter',
'total_gross' => 'setTotalGross',
'variant' => 'setVariant',
'visa_note' => 'setVisaNote',
'visa_number' => 'setVisaNumber',
'visa_renewal_date' => 'setVisaRenewalDate',
'visa_status' => 'setVisaStatus',
'visa_type' => 'setVisaType',
'website' => 'setWebsite',
'work_email' => 'setWorkEmail',
'work_phone' => 'setWorkPhone',
'xing' => 'setXing',
'linked_in_resume_content' => 'setLinkedInResumeContent',
'nickname' => 'setNickname'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'affiliations' => 'getAffiliations',
'availability_start' => 'getAvailabilityStart',
'candidate_source_id' => 'getCandidateSourceId',
'company_count' => 'getCompanyCount',
'company_name' => 'getCompanyName',
'company_number' => 'getCompanyNumber',
'contract_interval' => 'getContractInterval',
'contract_rate' => 'getContractRate',
'country_of_domicile' => 'getCountryOfDomicile',
'creator_id' => 'getCreatorId',
'currency_type' => 'getCurrencyType',
'current_bonus' => 'getCurrentBonus',
'current_salary' => 'getCurrentSalary',
'date_of_birth' => 'getDateOfBirth',
'desired_bonus' => 'getDesiredBonus',
'desired_contract_rate' => 'getDesiredContractRate',
'desired_salary' => 'getDesiredSalary',
'desired_salary_monthly' => 'getDesiredSalaryMonthly',
'driving_license_number' => 'getDrivingLicenseNumber',
'driving_license_type' => 'getDrivingLicenseType',
'education_summary' => 'getEducationSummary',
'email' => 'getEmail',
'employment_type' => 'getEmploymentType',
'experience' => 'getExperience',
'external_id' => 'getExternalId',
'emergency_name' => 'getEmergencyName',
'emergency_phone' => 'getEmergencyPhone',
'emergency_relationship' => 'getEmergencyRelationship',
'emergency_email' => 'getEmergencyEmail',
'facebook' => 'getFacebook',
'first_name' => 'getFirstName',
'first_name_kana' => 'getFirstNameKana',
'gender' => 'getGender',
'gender_title' => 'getGenderTitle',
'home_phone' => 'getHomePhone',
'id' => 'getId',
'ielts_score' => 'getIeltsScore',
'keyword' => 'getKeyword',
'last_name' => 'getLastName',
'last_name_kana' => 'getLastNameKana',
'linked_contact_id' => 'getLinkedContactId',
'linked_in' => 'getLinkedIn',
'marital_status' => 'getMaritalStatus',
'met_status' => 'getMetStatus',
'middle_name' => 'getMiddleName',
'middle_name_kana' => 'getMiddleNameKana',
'mobile' => 'getMobile',
'nationality' => 'getNationality',
'nearest_train_station' => 'getNearestTrainStation',
'note' => 'getNote',
'note_by' => 'getNoteBy',
'note_on' => 'getNoteOn',
'notice_days' => 'getNoticeDays',
'objective' => 'getObjective',
'other_benefits' => 'getOtherBenefits',
'payment_type' => 'getPaymentType',
'payslip_email' => 'getPayslipEmail',
'passport_no' => 'getPassportNo',
'personal_statements' => 'getPersonalStatements',
'phone' => 'getPhone',
'place_of_birth' => 'getPlaceOfBirth',
'preferred_language' => 'getPreferredLanguage',
'present_salary_rate' => 'getPresentSalaryRate',
'publications' => 'getPublications',
'reference' => 'getReference',
'registration_date' => 'getRegistrationDate',
'relocate' => 'getRelocate',
'salary_months_per_year' => 'getSalaryMonthsPerYear',
'salary_type' => 'getSalaryType',
'skills' => 'getSkills',
'skype' => 'getSkype',
'statements' => 'getStatements',
'summary' => 'getSummary',
'toeic_score' => 'getToeicScore',
'twitter' => 'getTwitter',
'total_gross' => 'getTotalGross',
'variant' => 'getVariant',
'visa_note' => 'getVisaNote',
'visa_number' => 'getVisaNumber',
'visa_renewal_date' => 'getVisaRenewalDate',
'visa_status' => 'getVisaStatus',
'visa_type' => 'getVisaType',
'website' => 'getWebsite',
'work_email' => 'getWorkEmail',
'work_phone' => 'getWorkPhone',
'xing' => 'getXing',
'linked_in_resume_content' => 'getLinkedInResumeContent',
'nickname' => 'getNickname'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CONTRACT_INTERVAL_HOURLY = 'HOURLY';
const CONTRACT_INTERVAL_DAYLY = 'DAYLY';
const CONTRACT_INTERVAL_WEEKLY = 'WEEKLY';
const CONTRACT_INTERVAL_MONTHLY = 'MONTHLY';
const CONTRACT_INTERVAL_YEARLY = 'YEARLY';
const EMPLOYMENT_TYPE_FULL_TIME = 'FULL_TIME';
const EMPLOYMENT_TYPE_PART_TIME = 'PART_TIME';
const EMPLOYMENT_TYPE_CASUAL = 'CASUAL';
const EMPLOYMENT_TYPE_LABOUR_HIRE = 'LABOUR_HIRE';
const GENDER_MALE = 'MALE';
const GENDER_FEMALE = 'FEMALE';
const GENDER_NO_VALUE = 'NO_VALUE';
const PAYMENT_TYPE_PAYG = 'PAYG';
const PAYMENT_TYPE_PAYE = 'PAYE';
const PAYMENT_TYPE_LTD_CO = 'LTD_CO';
const SALARY_TYPE_ANNUAL = 'ANNUAL';
const SALARY_TYPE_MONTHLY = 'MONTHLY';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContractIntervalAllowableValues()
    {
        return [
            self::CONTRACT_INTERVAL_HOURLY,
self::CONTRACT_INTERVAL_DAYLY,
self::CONTRACT_INTERVAL_WEEKLY,
self::CONTRACT_INTERVAL_MONTHLY,
self::CONTRACT_INTERVAL_YEARLY,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEmploymentTypeAllowableValues()
    {
        return [
            self::EMPLOYMENT_TYPE_FULL_TIME,
self::EMPLOYMENT_TYPE_PART_TIME,
self::EMPLOYMENT_TYPE_CASUAL,
self::EMPLOYMENT_TYPE_LABOUR_HIRE,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_MALE,
self::GENDER_FEMALE,
self::GENDER_NO_VALUE,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentTypeAllowableValues()
    {
        return [
            self::PAYMENT_TYPE_PAYG,
self::PAYMENT_TYPE_PAYE,
self::PAYMENT_TYPE_LTD_CO,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSalaryTypeAllowableValues()
    {
        return [
            self::SALARY_TYPE_ANNUAL,
self::SALARY_TYPE_MONTHLY,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['affiliations'] = isset($data['affiliations']) ? $data['affiliations'] : null;
        $this->container['availability_start'] = isset($data['availability_start']) ? $data['availability_start'] : null;
        $this->container['candidate_source_id'] = isset($data['candidate_source_id']) ? $data['candidate_source_id'] : null;
        $this->container['company_count'] = isset($data['company_count']) ? $data['company_count'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['company_number'] = isset($data['company_number']) ? $data['company_number'] : null;
        $this->container['contract_interval'] = isset($data['contract_interval']) ? $data['contract_interval'] : null;
        $this->container['contract_rate'] = isset($data['contract_rate']) ? $data['contract_rate'] : null;
        $this->container['country_of_domicile'] = isset($data['country_of_domicile']) ? $data['country_of_domicile'] : null;
        $this->container['creator_id'] = isset($data['creator_id']) ? $data['creator_id'] : null;
        $this->container['currency_type'] = isset($data['currency_type']) ? $data['currency_type'] : null;
        $this->container['current_bonus'] = isset($data['current_bonus']) ? $data['current_bonus'] : null;
        $this->container['current_salary'] = isset($data['current_salary']) ? $data['current_salary'] : null;
        $this->container['date_of_birth'] = isset($data['date_of_birth']) ? $data['date_of_birth'] : null;
        $this->container['desired_bonus'] = isset($data['desired_bonus']) ? $data['desired_bonus'] : null;
        $this->container['desired_contract_rate'] = isset($data['desired_contract_rate']) ? $data['desired_contract_rate'] : null;
        $this->container['desired_salary'] = isset($data['desired_salary']) ? $data['desired_salary'] : null;
        $this->container['desired_salary_monthly'] = isset($data['desired_salary_monthly']) ? $data['desired_salary_monthly'] : null;
        $this->container['driving_license_number'] = isset($data['driving_license_number']) ? $data['driving_license_number'] : null;
        $this->container['driving_license_type'] = isset($data['driving_license_type']) ? $data['driving_license_type'] : null;
        $this->container['education_summary'] = isset($data['education_summary']) ? $data['education_summary'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['employment_type'] = isset($data['employment_type']) ? $data['employment_type'] : null;
        $this->container['experience'] = isset($data['experience']) ? $data['experience'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['emergency_name'] = isset($data['emergency_name']) ? $data['emergency_name'] : null;
        $this->container['emergency_phone'] = isset($data['emergency_phone']) ? $data['emergency_phone'] : null;
        $this->container['emergency_relationship'] = isset($data['emergency_relationship']) ? $data['emergency_relationship'] : null;
        $this->container['emergency_email'] = isset($data['emergency_email']) ? $data['emergency_email'] : null;
        $this->container['facebook'] = isset($data['facebook']) ? $data['facebook'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['first_name_kana'] = isset($data['first_name_kana']) ? $data['first_name_kana'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['gender_title'] = isset($data['gender_title']) ? $data['gender_title'] : null;
        $this->container['home_phone'] = isset($data['home_phone']) ? $data['home_phone'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['ielts_score'] = isset($data['ielts_score']) ? $data['ielts_score'] : null;
        $this->container['keyword'] = isset($data['keyword']) ? $data['keyword'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['last_name_kana'] = isset($data['last_name_kana']) ? $data['last_name_kana'] : null;
        $this->container['linked_contact_id'] = isset($data['linked_contact_id']) ? $data['linked_contact_id'] : null;
        $this->container['linked_in'] = isset($data['linked_in']) ? $data['linked_in'] : null;
        $this->container['marital_status'] = isset($data['marital_status']) ? $data['marital_status'] : null;
        $this->container['met_status'] = isset($data['met_status']) ? $data['met_status'] : null;
        $this->container['middle_name'] = isset($data['middle_name']) ? $data['middle_name'] : null;
        $this->container['middle_name_kana'] = isset($data['middle_name_kana']) ? $data['middle_name_kana'] : null;
        $this->container['mobile'] = isset($data['mobile']) ? $data['mobile'] : null;
        $this->container['nationality'] = isset($data['nationality']) ? $data['nationality'] : null;
        $this->container['nearest_train_station'] = isset($data['nearest_train_station']) ? $data['nearest_train_station'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['note_by'] = isset($data['note_by']) ? $data['note_by'] : null;
        $this->container['note_on'] = isset($data['note_on']) ? $data['note_on'] : null;
        $this->container['notice_days'] = isset($data['notice_days']) ? $data['notice_days'] : null;
        $this->container['objective'] = isset($data['objective']) ? $data['objective'] : null;
        $this->container['other_benefits'] = isset($data['other_benefits']) ? $data['other_benefits'] : null;
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['payslip_email'] = isset($data['payslip_email']) ? $data['payslip_email'] : null;
        $this->container['passport_no'] = isset($data['passport_no']) ? $data['passport_no'] : null;
        $this->container['personal_statements'] = isset($data['personal_statements']) ? $data['personal_statements'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['place_of_birth'] = isset($data['place_of_birth']) ? $data['place_of_birth'] : null;
        $this->container['preferred_language'] = isset($data['preferred_language']) ? $data['preferred_language'] : null;
        $this->container['present_salary_rate'] = isset($data['present_salary_rate']) ? $data['present_salary_rate'] : null;
        $this->container['publications'] = isset($data['publications']) ? $data['publications'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['registration_date'] = isset($data['registration_date']) ? $data['registration_date'] : null;
        $this->container['relocate'] = isset($data['relocate']) ? $data['relocate'] : null;
        $this->container['salary_months_per_year'] = isset($data['salary_months_per_year']) ? $data['salary_months_per_year'] : null;
        $this->container['salary_type'] = isset($data['salary_type']) ? $data['salary_type'] : null;
        $this->container['skills'] = isset($data['skills']) ? $data['skills'] : null;
        $this->container['skype'] = isset($data['skype']) ? $data['skype'] : null;
        $this->container['statements'] = isset($data['statements']) ? $data['statements'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['toeic_score'] = isset($data['toeic_score']) ? $data['toeic_score'] : null;
        $this->container['twitter'] = isset($data['twitter']) ? $data['twitter'] : null;
        $this->container['total_gross'] = isset($data['total_gross']) ? $data['total_gross'] : null;
        $this->container['variant'] = isset($data['variant']) ? $data['variant'] : null;
        $this->container['visa_note'] = isset($data['visa_note']) ? $data['visa_note'] : null;
        $this->container['visa_number'] = isset($data['visa_number']) ? $data['visa_number'] : null;
        $this->container['visa_renewal_date'] = isset($data['visa_renewal_date']) ? $data['visa_renewal_date'] : null;
        $this->container['visa_status'] = isset($data['visa_status']) ? $data['visa_status'] : null;
        $this->container['visa_type'] = isset($data['visa_type']) ? $data['visa_type'] : null;
        $this->container['website'] = isset($data['website']) ? $data['website'] : null;
        $this->container['work_email'] = isset($data['work_email']) ? $data['work_email'] : null;
        $this->container['work_phone'] = isset($data['work_phone']) ? $data['work_phone'] : null;
        $this->container['xing'] = isset($data['xing']) ? $data['xing'] : null;
        $this->container['linked_in_resume_content'] = isset($data['linked_in_resume_content']) ? $data['linked_in_resume_content'] : null;
        $this->container['nickname'] = isset($data['nickname']) ? $data['nickname'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['candidate_source_id'] === null) {
            $invalidProperties[] = "'candidate_source_id' can't be null";
        }
        $allowedValues = $this->getContractIntervalAllowableValues();
        if (!is_null($this->container['contract_interval']) && !in_array($this->container['contract_interval'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'contract_interval', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        $allowedValues = $this->getEmploymentTypeAllowableValues();
        if (!is_null($this->container['employment_type']) && !in_array($this->container['employment_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'employment_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'gender', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!is_null($this->container['payment_type']) && !in_array($this->container['payment_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['registration_date'] === null) {
            $invalidProperties[] = "'registration_date' can't be null";
        }
        $allowedValues = $this->getSalaryTypeAllowableValues();
        if (!is_null($this->container['salary_type']) && !in_array($this->container['salary_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'salary_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets affiliations
     *
     * @return string
     */
    public function getAffiliations()
    {
        return $this->container['affiliations'];
    }

    /**
     * Sets affiliations
     *
     * @param string $affiliations Affiliations
     *
     * @return $this
     */
    public function setAffiliations($affiliations)
    {
        $this->container['affiliations'] = $affiliations;

        return $this;
    }

    /**
     * Gets availability_start
     *
     * @return string
     */
    public function getAvailabilityStart()
    {
        return $this->container['availability_start'];
    }

    /**
     * Sets availability_start
     *
     * @param string $availability_start Must be in format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"
     *
     * @return $this
     */
    public function setAvailabilityStart($availability_start)
    {
        $this->container['availability_start'] = $availability_start;

        return $this;
    }

    /**
     * Gets candidate_source_id
     *
     * @return int
     */
    public function getCandidateSourceId()
    {
        return $this->container['candidate_source_id'];
    }

    /**
     * Sets candidate_source_id
     *
     * @param int $candidate_source_id internal id of candidate source in Vincere. Please refer to the reference section for candidate source.
     *
     * @return $this
     */
    public function setCandidateSourceId($candidate_source_id)
    {
        $this->container['candidate_source_id'] = $candidate_source_id;

        return $this;
    }

    /**
     * Gets company_count
     *
     * @return int
     */
    public function getCompanyCount()
    {
        return $this->container['company_count'];
    }

    /**
     * Sets company_count
     *
     * @param int $company_count the number of previous employers
     *
     * @return $this
     */
    public function setCompanyCount($company_count)
    {
        $this->container['company_count'] = $company_count;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name Company Name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets company_number
     *
     * @return string
     */
    public function getCompanyNumber()
    {
        return $this->container['company_number'];
    }

    /**
     * Sets company_number
     *
     * @param string $company_number company_number
     *
     * @return $this
     */
    public function setCompanyNumber($company_number)
    {
        $this->container['company_number'] = $company_number;

        return $this;
    }

    /**
     * Gets contract_interval
     *
     * @return string
     */
    public function getContractInterval()
    {
        return $this->container['contract_interval'];
    }

    /**
     * Sets contract_interval
     *
     * @param string $contract_interval Contract Interval.
     *
     * @return $this
     */
    public function setContractInterval($contract_interval)
    {
        $allowedValues = $this->getContractIntervalAllowableValues();
        if (!is_null($contract_interval) && !in_array($contract_interval, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'contract_interval', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['contract_interval'] = $contract_interval;

        return $this;
    }

    /**
     * Gets contract_rate
     *
     * @return float
     */
    public function getContractRate()
    {
        return $this->container['contract_rate'];
    }

    /**
     * Sets contract_rate
     *
     * @param float $contract_rate pay rate
     *
     * @return $this
     */
    public function setContractRate($contract_rate)
    {
        $this->container['contract_rate'] = $contract_rate;

        return $this;
    }

    /**
     * Gets country_of_domicile
     *
     * @return string
     */
    public function getCountryOfDomicile()
    {
        return $this->container['country_of_domicile'];
    }

    /**
     * Sets country_of_domicile
     *
     * @param string $country_of_domicile please refer to reference section of countries
     *
     * @return $this
     */
    public function setCountryOfDomicile($country_of_domicile)
    {
        $this->container['country_of_domicile'] = $country_of_domicile;

        return $this;
    }

    /**
     * Gets creator_id
     *
     * @return int
     */
    public function getCreatorId()
    {
        return $this->container['creator_id'];
    }

    /**
     * Sets creator_id
     *
     * @param int $creator_id internal id of an user in Vincere
     *
     * @return $this
     */
    public function setCreatorId($creator_id)
    {
        $this->container['creator_id'] = $creator_id;

        return $this;
    }

    /**
     * Gets currency_type
     *
     * @return string
     */
    public function getCurrencyType()
    {
        return $this->container['currency_type'];
    }

    /**
     * Sets currency_type
     *
     * @param string $currency_type Currency. Please refer to reference list for the currency values.
     *
     * @return $this
     */
    public function setCurrencyType($currency_type)
    {
        $this->container['currency_type'] = $currency_type;

        return $this;
    }

    /**
     * Gets current_bonus
     *
     * @return float
     */
    public function getCurrentBonus()
    {
        return $this->container['current_bonus'];
    }

    /**
     * Sets current_bonus
     *
     * @param float $current_bonus amount of money
     *
     * @return $this
     */
    public function setCurrentBonus($current_bonus)
    {
        $this->container['current_bonus'] = $current_bonus;

        return $this;
    }

    /**
     * Gets current_salary
     *
     * @return float
     */
    public function getCurrentSalary()
    {
        return $this->container['current_salary'];
    }

    /**
     * Sets current_salary
     *
     * @param float $current_salary amount of money
     *
     * @return $this
     */
    public function setCurrentSalary($current_salary)
    {
        $this->container['current_salary'] = $current_salary;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return string
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param string $date_of_birth Date of Birth. Must be in format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"
     *
     * @return $this
     */
    public function setDateOfBirth($date_of_birth)
    {
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets desired_bonus
     *
     * @return float
     */
    public function getDesiredBonus()
    {
        return $this->container['desired_bonus'];
    }

    /**
     * Sets desired_bonus
     *
     * @param float $desired_bonus amount of money
     *
     * @return $this
     */
    public function setDesiredBonus($desired_bonus)
    {
        $this->container['desired_bonus'] = $desired_bonus;

        return $this;
    }

    /**
     * Gets desired_contract_rate
     *
     * @return float
     */
    public function getDesiredContractRate()
    {
        return $this->container['desired_contract_rate'];
    }

    /**
     * Sets desired_contract_rate
     *
     * @param float $desired_contract_rate pay rate
     *
     * @return $this
     */
    public function setDesiredContractRate($desired_contract_rate)
    {
        $this->container['desired_contract_rate'] = $desired_contract_rate;

        return $this;
    }

    /**
     * Gets desired_salary
     *
     * @return float
     */
    public function getDesiredSalary()
    {
        return $this->container['desired_salary'];
    }

    /**
     * Sets desired_salary
     *
     * @param float $desired_salary amount of money
     *
     * @return $this
     */
    public function setDesiredSalary($desired_salary)
    {
        $this->container['desired_salary'] = $desired_salary;

        return $this;
    }

    /**
     * Gets desired_salary_monthly
     *
     * @return float
     */
    public function getDesiredSalaryMonthly()
    {
        return $this->container['desired_salary_monthly'];
    }

    /**
     * Sets desired_salary_monthly
     *
     * @param float $desired_salary_monthly amount of money
     *
     * @return $this
     */
    public function setDesiredSalaryMonthly($desired_salary_monthly)
    {
        $this->container['desired_salary_monthly'] = $desired_salary_monthly;

        return $this;
    }

    /**
     * Gets driving_license_number
     *
     * @return string
     */
    public function getDrivingLicenseNumber()
    {
        return $this->container['driving_license_number'];
    }

    /**
     * Sets driving_license_number
     *
     * @param string $driving_license_number Driving License Number
     *
     * @return $this
     */
    public function setDrivingLicenseNumber($driving_license_number)
    {
        $this->container['driving_license_number'] = $driving_license_number;

        return $this;
    }

    /**
     * Gets driving_license_type
     *
     * @return string
     */
    public function getDrivingLicenseType()
    {
        return $this->container['driving_license_type'];
    }

    /**
     * Sets driving_license_type
     *
     * @param string $driving_license_type Driving License Type
     *
     * @return $this
     */
    public function setDrivingLicenseType($driving_license_type)
    {
        $this->container['driving_license_type'] = $driving_license_type;

        return $this;
    }

    /**
     * Gets education_summary
     *
     * @return string
     */
    public function getEducationSummary()
    {
        return $this->container['education_summary'];
    }

    /**
     * Sets education_summary
     *
     * @param string $education_summary Education Summary
     *
     * @return $this
     */
    public function setEducationSummary($education_summary)
    {
        $this->container['education_summary'] = $education_summary;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Primary Email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets employment_type
     *
     * @return string
     */
    public function getEmploymentType()
    {
        return $this->container['employment_type'];
    }

    /**
     * Sets employment_type
     *
     * @param string $employment_type employment type.
     *
     * @return $this
     */
    public function setEmploymentType($employment_type)
    {
        $allowedValues = $this->getEmploymentTypeAllowableValues();
        if (!is_null($employment_type) && !in_array($employment_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'employment_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['employment_type'] = $employment_type;

        return $this;
    }

    /**
     * Gets experience
     *
     * @return string
     */
    public function getExperience()
    {
        return $this->container['experience'];
    }

    /**
     * Sets experience
     *
     * @param string $experience Experience
     *
     * @return $this
     */
    public function setExperience($experience)
    {
        $this->container['experience'] = $experience;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id external Reference id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets emergency_name
     *
     * @return string
     */
    public function getEmergencyName()
    {
        return $this->container['emergency_name'];
    }

    /**
     * Sets emergency_name
     *
     * @param string $emergency_name Emergency Name
     *
     * @return $this
     */
    public function setEmergencyName($emergency_name)
    {
        $this->container['emergency_name'] = $emergency_name;

        return $this;
    }

    /**
     * Gets emergency_phone
     *
     * @return string
     */
    public function getEmergencyPhone()
    {
        return $this->container['emergency_phone'];
    }

    /**
     * Sets emergency_phone
     *
     * @param string $emergency_phone Emergency Phone
     *
     * @return $this
     */
    public function setEmergencyPhone($emergency_phone)
    {
        $this->container['emergency_phone'] = $emergency_phone;

        return $this;
    }

    /**
     * Gets emergency_relationship
     *
     * @return string
     */
    public function getEmergencyRelationship()
    {
        return $this->container['emergency_relationship'];
    }

    /**
     * Sets emergency_relationship
     *
     * @param string $emergency_relationship Emergency Relationship
     *
     * @return $this
     */
    public function setEmergencyRelationship($emergency_relationship)
    {
        $this->container['emergency_relationship'] = $emergency_relationship;

        return $this;
    }

    /**
     * Gets emergency_email
     *
     * @return string
     */
    public function getEmergencyEmail()
    {
        return $this->container['emergency_email'];
    }

    /**
     * Sets emergency_email
     *
     * @param string $emergency_email Emergency Email
     *
     * @return $this
     */
    public function setEmergencyEmail($emergency_email)
    {
        $this->container['emergency_email'] = $emergency_email;

        return $this;
    }

    /**
     * Gets facebook
     *
     * @return string
     */
    public function getFacebook()
    {
        return $this->container['facebook'];
    }

    /**
     * Sets facebook
     *
     * @param string $facebook Facebook Url
     *
     * @return $this
     */
    public function setFacebook($facebook)
    {
        $this->container['facebook'] = $facebook;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name First Name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets first_name_kana
     *
     * @return string
     */
    public function getFirstNameKana()
    {
        return $this->container['first_name_kana'];
    }

    /**
     * Sets first_name_kana
     *
     * @param string $first_name_kana First Name Kana
     *
     * @return $this
     */
    public function setFirstNameKana($first_name_kana)
    {
        $this->container['first_name_kana'] = $first_name_kana;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender Gender. Please refer to reference section for gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($gender) && !in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'gender', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets gender_title
     *
     * @return string
     */
    public function getGenderTitle()
    {
        return $this->container['gender_title'];
    }

    /**
     * Sets gender_title
     *
     * @param string $gender_title accepted gender title of a candidate. Expected values are: Mr., Mrs., Ms., Miss., Dr.
     *
     * @return $this
     */
    public function setGenderTitle($gender_title)
    {
        $this->container['gender_title'] = $gender_title;

        return $this;
    }

    /**
     * Gets home_phone
     *
     * @return string
     */
    public function getHomePhone()
    {
        return $this->container['home_phone'];
    }

    /**
     * Sets home_phone
     *
     * @param string $home_phone Home phone
     *
     * @return $this
     */
    public function setHomePhone($home_phone)
    {
        $this->container['home_phone'] = $home_phone;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id candidate internal id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ielts_score
     *
     * @return string
     */
    public function getIeltsScore()
    {
        return $this->container['ielts_score'];
    }

    /**
     * Sets ielts_score
     *
     * @param string $ielts_score IELTS Score
     *
     * @return $this
     */
    public function setIeltsScore($ielts_score)
    {
        $this->container['ielts_score'] = $ielts_score;

        return $this;
    }

    /**
     * Gets keyword
     *
     * @return string
     */
    public function getKeyword()
    {
        return $this->container['keyword'];
    }

    /**
     * Sets keyword
     *
     * @param string $keyword Keywords. Multiple keywords should be separated by commas
     *
     * @return $this
     */
    public function setKeyword($keyword)
    {
        $this->container['keyword'] = $keyword;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Last Name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets last_name_kana
     *
     * @return string
     */
    public function getLastNameKana()
    {
        return $this->container['last_name_kana'];
    }

    /**
     * Sets last_name_kana
     *
     * @param string $last_name_kana Last Name Kana
     *
     * @return $this
     */
    public function setLastNameKana($last_name_kana)
    {
        $this->container['last_name_kana'] = $last_name_kana;

        return $this;
    }

    /**
     * Gets linked_contact_id
     *
     * @return int
     */
    public function getLinkedContactId()
    {
        return $this->container['linked_contact_id'];
    }

    /**
     * Sets linked_contact_id
     *
     * @param int $linked_contact_id contact internal id
     *
     * @return $this
     */
    public function setLinkedContactId($linked_contact_id)
    {
        $this->container['linked_contact_id'] = $linked_contact_id;

        return $this;
    }

    /**
     * Gets linked_in
     *
     * @return string
     */
    public function getLinkedIn()
    {
        return $this->container['linked_in'];
    }

    /**
     * Sets linked_in
     *
     * @param string $linked_in LinkedIn Url
     *
     * @return $this
     */
    public function setLinkedIn($linked_in)
    {
        $this->container['linked_in'] = $linked_in;

        return $this;
    }

    /**
     * Gets marital_status
     *
     * @return string
     */
    public function getMaritalStatus()
    {
        return $this->container['marital_status'];
    }

    /**
     * Sets marital_status
     *
     * @param string $marital_status Marital Status. Please refer to reference section for Marital Status
     *
     * @return $this
     */
    public function setMaritalStatus($marital_status)
    {
        $this->container['marital_status'] = $marital_status;

        return $this;
    }

    /**
     * Gets met_status
     *
     * @return string
     */
    public function getMetStatus()
    {
        return $this->container['met_status'];
    }

    /**
     * Sets met_status
     *
     * @param string $met_status please refer to reference section of meetingstatuses.
     *
     * @return $this
     */
    public function setMetStatus($met_status)
    {
        $this->container['met_status'] = $met_status;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string $middle_name Middle Name
     *
     * @return $this
     */
    public function setMiddleName($middle_name)
    {
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets middle_name_kana
     *
     * @return string
     */
    public function getMiddleNameKana()
    {
        return $this->container['middle_name_kana'];
    }

    /**
     * Sets middle_name_kana
     *
     * @param string $middle_name_kana Middle Name Kana
     *
     * @return $this
     */
    public function setMiddleNameKana($middle_name_kana)
    {
        $this->container['middle_name_kana'] = $middle_name_kana;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return string
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param string $mobile Mobile
     *
     * @return $this
     */
    public function setMobile($mobile)
    {
        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets nationality
     *
     * @return string
     */
    public function getNationality()
    {
        return $this->container['nationality'];
    }

    /**
     * Sets nationality
     *
     * @param string $nationality Nationality. Please refer to reference section for nationality
     *
     * @return $this
     */
    public function setNationality($nationality)
    {
        $this->container['nationality'] = $nationality;

        return $this;
    }

    /**
     * Gets nearest_train_station
     *
     * @return string
     */
    public function getNearestTrainStation()
    {
        return $this->container['nearest_train_station'];
    }

    /**
     * Sets nearest_train_station
     *
     * @param string $nearest_train_station Nearest Train Station
     *
     * @return $this
     */
    public function setNearestTrainStation($nearest_train_station)
    {
        $this->container['nearest_train_station'] = $nearest_train_station;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note Note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets note_by
     *
     * @return int
     */
    public function getNoteBy()
    {
        return $this->container['note_by'];
    }

    /**
     * Sets note_by
     *
     * @param int $note_by internal id of an user in Vincere
     *
     * @return $this
     */
    public function setNoteBy($note_by)
    {
        $this->container['note_by'] = $note_by;

        return $this;
    }

    /**
     * Gets note_on
     *
     * @return string
     */
    public function getNoteOn()
    {
        return $this->container['note_on'];
    }

    /**
     * Sets note_on
     *
     * @param string $note_on Date Time for last modification of the note. Must be in this format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"
     *
     * @return $this
     */
    public function setNoteOn($note_on)
    {
        $this->container['note_on'] = $note_on;

        return $this;
    }

    /**
     * Gets notice_days
     *
     * @return int
     */
    public function getNoticeDays()
    {
        return $this->container['notice_days'];
    }

    /**
     * Sets notice_days
     *
     * @param int $notice_days notice period (in days)
     *
     * @return $this
     */
    public function setNoticeDays($notice_days)
    {
        $this->container['notice_days'] = $notice_days;

        return $this;
    }

    /**
     * Gets objective
     *
     * @return string
     */
    public function getObjective()
    {
        return $this->container['objective'];
    }

    /**
     * Sets objective
     *
     * @param string $objective Objective
     *
     * @return $this
     */
    public function setObjective($objective)
    {
        $this->container['objective'] = $objective;

        return $this;
    }

    /**
     * Gets other_benefits
     *
     * @return string
     */
    public function getOtherBenefits()
    {
        return $this->container['other_benefits'];
    }

    /**
     * Sets other_benefits
     *
     * @param string $other_benefits other benefits
     *
     * @return $this
     */
    public function setOtherBenefits($other_benefits)
    {
        $this->container['other_benefits'] = $other_benefits;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return string
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string $payment_type candidate payment type, including PAYG, PAYE or LTD_CO (Ltd Co. or corporation)
     *
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!is_null($payment_type) && !in_array($payment_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets payslip_email
     *
     * @return string
     */
    public function getPayslipEmail()
    {
        return $this->container['payslip_email'];
    }

    /**
     * Sets payslip_email
     *
     * @param string $payslip_email Candidate payslip email. It's unique.
     *
     * @return $this
     */
    public function setPayslipEmail($payslip_email)
    {
        $this->container['payslip_email'] = $payslip_email;

        return $this;
    }

    /**
     * Gets passport_no
     *
     * @return string
     */
    public function getPassportNo()
    {
        return $this->container['passport_no'];
    }

    /**
     * Sets passport_no
     *
     * @param string $passport_no Passport Number
     *
     * @return $this
     */
    public function setPassportNo($passport_no)
    {
        $this->container['passport_no'] = $passport_no;

        return $this;
    }

    /**
     * Gets personal_statements
     *
     * @return string
     */
    public function getPersonalStatements()
    {
        return $this->container['personal_statements'];
    }

    /**
     * Sets personal_statements
     *
     * @param string $personal_statements Personal Statements
     *
     * @return $this
     */
    public function setPersonalStatements($personal_statements)
    {
        $this->container['personal_statements'] = $personal_statements;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone Primary Phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets place_of_birth
     *
     * @return string
     */
    public function getPlaceOfBirth()
    {
        return $this->container['place_of_birth'];
    }

    /**
     * Sets place_of_birth
     *
     * @param string $place_of_birth Place of Birth
     *
     * @return $this
     */
    public function setPlaceOfBirth($place_of_birth)
    {
        $this->container['place_of_birth'] = $place_of_birth;

        return $this;
    }

    /**
     * Gets preferred_language
     *
     * @return string
     */
    public function getPreferredLanguage()
    {
        return $this->container['preferred_language'];
    }

    /**
     * Sets preferred_language
     *
     * @param string $preferred_language please refer to reference section of languages
     *
     * @return $this
     */
    public function setPreferredLanguage($preferred_language)
    {
        $this->container['preferred_language'] = $preferred_language;

        return $this;
    }

    /**
     * Gets present_salary_rate
     *
     * @return float
     */
    public function getPresentSalaryRate()
    {
        return $this->container['present_salary_rate'];
    }

    /**
     * Sets present_salary_rate
     *
     * @param float $present_salary_rate rate
     *
     * @return $this
     */
    public function setPresentSalaryRate($present_salary_rate)
    {
        $this->container['present_salary_rate'] = $present_salary_rate;

        return $this;
    }

    /**
     * Gets publications
     *
     * @return string
     */
    public function getPublications()
    {
        return $this->container['publications'];
    }

    /**
     * Sets publications
     *
     * @param string $publications Publications
     *
     * @return $this
     */
    public function setPublications($publications)
    {
        $this->container['publications'] = $publications;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference Reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets registration_date
     *
     * @return string
     */
    public function getRegistrationDate()
    {
        return $this->container['registration_date'];
    }

    /**
     * Sets registration_date
     *
     * @param string $registration_date Registration Date. Must be in format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'.
     *
     * @return $this
     */
    public function setRegistrationDate($registration_date)
    {
        $this->container['registration_date'] = $registration_date;

        return $this;
    }

    /**
     * Gets relocate
     *
     * @return bool
     */
    public function getRelocate()
    {
        return $this->container['relocate'];
    }

    /**
     * Sets relocate
     *
     * @param bool $relocate relocate
     *
     * @return $this
     */
    public function setRelocate($relocate)
    {
        $this->container['relocate'] = $relocate;

        return $this;
    }

    /**
     * Gets salary_months_per_year
     *
     * @return int
     */
    public function getSalaryMonthsPerYear()
    {
        return $this->container['salary_months_per_year'];
    }

    /**
     * Sets salary_months_per_year
     *
     * @param int $salary_months_per_year number of months per year
     *
     * @return $this
     */
    public function setSalaryMonthsPerYear($salary_months_per_year)
    {
        $this->container['salary_months_per_year'] = $salary_months_per_year;

        return $this;
    }

    /**
     * Gets salary_type
     *
     * @return string
     */
    public function getSalaryType()
    {
        return $this->container['salary_type'];
    }

    /**
     * Sets salary_type
     *
     * @param string $salary_type candidate salary type
     *
     * @return $this
     */
    public function setSalaryType($salary_type)
    {
        $allowedValues = $this->getSalaryTypeAllowableValues();
        if (!is_null($salary_type) && !in_array($salary_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'salary_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['salary_type'] = $salary_type;

        return $this;
    }

    /**
     * Gets skills
     *
     * @return string
     */
    public function getSkills()
    {
        return $this->container['skills'];
    }

    /**
     * Sets skills
     *
     * @param string $skills Skill Summary, skills are deliminated by comma, i.e. \",\"
     *
     * @return $this
     */
    public function setSkills($skills)
    {
        $this->container['skills'] = $skills;

        return $this;
    }

    /**
     * Gets skype
     *
     * @return string
     */
    public function getSkype()
    {
        return $this->container['skype'];
    }

    /**
     * Sets skype
     *
     * @param string $skype Skype
     *
     * @return $this
     */
    public function setSkype($skype)
    {
        $this->container['skype'] = $skype;

        return $this;
    }

    /**
     * Gets statements
     *
     * @return string
     */
    public function getStatements()
    {
        return $this->container['statements'];
    }

    /**
     * Sets statements
     *
     * @param string $statements Statements
     *
     * @return $this
     */
    public function setStatements($statements)
    {
        $this->container['statements'] = $statements;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string $summary Summary
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets toeic_score
     *
     * @return string
     */
    public function getToeicScore()
    {
        return $this->container['toeic_score'];
    }

    /**
     * Sets toeic_score
     *
     * @param string $toeic_score TOEIC Score
     *
     * @return $this
     */
    public function setToeicScore($toeic_score)
    {
        $this->container['toeic_score'] = $toeic_score;

        return $this;
    }

    /**
     * Gets twitter
     *
     * @return string
     */
    public function getTwitter()
    {
        return $this->container['twitter'];
    }

    /**
     * Sets twitter
     *
     * @param string $twitter Twitter Url
     *
     * @return $this
     */
    public function setTwitter($twitter)
    {
        $this->container['twitter'] = $twitter;

        return $this;
    }

    /**
     * Gets total_gross
     *
     * @return float
     */
    public function getTotalGross()
    {
        return $this->container['total_gross'];
    }

    /**
     * Sets total_gross
     *
     * @param float $total_gross total gross compensation per year
     *
     * @return $this
     */
    public function setTotalGross($total_gross)
    {
        $this->container['total_gross'] = $total_gross;

        return $this;
    }

    /**
     * Gets variant
     *
     * @return string
     */
    public function getVariant()
    {
        return $this->container['variant'];
    }

    /**
     * Sets variant
     *
     * @param string $variant Variant
     *
     * @return $this
     */
    public function setVariant($variant)
    {
        $this->container['variant'] = $variant;

        return $this;
    }

    /**
     * Gets visa_note
     *
     * @return string
     */
    public function getVisaNote()
    {
        return $this->container['visa_note'];
    }

    /**
     * Sets visa_note
     *
     * @param string $visa_note visa_note
     *
     * @return $this
     */
    public function setVisaNote($visa_note)
    {
        $this->container['visa_note'] = $visa_note;

        return $this;
    }

    /**
     * Gets visa_number
     *
     * @return string
     */
    public function getVisaNumber()
    {
        return $this->container['visa_number'];
    }

    /**
     * Sets visa_number
     *
     * @param string $visa_number visa_number
     *
     * @return $this
     */
    public function setVisaNumber($visa_number)
    {
        $this->container['visa_number'] = $visa_number;

        return $this;
    }

    /**
     * Gets visa_renewal_date
     *
     * @return string
     */
    public function getVisaRenewalDate()
    {
        return $this->container['visa_renewal_date'];
    }

    /**
     * Sets visa_renewal_date
     *
     * @param string $visa_renewal_date Must be in format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"
     *
     * @return $this
     */
    public function setVisaRenewalDate($visa_renewal_date)
    {
        $this->container['visa_renewal_date'] = $visa_renewal_date;

        return $this;
    }

    /**
     * Gets visa_status
     *
     * @return string
     */
    public function getVisaStatus()
    {
        return $this->container['visa_status'];
    }

    /**
     * Sets visa_status
     *
     * @param string $visa_status visa_status
     *
     * @return $this
     */
    public function setVisaStatus($visa_status)
    {
        $this->container['visa_status'] = $visa_status;

        return $this;
    }

    /**
     * Gets visa_type
     *
     * @return string
     */
    public function getVisaType()
    {
        return $this->container['visa_type'];
    }

    /**
     * Sets visa_type
     *
     * @param string $visa_type visa_type
     *
     * @return $this
     */
    public function setVisaType($visa_type)
    {
        $this->container['visa_type'] = $visa_type;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string $website Website
     *
     * @return $this
     */
    public function setWebsite($website)
    {
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets work_email
     *
     * @return string
     */
    public function getWorkEmail()
    {
        return $this->container['work_email'];
    }

    /**
     * Sets work_email
     *
     * @param string $work_email Work Email
     *
     * @return $this
     */
    public function setWorkEmail($work_email)
    {
        $this->container['work_email'] = $work_email;

        return $this;
    }

    /**
     * Gets work_phone
     *
     * @return string
     */
    public function getWorkPhone()
    {
        return $this->container['work_phone'];
    }

    /**
     * Sets work_phone
     *
     * @param string $work_phone Work Phone
     *
     * @return $this
     */
    public function setWorkPhone($work_phone)
    {
        $this->container['work_phone'] = $work_phone;

        return $this;
    }

    /**
     * Gets xing
     *
     * @return string
     */
    public function getXing()
    {
        return $this->container['xing'];
    }

    /**
     * Sets xing
     *
     * @param string $xing Xing Url
     *
     * @return $this
     */
    public function setXing($xing)
    {
        $this->container['xing'] = $xing;

        return $this;
    }

    /**
     * Gets linked_in_resume_content
     *
     * @return string
     */
    public function getLinkedInResumeContent()
    {
        return $this->container['linked_in_resume_content'];
    }

    /**
     * Sets linked_in_resume_content
     *
     * @param string $linked_in_resume_content The resume content retrieved from LinkedIn
     *
     * @return $this
     */
    public function setLinkedInResumeContent($linked_in_resume_content)
    {
        $this->container['linked_in_resume_content'] = $linked_in_resume_content;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string $nickname nickname (or preferred name)
     *
     * @return $this
     */
    public function setNickname($nickname)
    {
        $this->container['nickname'] = $nickname;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
