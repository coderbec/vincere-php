<?php
/**
 * InlineResponse200100
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Vincere REST API
 *
 * Last updated date: **2019-12-03**  Change log on **[GitHub](https://github.com/vincere-io/restful-api-support)**
 *
 * OpenAPI spec version: 2-oas3
 * Contact: integration@vincere.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse200100 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse200100 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_100';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'title' => 'string',
'first_name' => 'string',
'last_name' => 'string',
'middle_name' => 'string',
'preferred_name' => 'string',
'gender' => 'string',
'time_zone' => 'string',
'home_phone' => 'string',
'primary_phone' => 'string',
'date_of_birth' => 'string',
'candidate_email' => 'string',
'payslip_email' => 'string',
'notice_period' => 'float',
'current_address' => '\Swagger\Client\Model\InlineResponse200101Address'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'title' => null,
'first_name' => null,
'last_name' => null,
'middle_name' => null,
'preferred_name' => null,
'gender' => null,
'time_zone' => null,
'home_phone' => null,
'primary_phone' => null,
'date_of_birth' => null,
'candidate_email' => null,
'payslip_email' => null,
'notice_period' => null,
'current_address' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
'first_name' => 'first_name',
'last_name' => 'last_name',
'middle_name' => 'middle_name',
'preferred_name' => 'preferred_name',
'gender' => 'gender',
'time_zone' => 'time_zone',
'home_phone' => 'home_phone',
'primary_phone' => 'primary_phone',
'date_of_birth' => 'date_of_birth',
'candidate_email' => 'candidate_email',
'payslip_email' => 'payslip_email',
'notice_period' => 'notice_period',
'current_address' => 'current_address'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
'first_name' => 'setFirstName',
'last_name' => 'setLastName',
'middle_name' => 'setMiddleName',
'preferred_name' => 'setPreferredName',
'gender' => 'setGender',
'time_zone' => 'setTimeZone',
'home_phone' => 'setHomePhone',
'primary_phone' => 'setPrimaryPhone',
'date_of_birth' => 'setDateOfBirth',
'candidate_email' => 'setCandidateEmail',
'payslip_email' => 'setPayslipEmail',
'notice_period' => 'setNoticePeriod',
'current_address' => 'setCurrentAddress'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
'first_name' => 'getFirstName',
'last_name' => 'getLastName',
'middle_name' => 'getMiddleName',
'preferred_name' => 'getPreferredName',
'gender' => 'getGender',
'time_zone' => 'getTimeZone',
'home_phone' => 'getHomePhone',
'primary_phone' => 'getPrimaryPhone',
'date_of_birth' => 'getDateOfBirth',
'candidate_email' => 'getCandidateEmail',
'payslip_email' => 'getPayslipEmail',
'notice_period' => 'getNoticePeriod',
'current_address' => 'getCurrentAddress'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TITLE_MR = 'Mr.';
const TITLE_MRS = 'Mrs.';
const TITLE_MS = 'Ms.';
const TITLE_MISS = 'Miss.';
const TITLE_DR = 'Dr.';
const GENDER_MALE = 'MALE';
const GENDER_FEMALE = 'FEMALE';
const GENDER_NO_VALUE = 'NO_VALUE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTitleAllowableValues()
    {
        return [
            self::TITLE_MR,
self::TITLE_MRS,
self::TITLE_MS,
self::TITLE_MISS,
self::TITLE_DR,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_MALE,
self::GENDER_FEMALE,
self::GENDER_NO_VALUE,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['middle_name'] = isset($data['middle_name']) ? $data['middle_name'] : null;
        $this->container['preferred_name'] = isset($data['preferred_name']) ? $data['preferred_name'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['time_zone'] = isset($data['time_zone']) ? $data['time_zone'] : null;
        $this->container['home_phone'] = isset($data['home_phone']) ? $data['home_phone'] : null;
        $this->container['primary_phone'] = isset($data['primary_phone']) ? $data['primary_phone'] : null;
        $this->container['date_of_birth'] = isset($data['date_of_birth']) ? $data['date_of_birth'] : null;
        $this->container['candidate_email'] = isset($data['candidate_email']) ? $data['candidate_email'] : null;
        $this->container['payslip_email'] = isset($data['payslip_email']) ? $data['payslip_email'] : null;
        $this->container['notice_period'] = isset($data['notice_period']) ? $data['notice_period'] : null;
        $this->container['current_address'] = isset($data['current_address']) ? $data['current_address'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTitleAllowableValues();
        if (!is_null($this->container['title']) && !in_array($this->container['title'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'title', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'gender', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['candidate_email'] === null) {
            $invalidProperties[] = "'candidate_email' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title this is title must be one of enum
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $allowedValues = $this->getTitleAllowableValues();
        if (!is_null($title) && !in_array($title, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'title', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name First Name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Last Name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string $middle_name Middle Name
     *
     * @return $this
     */
    public function setMiddleName($middle_name)
    {
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets preferred_name
     *
     * @return string
     */
    public function getPreferredName()
    {
        return $this->container['preferred_name'];
    }

    /**
     * Sets preferred_name
     *
     * @param string $preferred_name this is name of preferred
     *
     * @return $this
     */
    public function setPreferredName($preferred_name)
    {
        $this->container['preferred_name'] = $preferred_name;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender Gender. Please refer to reference section for gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($gender) && !in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'gender', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return string
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param string $time_zone this is timezone name
     *
     * @return $this
     */
    public function setTimeZone($time_zone)
    {
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets home_phone
     *
     * @return string
     */
    public function getHomePhone()
    {
        return $this->container['home_phone'];
    }

    /**
     * Sets home_phone
     *
     * @param string $home_phone Home phone
     *
     * @return $this
     */
    public function setHomePhone($home_phone)
    {
        $this->container['home_phone'] = $home_phone;

        return $this;
    }

    /**
     * Gets primary_phone
     *
     * @return string
     */
    public function getPrimaryPhone()
    {
        return $this->container['primary_phone'];
    }

    /**
     * Sets primary_phone
     *
     * @param string $primary_phone Primary Phone
     *
     * @return $this
     */
    public function setPrimaryPhone($primary_phone)
    {
        $this->container['primary_phone'] = $primary_phone;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return string
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param string $date_of_birth Date of Birth. Must be in format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"
     *
     * @return $this
     */
    public function setDateOfBirth($date_of_birth)
    {
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets candidate_email
     *
     * @return string
     */
    public function getCandidateEmail()
    {
        return $this->container['candidate_email'];
    }

    /**
     * Sets candidate_email
     *
     * @param string $candidate_email email
     *
     * @return $this
     */
    public function setCandidateEmail($candidate_email)
    {
        $this->container['candidate_email'] = $candidate_email;

        return $this;
    }

    /**
     * Gets payslip_email
     *
     * @return string
     */
    public function getPayslipEmail()
    {
        return $this->container['payslip_email'];
    }

    /**
     * Sets payslip_email
     *
     * @param string $payslip_email Candidate payslip email. It's unique.
     *
     * @return $this
     */
    public function setPayslipEmail($payslip_email)
    {
        $this->container['payslip_email'] = $payslip_email;

        return $this;
    }

    /**
     * Gets notice_period
     *
     * @return float
     */
    public function getNoticePeriod()
    {
        return $this->container['notice_period'];
    }

    /**
     * Sets notice_period
     *
     * @param float $notice_period notice_period
     *
     * @return $this
     */
    public function setNoticePeriod($notice_period)
    {
        $this->container['notice_period'] = $notice_period;

        return $this;
    }

    /**
     * Gets current_address
     *
     * @return \Swagger\Client\Model\InlineResponse200101Address
     */
    public function getCurrentAddress()
    {
        return $this->container['current_address'];
    }

    /**
     * Sets current_address
     *
     * @param \Swagger\Client\Model\InlineResponse200101Address $current_address current_address
     *
     * @return $this
     */
    public function setCurrentAddress($current_address)
    {
        $this->container['current_address'] = $current_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
