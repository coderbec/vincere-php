<?php
/**
 * InlineResponse20058
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Vincere REST API
 *
 * Last updated date: **2019-12-03**  Change log on **[GitHub](https://github.com/vincere-io/restful-api-support)**
 *
 * OpenAPI spec version: 2-oas3
 * Contact: integration@vincere.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20058 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20058 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_58';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'currency' => 'string',
'open_job_num' => 'int',
'job_forecast' => 'float',
'interview_num' => 'int',
'interview_forecast' => 'float',
'placement_num' => 'int',
'placement_profit' => 'float',
'new_candidate_num' => 'int',
'shortlisted_num' => 'int',
'sent_num' => 'int',
'floated_num' => 'int',
'candidate_calls_num' => 'int',
'emails_sent_num' => 'int',
'emails_received_num' => 'int',
'contact_meetings_num' => 'int',
'candidate_meetings_num' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'currency' => null,
'open_job_num' => null,
'job_forecast' => null,
'interview_num' => null,
'interview_forecast' => null,
'placement_num' => null,
'placement_profit' => null,
'new_candidate_num' => null,
'shortlisted_num' => null,
'sent_num' => null,
'floated_num' => null,
'candidate_calls_num' => null,
'emails_sent_num' => null,
'emails_received_num' => null,
'contact_meetings_num' => null,
'candidate_meetings_num' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency' => 'currency',
'open_job_num' => 'open_job_num',
'job_forecast' => 'job_forecast',
'interview_num' => 'interview_num',
'interview_forecast' => 'interview_forecast',
'placement_num' => 'placement_num',
'placement_profit' => 'placement_profit',
'new_candidate_num' => 'new_candidate_num',
'shortlisted_num' => 'shortlisted_num',
'sent_num' => 'sent_num',
'floated_num' => 'floated_num',
'candidate_calls_num' => 'candidate_calls_num',
'emails_sent_num' => 'emails_sent_num',
'emails_received_num' => 'emails_received_num',
'contact_meetings_num' => 'contact_meetings_num',
'candidate_meetings_num' => 'candidate_meetings_num'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency' => 'setCurrency',
'open_job_num' => 'setOpenJobNum',
'job_forecast' => 'setJobForecast',
'interview_num' => 'setInterviewNum',
'interview_forecast' => 'setInterviewForecast',
'placement_num' => 'setPlacementNum',
'placement_profit' => 'setPlacementProfit',
'new_candidate_num' => 'setNewCandidateNum',
'shortlisted_num' => 'setShortlistedNum',
'sent_num' => 'setSentNum',
'floated_num' => 'setFloatedNum',
'candidate_calls_num' => 'setCandidateCallsNum',
'emails_sent_num' => 'setEmailsSentNum',
'emails_received_num' => 'setEmailsReceivedNum',
'contact_meetings_num' => 'setContactMeetingsNum',
'candidate_meetings_num' => 'setCandidateMeetingsNum'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency' => 'getCurrency',
'open_job_num' => 'getOpenJobNum',
'job_forecast' => 'getJobForecast',
'interview_num' => 'getInterviewNum',
'interview_forecast' => 'getInterviewForecast',
'placement_num' => 'getPlacementNum',
'placement_profit' => 'getPlacementProfit',
'new_candidate_num' => 'getNewCandidateNum',
'shortlisted_num' => 'getShortlistedNum',
'sent_num' => 'getSentNum',
'floated_num' => 'getFloatedNum',
'candidate_calls_num' => 'getCandidateCallsNum',
'emails_sent_num' => 'getEmailsSentNum',
'emails_received_num' => 'getEmailsReceivedNum',
'contact_meetings_num' => 'getContactMeetingsNum',
'candidate_meetings_num' => 'getCandidateMeetingsNum'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['open_job_num'] = isset($data['open_job_num']) ? $data['open_job_num'] : null;
        $this->container['job_forecast'] = isset($data['job_forecast']) ? $data['job_forecast'] : null;
        $this->container['interview_num'] = isset($data['interview_num']) ? $data['interview_num'] : null;
        $this->container['interview_forecast'] = isset($data['interview_forecast']) ? $data['interview_forecast'] : null;
        $this->container['placement_num'] = isset($data['placement_num']) ? $data['placement_num'] : null;
        $this->container['placement_profit'] = isset($data['placement_profit']) ? $data['placement_profit'] : null;
        $this->container['new_candidate_num'] = isset($data['new_candidate_num']) ? $data['new_candidate_num'] : null;
        $this->container['shortlisted_num'] = isset($data['shortlisted_num']) ? $data['shortlisted_num'] : null;
        $this->container['sent_num'] = isset($data['sent_num']) ? $data['sent_num'] : null;
        $this->container['floated_num'] = isset($data['floated_num']) ? $data['floated_num'] : null;
        $this->container['candidate_calls_num'] = isset($data['candidate_calls_num']) ? $data['candidate_calls_num'] : null;
        $this->container['emails_sent_num'] = isset($data['emails_sent_num']) ? $data['emails_sent_num'] : null;
        $this->container['emails_received_num'] = isset($data['emails_received_num']) ? $data['emails_received_num'] : null;
        $this->container['contact_meetings_num'] = isset($data['contact_meetings_num']) ? $data['contact_meetings_num'] : null;
        $this->container['candidate_meetings_num'] = isset($data['candidate_meetings_num']) ? $data['candidate_meetings_num'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency symbol of the currency as configured in the Vincere profile of the logged in user.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets open_job_num
     *
     * @return int
     */
    public function getOpenJobNum()
    {
        return $this->container['open_job_num'];
    }

    /**
     * Sets open_job_num
     *
     * @param int $open_job_num total new opened jobs in the given period.
     *
     * @return $this
     */
    public function setOpenJobNum($open_job_num)
    {
        $this->container['open_job_num'] = $open_job_num;

        return $this;
    }

    /**
     * Gets job_forecast
     *
     * @return float
     */
    public function getJobForecast()
    {
        return $this->container['job_forecast'];
    }

    /**
     * Sets job_forecast
     *
     * @param float $job_forecast total forecast fee of all open jobs in the given period.
     *
     * @return $this
     */
    public function setJobForecast($job_forecast)
    {
        $this->container['job_forecast'] = $job_forecast;

        return $this;
    }

    /**
     * Gets interview_num
     *
     * @return int
     */
    public function getInterviewNum()
    {
        return $this->container['interview_num'];
    }

    /**
     * Sets interview_num
     *
     * @param int $interview_num number of interviews arranged for the given period.
     *
     * @return $this
     */
    public function setInterviewNum($interview_num)
    {
        $this->container['interview_num'] = $interview_num;

        return $this;
    }

    /**
     * Gets interview_forecast
     *
     * @return float
     */
    public function getInterviewForecast()
    {
        return $this->container['interview_forecast'];
    }

    /**
     * Sets interview_forecast
     *
     * @param float $interview_forecast job forecast fee of candidates in interviews. If a candidate get interviews for different open jobs, take the forecast fee of the highest fee job.
     *
     * @return $this
     */
    public function setInterviewForecast($interview_forecast)
    {
        $this->container['interview_forecast'] = $interview_forecast;

        return $this;
    }

    /**
     * Gets placement_num
     *
     * @return int
     */
    public function getPlacementNum()
    {
        return $this->container['placement_num'];
    }

    /**
     * Sets placement_num
     *
     * @param int $placement_num number of placements have been made in the given period.
     *
     * @return $this
     */
    public function setPlacementNum($placement_num)
    {
        $this->container['placement_num'] = $placement_num;

        return $this;
    }

    /**
     * Gets placement_profit
     *
     * @return float
     */
    public function getPlacementProfit()
    {
        return $this->container['placement_profit'];
    }

    /**
     * Sets placement_profit
     *
     * @param float $placement_profit actual fee of placements that have been made in the given period.
     *
     * @return $this
     */
    public function setPlacementProfit($placement_profit)
    {
        $this->container['placement_profit'] = $placement_profit;

        return $this;
    }

    /**
     * Gets new_candidate_num
     *
     * @return int
     */
    public function getNewCandidateNum()
    {
        return $this->container['new_candidate_num'];
    }

    /**
     * Sets new_candidate_num
     *
     * @param int $new_candidate_num number of new candidates.
     *
     * @return $this
     */
    public function setNewCandidateNum($new_candidate_num)
    {
        $this->container['new_candidate_num'] = $new_candidate_num;

        return $this;
    }

    /**
     * Gets shortlisted_num
     *
     * @return int
     */
    public function getShortlistedNum()
    {
        return $this->container['shortlisted_num'];
    }

    /**
     * Sets shortlisted_num
     *
     * @param int $shortlisted_num Number of shortlisted actions.
     *
     * @return $this
     */
    public function setShortlistedNum($shortlisted_num)
    {
        $this->container['shortlisted_num'] = $shortlisted_num;

        return $this;
    }

    /**
     * Gets sent_num
     *
     * @return int
     */
    public function getSentNum()
    {
        return $this->container['sent_num'];
    }

    /**
     * Sets sent_num
     *
     * @param int $sent_num Number of sent actions.
     *
     * @return $this
     */
    public function setSentNum($sent_num)
    {
        $this->container['sent_num'] = $sent_num;

        return $this;
    }

    /**
     * Gets floated_num
     *
     * @return int
     */
    public function getFloatedNum()
    {
        return $this->container['floated_num'];
    }

    /**
     * Sets floated_num
     *
     * @param int $floated_num Number of floated actions.
     *
     * @return $this
     */
    public function setFloatedNum($floated_num)
    {
        $this->container['floated_num'] = $floated_num;

        return $this;
    }

    /**
     * Gets candidate_calls_num
     *
     * @return int
     */
    public function getCandidateCallsNum()
    {
        return $this->container['candidate_calls_num'];
    }

    /**
     * Sets candidate_calls_num
     *
     * @param int $candidate_calls_num Number of candidate calls actions.
     *
     * @return $this
     */
    public function setCandidateCallsNum($candidate_calls_num)
    {
        $this->container['candidate_calls_num'] = $candidate_calls_num;

        return $this;
    }

    /**
     * Gets emails_sent_num
     *
     * @return int
     */
    public function getEmailsSentNum()
    {
        return $this->container['emails_sent_num'];
    }

    /**
     * Sets emails_sent_num
     *
     * @param int $emails_sent_num Number of email sent actions.
     *
     * @return $this
     */
    public function setEmailsSentNum($emails_sent_num)
    {
        $this->container['emails_sent_num'] = $emails_sent_num;

        return $this;
    }

    /**
     * Gets emails_received_num
     *
     * @return int
     */
    public function getEmailsReceivedNum()
    {
        return $this->container['emails_received_num'];
    }

    /**
     * Sets emails_received_num
     *
     * @param int $emails_received_num Number of email received actions.
     *
     * @return $this
     */
    public function setEmailsReceivedNum($emails_received_num)
    {
        $this->container['emails_received_num'] = $emails_received_num;

        return $this;
    }

    /**
     * Gets contact_meetings_num
     *
     * @return int
     */
    public function getContactMeetingsNum()
    {
        return $this->container['contact_meetings_num'];
    }

    /**
     * Sets contact_meetings_num
     *
     * @param int $contact_meetings_num Number of arranged contact meetings.
     *
     * @return $this
     */
    public function setContactMeetingsNum($contact_meetings_num)
    {
        $this->container['contact_meetings_num'] = $contact_meetings_num;

        return $this;
    }

    /**
     * Gets candidate_meetings_num
     *
     * @return int
     */
    public function getCandidateMeetingsNum()
    {
        return $this->container['candidate_meetings_num'];
    }

    /**
     * Sets candidate_meetings_num
     *
     * @param int $candidate_meetings_num Number of arranged candidate meetings.
     *
     * @return $this
     */
    public function setCandidateMeetingsNum($candidate_meetings_num)
    {
        $this->container['candidate_meetings_num'] = $candidate_meetings_num;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
