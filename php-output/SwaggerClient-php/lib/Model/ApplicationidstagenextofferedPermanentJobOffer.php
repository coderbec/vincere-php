<?php
/**
 * ApplicationidstagenextofferedPermanentJobOffer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Vincere REST API
 *
 * Last updated date: **2019-12-03**  Change log on **[GitHub](https://github.com/vincere-io/restful-api-support)**
 *
 * OpenAPI spec version: 2-oas3
 * Contact: integration@vincere.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ApplicationidstagenextofferedPermanentJobOffer Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApplicationidstagenextofferedPermanentJobOffer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'applicationidstagenextoffered_permanent_job_offer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'annual_paid_holiday' => 'float',
'annual_paid_sick_day' => 'float',
'annual_salary' => 'float',
'currency_type' => 'string',
'exempt_incentives' => '\Swagger\Client\Model\ApplicationidstagenextofferedPermanentJobOfferExemptIncentives[]',
'guarantee_incentives' => '\Swagger\Client\Model\ApplicationidstagenextofferedPermanentJobOfferExemptIncentives[]',
'months_per_year' => 'float',
'other_costs' => '\Swagger\Client\Model\ApplicationidstagenextofferedPermanentJobOfferOtherCosts[]',
'percentage_of_annual_salary' => 'float',
'personal_info' => '\Swagger\Client\Model\ApplicationidstagenextofferedPermanentJobOfferPersonalInfo',
'salary_from' => 'float',
'salary_to' => 'float',
'salary_type' => 'string',
'statutory_govt_tax' => '\Swagger\Client\Model\ApplicationidstagenextofferedPermanentJobOfferStatutoryGovtTax[]',
'use_quick_fee_forecast' => 'bool',
'working_day_per_month' => 'float',
'working_day_per_week' => 'float',
'working_hour_per_day' => 'float',
'working_week_per_month' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'annual_paid_holiday' => null,
'annual_paid_sick_day' => null,
'annual_salary' => null,
'currency_type' => null,
'exempt_incentives' => null,
'guarantee_incentives' => null,
'months_per_year' => null,
'other_costs' => null,
'percentage_of_annual_salary' => null,
'personal_info' => null,
'salary_from' => null,
'salary_to' => null,
'salary_type' => null,
'statutory_govt_tax' => null,
'use_quick_fee_forecast' => null,
'working_day_per_month' => null,
'working_day_per_week' => null,
'working_hour_per_day' => null,
'working_week_per_month' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'annual_paid_holiday' => 'annual_paid_holiday',
'annual_paid_sick_day' => 'annual_paid_sick_day',
'annual_salary' => 'annual_salary',
'currency_type' => 'currency_type',
'exempt_incentives' => 'exempt_incentives',
'guarantee_incentives' => 'guarantee_incentives',
'months_per_year' => 'months_per_year',
'other_costs' => 'other_costs',
'percentage_of_annual_salary' => 'percentage_of_annual_salary',
'personal_info' => 'personal_info',
'salary_from' => 'salary_from',
'salary_to' => 'salary_to',
'salary_type' => 'salary_type',
'statutory_govt_tax' => 'statutory_govt_tax',
'use_quick_fee_forecast' => 'use_quick_fee_forecast',
'working_day_per_month' => 'working_day_per_month',
'working_day_per_week' => 'working_day_per_week',
'working_hour_per_day' => 'working_hour_per_day',
'working_week_per_month' => 'working_week_per_month'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'annual_paid_holiday' => 'setAnnualPaidHoliday',
'annual_paid_sick_day' => 'setAnnualPaidSickDay',
'annual_salary' => 'setAnnualSalary',
'currency_type' => 'setCurrencyType',
'exempt_incentives' => 'setExemptIncentives',
'guarantee_incentives' => 'setGuaranteeIncentives',
'months_per_year' => 'setMonthsPerYear',
'other_costs' => 'setOtherCosts',
'percentage_of_annual_salary' => 'setPercentageOfAnnualSalary',
'personal_info' => 'setPersonalInfo',
'salary_from' => 'setSalaryFrom',
'salary_to' => 'setSalaryTo',
'salary_type' => 'setSalaryType',
'statutory_govt_tax' => 'setStatutoryGovtTax',
'use_quick_fee_forecast' => 'setUseQuickFeeForecast',
'working_day_per_month' => 'setWorkingDayPerMonth',
'working_day_per_week' => 'setWorkingDayPerWeek',
'working_hour_per_day' => 'setWorkingHourPerDay',
'working_week_per_month' => 'setWorkingWeekPerMonth'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'annual_paid_holiday' => 'getAnnualPaidHoliday',
'annual_paid_sick_day' => 'getAnnualPaidSickDay',
'annual_salary' => 'getAnnualSalary',
'currency_type' => 'getCurrencyType',
'exempt_incentives' => 'getExemptIncentives',
'guarantee_incentives' => 'getGuaranteeIncentives',
'months_per_year' => 'getMonthsPerYear',
'other_costs' => 'getOtherCosts',
'percentage_of_annual_salary' => 'getPercentageOfAnnualSalary',
'personal_info' => 'getPersonalInfo',
'salary_from' => 'getSalaryFrom',
'salary_to' => 'getSalaryTo',
'salary_type' => 'getSalaryType',
'statutory_govt_tax' => 'getStatutoryGovtTax',
'use_quick_fee_forecast' => 'getUseQuickFeeForecast',
'working_day_per_month' => 'getWorkingDayPerMonth',
'working_day_per_week' => 'getWorkingDayPerWeek',
'working_hour_per_day' => 'getWorkingHourPerDay',
'working_week_per_month' => 'getWorkingWeekPerMonth'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SALARY_TYPE_ANNUAL = 'ANNUAL';
const SALARY_TYPE_MONTHLY = 'MONTHLY';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSalaryTypeAllowableValues()
    {
        return [
            self::SALARY_TYPE_ANNUAL,
self::SALARY_TYPE_MONTHLY,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['annual_paid_holiday'] = isset($data['annual_paid_holiday']) ? $data['annual_paid_holiday'] : null;
        $this->container['annual_paid_sick_day'] = isset($data['annual_paid_sick_day']) ? $data['annual_paid_sick_day'] : null;
        $this->container['annual_salary'] = isset($data['annual_salary']) ? $data['annual_salary'] : null;
        $this->container['currency_type'] = isset($data['currency_type']) ? $data['currency_type'] : null;
        $this->container['exempt_incentives'] = isset($data['exempt_incentives']) ? $data['exempt_incentives'] : null;
        $this->container['guarantee_incentives'] = isset($data['guarantee_incentives']) ? $data['guarantee_incentives'] : null;
        $this->container['months_per_year'] = isset($data['months_per_year']) ? $data['months_per_year'] : null;
        $this->container['other_costs'] = isset($data['other_costs']) ? $data['other_costs'] : null;
        $this->container['percentage_of_annual_salary'] = isset($data['percentage_of_annual_salary']) ? $data['percentage_of_annual_salary'] : null;
        $this->container['personal_info'] = isset($data['personal_info']) ? $data['personal_info'] : null;
        $this->container['salary_from'] = isset($data['salary_from']) ? $data['salary_from'] : null;
        $this->container['salary_to'] = isset($data['salary_to']) ? $data['salary_to'] : null;
        $this->container['salary_type'] = isset($data['salary_type']) ? $data['salary_type'] : null;
        $this->container['statutory_govt_tax'] = isset($data['statutory_govt_tax']) ? $data['statutory_govt_tax'] : null;
        $this->container['use_quick_fee_forecast'] = isset($data['use_quick_fee_forecast']) ? $data['use_quick_fee_forecast'] : null;
        $this->container['working_day_per_month'] = isset($data['working_day_per_month']) ? $data['working_day_per_month'] : null;
        $this->container['working_day_per_week'] = isset($data['working_day_per_week']) ? $data['working_day_per_week'] : null;
        $this->container['working_hour_per_day'] = isset($data['working_hour_per_day']) ? $data['working_hour_per_day'] : null;
        $this->container['working_week_per_month'] = isset($data['working_week_per_month']) ? $data['working_week_per_month'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['annual_salary'] === null) {
            $invalidProperties[] = "'annual_salary' can't be null";
        }
        if ($this->container['currency_type'] === null) {
            $invalidProperties[] = "'currency_type' can't be null";
        }
        if ($this->container['salary_type'] === null) {
            $invalidProperties[] = "'salary_type' can't be null";
        }
        $allowedValues = $this->getSalaryTypeAllowableValues();
        if (!is_null($this->container['salary_type']) && !in_array($this->container['salary_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'salary_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['working_day_per_month'] === null) {
            $invalidProperties[] = "'working_day_per_month' can't be null";
        }
        if ($this->container['working_day_per_week'] === null) {
            $invalidProperties[] = "'working_day_per_week' can't be null";
        }
        if ($this->container['working_hour_per_day'] === null) {
            $invalidProperties[] = "'working_hour_per_day' can't be null";
        }
        if ($this->container['working_week_per_month'] === null) {
            $invalidProperties[] = "'working_week_per_month' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets annual_paid_holiday
     *
     * @return float
     */
    public function getAnnualPaidHoliday()
    {
        return $this->container['annual_paid_holiday'];
    }

    /**
     * Sets annual_paid_holiday
     *
     * @param float $annual_paid_holiday annual_paid_holiday
     *
     * @return $this
     */
    public function setAnnualPaidHoliday($annual_paid_holiday)
    {
        $this->container['annual_paid_holiday'] = $annual_paid_holiday;

        return $this;
    }

    /**
     * Gets annual_paid_sick_day
     *
     * @return float
     */
    public function getAnnualPaidSickDay()
    {
        return $this->container['annual_paid_sick_day'];
    }

    /**
     * Sets annual_paid_sick_day
     *
     * @param float $annual_paid_sick_day annual_paid_sick_day
     *
     * @return $this
     */
    public function setAnnualPaidSickDay($annual_paid_sick_day)
    {
        $this->container['annual_paid_sick_day'] = $annual_paid_sick_day;

        return $this;
    }

    /**
     * Gets annual_salary
     *
     * @return float
     */
    public function getAnnualSalary()
    {
        return $this->container['annual_salary'];
    }

    /**
     * Sets annual_salary
     *
     * @param float $annual_salary annual_salary
     *
     * @return $this
     */
    public function setAnnualSalary($annual_salary)
    {
        $this->container['annual_salary'] = $annual_salary;

        return $this;
    }

    /**
     * Gets currency_type
     *
     * @return string
     */
    public function getCurrencyType()
    {
        return $this->container['currency_type'];
    }

    /**
     * Sets currency_type
     *
     * @param string $currency_type The user's currency setting. Please see reference list for currency
     *
     * @return $this
     */
    public function setCurrencyType($currency_type)
    {
        $this->container['currency_type'] = $currency_type;

        return $this;
    }

    /**
     * Gets exempt_incentives
     *
     * @return \Swagger\Client\Model\ApplicationidstagenextofferedPermanentJobOfferExemptIncentives[]
     */
    public function getExemptIncentives()
    {
        return $this->container['exempt_incentives'];
    }

    /**
     * Sets exempt_incentives
     *
     * @param \Swagger\Client\Model\ApplicationidstagenextofferedPermanentJobOfferExemptIncentives[] $exempt_incentives exempt_incentives
     *
     * @return $this
     */
    public function setExemptIncentives($exempt_incentives)
    {
        $this->container['exempt_incentives'] = $exempt_incentives;

        return $this;
    }

    /**
     * Gets guarantee_incentives
     *
     * @return \Swagger\Client\Model\ApplicationidstagenextofferedPermanentJobOfferExemptIncentives[]
     */
    public function getGuaranteeIncentives()
    {
        return $this->container['guarantee_incentives'];
    }

    /**
     * Sets guarantee_incentives
     *
     * @param \Swagger\Client\Model\ApplicationidstagenextofferedPermanentJobOfferExemptIncentives[] $guarantee_incentives guarantee_incentives
     *
     * @return $this
     */
    public function setGuaranteeIncentives($guarantee_incentives)
    {
        $this->container['guarantee_incentives'] = $guarantee_incentives;

        return $this;
    }

    /**
     * Gets months_per_year
     *
     * @return float
     */
    public function getMonthsPerYear()
    {
        return $this->container['months_per_year'];
    }

    /**
     * Sets months_per_year
     *
     * @param float $months_per_year **mandatory if salary_type is MONTHLY, but ignored if salary_type is ANNUAL**
     *
     * @return $this
     */
    public function setMonthsPerYear($months_per_year)
    {
        $this->container['months_per_year'] = $months_per_year;

        return $this;
    }

    /**
     * Gets other_costs
     *
     * @return \Swagger\Client\Model\ApplicationidstagenextofferedPermanentJobOfferOtherCosts[]
     */
    public function getOtherCosts()
    {
        return $this->container['other_costs'];
    }

    /**
     * Sets other_costs
     *
     * @param \Swagger\Client\Model\ApplicationidstagenextofferedPermanentJobOfferOtherCosts[] $other_costs other_costs
     *
     * @return $this
     */
    public function setOtherCosts($other_costs)
    {
        $this->container['other_costs'] = $other_costs;

        return $this;
    }

    /**
     * Gets percentage_of_annual_salary
     *
     * @return float
     */
    public function getPercentageOfAnnualSalary()
    {
        return $this->container['percentage_of_annual_salary'];
    }

    /**
     * Sets percentage_of_annual_salary
     *
     * @param float $percentage_of_annual_salary percentage of Annual salary use for quick fee forecast
     *
     * @return $this
     */
    public function setPercentageOfAnnualSalary($percentage_of_annual_salary)
    {
        $this->container['percentage_of_annual_salary'] = $percentage_of_annual_salary;

        return $this;
    }

    /**
     * Gets personal_info
     *
     * @return \Swagger\Client\Model\ApplicationidstagenextofferedPermanentJobOfferPersonalInfo
     */
    public function getPersonalInfo()
    {
        return $this->container['personal_info'];
    }

    /**
     * Sets personal_info
     *
     * @param \Swagger\Client\Model\ApplicationidstagenextofferedPermanentJobOfferPersonalInfo $personal_info personal_info
     *
     * @return $this
     */
    public function setPersonalInfo($personal_info)
    {
        $this->container['personal_info'] = $personal_info;

        return $this;
    }

    /**
     * Gets salary_from
     *
     * @return float
     */
    public function getSalaryFrom()
    {
        return $this->container['salary_from'];
    }

    /**
     * Sets salary_from
     *
     * @param float $salary_from salary_from
     *
     * @return $this
     */
    public function setSalaryFrom($salary_from)
    {
        $this->container['salary_from'] = $salary_from;

        return $this;
    }

    /**
     * Gets salary_to
     *
     * @return float
     */
    public function getSalaryTo()
    {
        return $this->container['salary_to'];
    }

    /**
     * Sets salary_to
     *
     * @param float $salary_to salary_to
     *
     * @return $this
     */
    public function setSalaryTo($salary_to)
    {
        $this->container['salary_to'] = $salary_to;

        return $this;
    }

    /**
     * Gets salary_type
     *
     * @return string
     */
    public function getSalaryType()
    {
        return $this->container['salary_type'];
    }

    /**
     * Sets salary_type
     *
     * @param string $salary_type salary type for permanent job
     *
     * @return $this
     */
    public function setSalaryType($salary_type)
    {
        $allowedValues = $this->getSalaryTypeAllowableValues();
        if (!in_array($salary_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'salary_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['salary_type'] = $salary_type;

        return $this;
    }

    /**
     * Gets statutory_govt_tax
     *
     * @return \Swagger\Client\Model\ApplicationidstagenextofferedPermanentJobOfferStatutoryGovtTax[]
     */
    public function getStatutoryGovtTax()
    {
        return $this->container['statutory_govt_tax'];
    }

    /**
     * Sets statutory_govt_tax
     *
     * @param \Swagger\Client\Model\ApplicationidstagenextofferedPermanentJobOfferStatutoryGovtTax[] $statutory_govt_tax statutory_govt_tax
     *
     * @return $this
     */
    public function setStatutoryGovtTax($statutory_govt_tax)
    {
        $this->container['statutory_govt_tax'] = $statutory_govt_tax;

        return $this;
    }

    /**
     * Gets use_quick_fee_forecast
     *
     * @return bool
     */
    public function getUseQuickFeeForecast()
    {
        return $this->container['use_quick_fee_forecast'];
    }

    /**
     * Sets use_quick_fee_forecast
     *
     * @param bool $use_quick_fee_forecast **NOTICE: If true, use % of annual salary instead of fee mode calculation.**  **And, all the fields except for percentage_of_annual_salary will be ignored.**
     *
     * @return $this
     */
    public function setUseQuickFeeForecast($use_quick_fee_forecast)
    {
        $this->container['use_quick_fee_forecast'] = $use_quick_fee_forecast;

        return $this;
    }

    /**
     * Gets working_day_per_month
     *
     * @return float
     */
    public function getWorkingDayPerMonth()
    {
        return $this->container['working_day_per_month'];
    }

    /**
     * Sets working_day_per_month
     *
     * @param float $working_day_per_month working_day_per_month
     *
     * @return $this
     */
    public function setWorkingDayPerMonth($working_day_per_month)
    {
        $this->container['working_day_per_month'] = $working_day_per_month;

        return $this;
    }

    /**
     * Gets working_day_per_week
     *
     * @return float
     */
    public function getWorkingDayPerWeek()
    {
        return $this->container['working_day_per_week'];
    }

    /**
     * Sets working_day_per_week
     *
     * @param float $working_day_per_week working_day_per_week
     *
     * @return $this
     */
    public function setWorkingDayPerWeek($working_day_per_week)
    {
        $this->container['working_day_per_week'] = $working_day_per_week;

        return $this;
    }

    /**
     * Gets working_hour_per_day
     *
     * @return float
     */
    public function getWorkingHourPerDay()
    {
        return $this->container['working_hour_per_day'];
    }

    /**
     * Sets working_hour_per_day
     *
     * @param float $working_hour_per_day working_hour_per_day
     *
     * @return $this
     */
    public function setWorkingHourPerDay($working_hour_per_day)
    {
        $this->container['working_hour_per_day'] = $working_hour_per_day;

        return $this;
    }

    /**
     * Gets working_week_per_month
     *
     * @return float
     */
    public function getWorkingWeekPerMonth()
    {
        return $this->container['working_week_per_month'];
    }

    /**
     * Sets working_week_per_month
     *
     * @param float $working_week_per_month working_week_per_month
     *
     * @return $this
     */
    public function setWorkingWeekPerMonth($working_week_per_month)
    {
        $this->container['working_week_per_month'] = $working_week_per_month;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
