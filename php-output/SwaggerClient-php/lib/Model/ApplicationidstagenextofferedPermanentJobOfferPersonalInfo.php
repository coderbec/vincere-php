<?php
/**
 * ApplicationidstagenextofferedPermanentJobOfferPersonalInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Vincere REST API
 *
 * Last updated date: **2019-12-03**  Change log on **[GitHub](https://github.com/vincere-io/restful-api-support)**
 *
 * OpenAPI spec version: 2-oas3
 * Contact: integration@vincere.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ApplicationidstagenextofferedPermanentJobOfferPersonalInfo Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApplicationidstagenextofferedPermanentJobOfferPersonalInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'applicationidstagenextoffered_permanent_job_offer_personal_info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bill_group' => 'string',
'bill_through_entity' => 'string',
'branch' => 'string',
'client_billing_group_name' => 'string',
'client_business_number' => 'string',
'client_company_number' => 'string',
'client_contact_email' => 'string',
'client_contact_phone' => 'string',
'client_department' => 'string',
'client_general_po_number' => 'string',
'client_purchaser_order' => 'string',
'client_invoice_code' => 'string',
'client_invoice_name' => 'string',
'client_tax_exempt' => 'bool',
'client_trading_name' => 'string',
'consolidation_code' => 'string',
'date_of_birth' => 'string',
'division' => 'string',
'end_date' => 'string',
'email' => 'string',
'export_data_to_accounting_system' => 'string',
'export_data_when' => 'string',
'first_name' => 'string',
'gender' => 'string',
'home_phone' => 'string',
'invoice_consolidation_method' => 'string',
'invoice_date' => 'string',
'invoice_no' => 'string',
'last_name' => 'string',
'middle_name' => 'string',
'notice_period' => 'int',
'offer_date' => 'string',
'pay_through_entity' => 'string',
'payment_method' => 'string',
'payslip_email' => 'string',
'phone' => 'string',
'placement_date' => 'string',
'preferred_name' => 'string',
'start_date' => 'string',
'tax_rate' => 'float',
'terms' => 'int',
'title' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bill_group' => null,
'bill_through_entity' => null,
'branch' => null,
'client_billing_group_name' => null,
'client_business_number' => null,
'client_company_number' => null,
'client_contact_email' => null,
'client_contact_phone' => null,
'client_department' => null,
'client_general_po_number' => null,
'client_purchaser_order' => null,
'client_invoice_code' => null,
'client_invoice_name' => null,
'client_tax_exempt' => null,
'client_trading_name' => null,
'consolidation_code' => null,
'date_of_birth' => null,
'division' => null,
'end_date' => null,
'email' => null,
'export_data_to_accounting_system' => null,
'export_data_when' => null,
'first_name' => null,
'gender' => null,
'home_phone' => null,
'invoice_consolidation_method' => null,
'invoice_date' => null,
'invoice_no' => null,
'last_name' => null,
'middle_name' => null,
'notice_period' => null,
'offer_date' => null,
'pay_through_entity' => null,
'payment_method' => null,
'payslip_email' => null,
'phone' => null,
'placement_date' => null,
'preferred_name' => null,
'start_date' => null,
'tax_rate' => null,
'terms' => null,
'title' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bill_group' => 'bill_group',
'bill_through_entity' => 'bill_through_entity',
'branch' => 'branch',
'client_billing_group_name' => 'client_billing_group_name',
'client_business_number' => 'client_business_number',
'client_company_number' => 'client_company_number',
'client_contact_email' => 'client_contact_email',
'client_contact_phone' => 'client_contact_phone',
'client_department' => 'client_department',
'client_general_po_number' => 'client_general_PO_number',
'client_purchaser_order' => 'client_purchaser_order',
'client_invoice_code' => 'client_invoice_code',
'client_invoice_name' => 'client_invoice_name',
'client_tax_exempt' => 'client_tax_exempt',
'client_trading_name' => 'client_trading_name',
'consolidation_code' => 'consolidation_code',
'date_of_birth' => 'date_of_birth',
'division' => 'division',
'end_date' => 'end_date',
'email' => 'email',
'export_data_to_accounting_system' => 'export_data_to_accounting_system',
'export_data_when' => 'export_data_when',
'first_name' => 'first_name',
'gender' => 'gender',
'home_phone' => 'home_phone',
'invoice_consolidation_method' => 'invoice_consolidation_method',
'invoice_date' => 'invoice_date',
'invoice_no' => 'invoice_no',
'last_name' => 'last_name',
'middle_name' => 'middle_name',
'notice_period' => 'notice_period',
'offer_date' => 'offer_date',
'pay_through_entity' => 'pay_through_entity',
'payment_method' => 'payment_method',
'payslip_email' => 'payslip_email',
'phone' => 'phone',
'placement_date' => 'placement_date',
'preferred_name' => 'preferred_name',
'start_date' => 'start_date',
'tax_rate' => 'tax_rate',
'terms' => 'terms',
'title' => 'title'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bill_group' => 'setBillGroup',
'bill_through_entity' => 'setBillThroughEntity',
'branch' => 'setBranch',
'client_billing_group_name' => 'setClientBillingGroupName',
'client_business_number' => 'setClientBusinessNumber',
'client_company_number' => 'setClientCompanyNumber',
'client_contact_email' => 'setClientContactEmail',
'client_contact_phone' => 'setClientContactPhone',
'client_department' => 'setClientDepartment',
'client_general_po_number' => 'setClientGeneralPoNumber',
'client_purchaser_order' => 'setClientPurchaserOrder',
'client_invoice_code' => 'setClientInvoiceCode',
'client_invoice_name' => 'setClientInvoiceName',
'client_tax_exempt' => 'setClientTaxExempt',
'client_trading_name' => 'setClientTradingName',
'consolidation_code' => 'setConsolidationCode',
'date_of_birth' => 'setDateOfBirth',
'division' => 'setDivision',
'end_date' => 'setEndDate',
'email' => 'setEmail',
'export_data_to_accounting_system' => 'setExportDataToAccountingSystem',
'export_data_when' => 'setExportDataWhen',
'first_name' => 'setFirstName',
'gender' => 'setGender',
'home_phone' => 'setHomePhone',
'invoice_consolidation_method' => 'setInvoiceConsolidationMethod',
'invoice_date' => 'setInvoiceDate',
'invoice_no' => 'setInvoiceNo',
'last_name' => 'setLastName',
'middle_name' => 'setMiddleName',
'notice_period' => 'setNoticePeriod',
'offer_date' => 'setOfferDate',
'pay_through_entity' => 'setPayThroughEntity',
'payment_method' => 'setPaymentMethod',
'payslip_email' => 'setPayslipEmail',
'phone' => 'setPhone',
'placement_date' => 'setPlacementDate',
'preferred_name' => 'setPreferredName',
'start_date' => 'setStartDate',
'tax_rate' => 'setTaxRate',
'terms' => 'setTerms',
'title' => 'setTitle'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bill_group' => 'getBillGroup',
'bill_through_entity' => 'getBillThroughEntity',
'branch' => 'getBranch',
'client_billing_group_name' => 'getClientBillingGroupName',
'client_business_number' => 'getClientBusinessNumber',
'client_company_number' => 'getClientCompanyNumber',
'client_contact_email' => 'getClientContactEmail',
'client_contact_phone' => 'getClientContactPhone',
'client_department' => 'getClientDepartment',
'client_general_po_number' => 'getClientGeneralPoNumber',
'client_purchaser_order' => 'getClientPurchaserOrder',
'client_invoice_code' => 'getClientInvoiceCode',
'client_invoice_name' => 'getClientInvoiceName',
'client_tax_exempt' => 'getClientTaxExempt',
'client_trading_name' => 'getClientTradingName',
'consolidation_code' => 'getConsolidationCode',
'date_of_birth' => 'getDateOfBirth',
'division' => 'getDivision',
'end_date' => 'getEndDate',
'email' => 'getEmail',
'export_data_to_accounting_system' => 'getExportDataToAccountingSystem',
'export_data_when' => 'getExportDataWhen',
'first_name' => 'getFirstName',
'gender' => 'getGender',
'home_phone' => 'getHomePhone',
'invoice_consolidation_method' => 'getInvoiceConsolidationMethod',
'invoice_date' => 'getInvoiceDate',
'invoice_no' => 'getInvoiceNo',
'last_name' => 'getLastName',
'middle_name' => 'getMiddleName',
'notice_period' => 'getNoticePeriod',
'offer_date' => 'getOfferDate',
'pay_through_entity' => 'getPayThroughEntity',
'payment_method' => 'getPaymentMethod',
'payslip_email' => 'getPayslipEmail',
'phone' => 'getPhone',
'placement_date' => 'getPlacementDate',
'preferred_name' => 'getPreferredName',
'start_date' => 'getStartDate',
'tax_rate' => 'getTaxRate',
'terms' => 'getTerms',
'title' => 'getTitle'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const EXPORT_DATA_TO_ACCOUNTING_SYSTEM_OTHER = 'OTHER';
const EXPORT_DATA_TO_ACCOUNTING_SYSTEM_XERO = 'XERO';
const EXPORT_DATA_WHEN_ON_PLACEMENT = 'ON_PLACEMENT';
const EXPORT_DATA_WHEN_ONCE_EVERYDAY = 'ONCE_EVERYDAY';
const EXPORT_DATA_WHEN_ONCE_EVERY_MONDAY = 'ONCE_EVERY_MONDAY';
const EXPORT_DATA_WHEN_ONCE_EVERY_TUESDAY = 'ONCE_EVERY_TUESDAY';
const EXPORT_DATA_WHEN_ONCE_EVERY_WEDNESDAY = 'ONCE_EVERY_WEDNESDAY';
const EXPORT_DATA_WHEN_ONCE_EVERY_THURSDAY = 'ONCE_EVERY_THURSDAY';
const EXPORT_DATA_WHEN_ONCE_EVERY_FRIDAY = 'ONCE_EVERY_FRIDAY';
const EXPORT_DATA_WHEN_ONCE_EVERY_SATURDAY = 'ONCE_EVERY_SATURDAY';
const EXPORT_DATA_WHEN_ONCE_EVERY_SUNDAY = 'ONCE_EVERY_SUNDAY';
const GENDER_MALE = 'MALE';
const GENDER_FEMALE = 'FEMALE';
const GENDER_NO_VALUE = 'NO_VALUE';
const PAYMENT_METHOD_BANK_TRANSFER = 'BANK_TRANSFER';
const PAYMENT_METHOD_CHEQUE = 'CHEQUE';
const PAYMENT_METHOD_CREDIT_CARD = 'CREDIT_CARD';
const PAYMENT_METHOD_GIRO_ACH = 'GIRO_ACH';
const PAYMENT_METHOD_OTHER = 'OTHER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExportDataToAccountingSystemAllowableValues()
    {
        return [
            self::EXPORT_DATA_TO_ACCOUNTING_SYSTEM_OTHER,
self::EXPORT_DATA_TO_ACCOUNTING_SYSTEM_XERO,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExportDataWhenAllowableValues()
    {
        return [
            self::EXPORT_DATA_WHEN_ON_PLACEMENT,
self::EXPORT_DATA_WHEN_ONCE_EVERYDAY,
self::EXPORT_DATA_WHEN_ONCE_EVERY_MONDAY,
self::EXPORT_DATA_WHEN_ONCE_EVERY_TUESDAY,
self::EXPORT_DATA_WHEN_ONCE_EVERY_WEDNESDAY,
self::EXPORT_DATA_WHEN_ONCE_EVERY_THURSDAY,
self::EXPORT_DATA_WHEN_ONCE_EVERY_FRIDAY,
self::EXPORT_DATA_WHEN_ONCE_EVERY_SATURDAY,
self::EXPORT_DATA_WHEN_ONCE_EVERY_SUNDAY,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_MALE,
self::GENDER_FEMALE,
self::GENDER_NO_VALUE,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentMethodAllowableValues()
    {
        return [
            self::PAYMENT_METHOD_BANK_TRANSFER,
self::PAYMENT_METHOD_CHEQUE,
self::PAYMENT_METHOD_CREDIT_CARD,
self::PAYMENT_METHOD_GIRO_ACH,
self::PAYMENT_METHOD_OTHER,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bill_group'] = isset($data['bill_group']) ? $data['bill_group'] : null;
        $this->container['bill_through_entity'] = isset($data['bill_through_entity']) ? $data['bill_through_entity'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['client_billing_group_name'] = isset($data['client_billing_group_name']) ? $data['client_billing_group_name'] : null;
        $this->container['client_business_number'] = isset($data['client_business_number']) ? $data['client_business_number'] : null;
        $this->container['client_company_number'] = isset($data['client_company_number']) ? $data['client_company_number'] : null;
        $this->container['client_contact_email'] = isset($data['client_contact_email']) ? $data['client_contact_email'] : null;
        $this->container['client_contact_phone'] = isset($data['client_contact_phone']) ? $data['client_contact_phone'] : null;
        $this->container['client_department'] = isset($data['client_department']) ? $data['client_department'] : null;
        $this->container['client_general_po_number'] = isset($data['client_general_po_number']) ? $data['client_general_po_number'] : null;
        $this->container['client_purchaser_order'] = isset($data['client_purchaser_order']) ? $data['client_purchaser_order'] : null;
        $this->container['client_invoice_code'] = isset($data['client_invoice_code']) ? $data['client_invoice_code'] : null;
        $this->container['client_invoice_name'] = isset($data['client_invoice_name']) ? $data['client_invoice_name'] : null;
        $this->container['client_tax_exempt'] = isset($data['client_tax_exempt']) ? $data['client_tax_exempt'] : null;
        $this->container['client_trading_name'] = isset($data['client_trading_name']) ? $data['client_trading_name'] : null;
        $this->container['consolidation_code'] = isset($data['consolidation_code']) ? $data['consolidation_code'] : null;
        $this->container['date_of_birth'] = isset($data['date_of_birth']) ? $data['date_of_birth'] : null;
        $this->container['division'] = isset($data['division']) ? $data['division'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['export_data_to_accounting_system'] = isset($data['export_data_to_accounting_system']) ? $data['export_data_to_accounting_system'] : null;
        $this->container['export_data_when'] = isset($data['export_data_when']) ? $data['export_data_when'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['home_phone'] = isset($data['home_phone']) ? $data['home_phone'] : null;
        $this->container['invoice_consolidation_method'] = isset($data['invoice_consolidation_method']) ? $data['invoice_consolidation_method'] : null;
        $this->container['invoice_date'] = isset($data['invoice_date']) ? $data['invoice_date'] : null;
        $this->container['invoice_no'] = isset($data['invoice_no']) ? $data['invoice_no'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['middle_name'] = isset($data['middle_name']) ? $data['middle_name'] : null;
        $this->container['notice_period'] = isset($data['notice_period']) ? $data['notice_period'] : null;
        $this->container['offer_date'] = isset($data['offer_date']) ? $data['offer_date'] : null;
        $this->container['pay_through_entity'] = isset($data['pay_through_entity']) ? $data['pay_through_entity'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['payslip_email'] = isset($data['payslip_email']) ? $data['payslip_email'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['placement_date'] = isset($data['placement_date']) ? $data['placement_date'] : null;
        $this->container['preferred_name'] = isset($data['preferred_name']) ? $data['preferred_name'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['tax_rate'] = isset($data['tax_rate']) ? $data['tax_rate'] : null;
        $this->container['terms'] = isset($data['terms']) ? $data['terms'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['export_data_to_accounting_system'] === null) {
            $invalidProperties[] = "'export_data_to_accounting_system' can't be null";
        }
        $allowedValues = $this->getExportDataToAccountingSystemAllowableValues();
        if (!is_null($this->container['export_data_to_accounting_system']) && !in_array($this->container['export_data_to_accounting_system'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'export_data_to_accounting_system', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExportDataWhenAllowableValues();
        if (!is_null($this->container['export_data_when']) && !in_array($this->container['export_data_when'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'export_data_when', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'gender', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ($this->container['offer_date'] === null) {
            $invalidProperties[] = "'offer_date' can't be null";
        }
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($this->container['payment_method']) && !in_array($this->container['payment_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        if ($this->container['tax_rate'] === null) {
            $invalidProperties[] = "'tax_rate' can't be null";
        }
        if ($this->container['terms'] === null) {
            $invalidProperties[] = "'terms' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bill_group
     *
     * @return string
     */
    public function getBillGroup()
    {
        return $this->container['bill_group'];
    }

    /**
     * Sets bill_group
     *
     * @param string $bill_group bill_group
     *
     * @return $this
     */
    public function setBillGroup($bill_group)
    {
        $this->container['bill_group'] = $bill_group;

        return $this;
    }

    /**
     * Gets bill_through_entity
     *
     * @return string
     */
    public function getBillThroughEntity()
    {
        return $this->container['bill_through_entity'];
    }

    /**
     * Sets bill_through_entity
     *
     * @param string $bill_through_entity bill_through_entity
     *
     * @return $this
     */
    public function setBillThroughEntity($bill_through_entity)
    {
        $this->container['bill_through_entity'] = $bill_through_entity;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return string
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param string $branch branch
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets client_billing_group_name
     *
     * @return string
     */
    public function getClientBillingGroupName()
    {
        return $this->container['client_billing_group_name'];
    }

    /**
     * Sets client_billing_group_name
     *
     * @param string $client_billing_group_name client_billing_group_name
     *
     * @return $this
     */
    public function setClientBillingGroupName($client_billing_group_name)
    {
        $this->container['client_billing_group_name'] = $client_billing_group_name;

        return $this;
    }

    /**
     * Gets client_business_number
     *
     * @return string
     */
    public function getClientBusinessNumber()
    {
        return $this->container['client_business_number'];
    }

    /**
     * Sets client_business_number
     *
     * @param string $client_business_number client_business_number
     *
     * @return $this
     */
    public function setClientBusinessNumber($client_business_number)
    {
        $this->container['client_business_number'] = $client_business_number;

        return $this;
    }

    /**
     * Gets client_company_number
     *
     * @return string
     */
    public function getClientCompanyNumber()
    {
        return $this->container['client_company_number'];
    }

    /**
     * Sets client_company_number
     *
     * @param string $client_company_number client_company_number
     *
     * @return $this
     */
    public function setClientCompanyNumber($client_company_number)
    {
        $this->container['client_company_number'] = $client_company_number;

        return $this;
    }

    /**
     * Gets client_contact_email
     *
     * @return string
     */
    public function getClientContactEmail()
    {
        return $this->container['client_contact_email'];
    }

    /**
     * Sets client_contact_email
     *
     * @param string $client_contact_email email
     *
     * @return $this
     */
    public function setClientContactEmail($client_contact_email)
    {
        $this->container['client_contact_email'] = $client_contact_email;

        return $this;
    }

    /**
     * Gets client_contact_phone
     *
     * @return string
     */
    public function getClientContactPhone()
    {
        return $this->container['client_contact_phone'];
    }

    /**
     * Sets client_contact_phone
     *
     * @param string $client_contact_phone phone number
     *
     * @return $this
     */
    public function setClientContactPhone($client_contact_phone)
    {
        $this->container['client_contact_phone'] = $client_contact_phone;

        return $this;
    }

    /**
     * Gets client_department
     *
     * @return string
     */
    public function getClientDepartment()
    {
        return $this->container['client_department'];
    }

    /**
     * Sets client_department
     *
     * @param string $client_department client_department
     *
     * @return $this
     */
    public function setClientDepartment($client_department)
    {
        $this->container['client_department'] = $client_department;

        return $this;
    }

    /**
     * Gets client_general_po_number
     *
     * @return string
     */
    public function getClientGeneralPoNumber()
    {
        return $this->container['client_general_po_number'];
    }

    /**
     * Sets client_general_po_number
     *
     * @param string $client_general_po_number client_general_po_number
     *
     * @return $this
     */
    public function setClientGeneralPoNumber($client_general_po_number)
    {
        $this->container['client_general_po_number'] = $client_general_po_number;

        return $this;
    }

    /**
     * Gets client_purchaser_order
     *
     * @return string
     */
    public function getClientPurchaserOrder()
    {
        return $this->container['client_purchaser_order'];
    }

    /**
     * Sets client_purchaser_order
     *
     * @param string $client_purchaser_order client_purchaser_order
     *
     * @return $this
     */
    public function setClientPurchaserOrder($client_purchaser_order)
    {
        $this->container['client_purchaser_order'] = $client_purchaser_order;

        return $this;
    }

    /**
     * Gets client_invoice_code
     *
     * @return string
     */
    public function getClientInvoiceCode()
    {
        return $this->container['client_invoice_code'];
    }

    /**
     * Sets client_invoice_code
     *
     * @param string $client_invoice_code client_invoice_code
     *
     * @return $this
     */
    public function setClientInvoiceCode($client_invoice_code)
    {
        $this->container['client_invoice_code'] = $client_invoice_code;

        return $this;
    }

    /**
     * Gets client_invoice_name
     *
     * @return string
     */
    public function getClientInvoiceName()
    {
        return $this->container['client_invoice_name'];
    }

    /**
     * Sets client_invoice_name
     *
     * @param string $client_invoice_name client_invoice_name
     *
     * @return $this
     */
    public function setClientInvoiceName($client_invoice_name)
    {
        $this->container['client_invoice_name'] = $client_invoice_name;

        return $this;
    }

    /**
     * Gets client_tax_exempt
     *
     * @return bool
     */
    public function getClientTaxExempt()
    {
        return $this->container['client_tax_exempt'];
    }

    /**
     * Sets client_tax_exempt
     *
     * @param bool $client_tax_exempt true or false
     *
     * @return $this
     */
    public function setClientTaxExempt($client_tax_exempt)
    {
        $this->container['client_tax_exempt'] = $client_tax_exempt;

        return $this;
    }

    /**
     * Gets client_trading_name
     *
     * @return string
     */
    public function getClientTradingName()
    {
        return $this->container['client_trading_name'];
    }

    /**
     * Sets client_trading_name
     *
     * @param string $client_trading_name client_trading_name
     *
     * @return $this
     */
    public function setClientTradingName($client_trading_name)
    {
        $this->container['client_trading_name'] = $client_trading_name;

        return $this;
    }

    /**
     * Gets consolidation_code
     *
     * @return string
     */
    public function getConsolidationCode()
    {
        return $this->container['consolidation_code'];
    }

    /**
     * Sets consolidation_code
     *
     * @param string $consolidation_code consolidation_code
     *
     * @return $this
     */
    public function setConsolidationCode($consolidation_code)
    {
        $this->container['consolidation_code'] = $consolidation_code;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return string
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param string $date_of_birth Date of Birth. Must be in format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"
     *
     * @return $this
     */
    public function setDateOfBirth($date_of_birth)
    {
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets division
     *
     * @return string
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param string $division division
     *
     * @return $this
     */
    public function setDivision($division)
    {
        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string $end_date Must be in format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets export_data_to_accounting_system
     *
     * @return string
     */
    public function getExportDataToAccountingSystem()
    {
        return $this->container['export_data_to_accounting_system'];
    }

    /**
     * Sets export_data_to_accounting_system
     *
     * @param string $export_data_to_accounting_system export_data_to_accounting_system
     *
     * @return $this
     */
    public function setExportDataToAccountingSystem($export_data_to_accounting_system)
    {
        $allowedValues = $this->getExportDataToAccountingSystemAllowableValues();
        if (!in_array($export_data_to_accounting_system, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'export_data_to_accounting_system', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['export_data_to_accounting_system'] = $export_data_to_accounting_system;

        return $this;
    }

    /**
     * Gets export_data_when
     *
     * @return string
     */
    public function getExportDataWhen()
    {
        return $this->container['export_data_when'];
    }

    /**
     * Sets export_data_when
     *
     * @param string $export_data_when export_data_when
     *
     * @return $this
     */
    public function setExportDataWhen($export_data_when)
    {
        $allowedValues = $this->getExportDataWhenAllowableValues();
        if (!is_null($export_data_when) && !in_array($export_data_when, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'export_data_when', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['export_data_when'] = $export_data_when;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender Gender. Please refer to reference section for gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($gender) && !in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'gender', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets home_phone
     *
     * @return string
     */
    public function getHomePhone()
    {
        return $this->container['home_phone'];
    }

    /**
     * Sets home_phone
     *
     * @param string $home_phone Home phone
     *
     * @return $this
     */
    public function setHomePhone($home_phone)
    {
        $this->container['home_phone'] = $home_phone;

        return $this;
    }

    /**
     * Gets invoice_consolidation_method
     *
     * @return string
     */
    public function getInvoiceConsolidationMethod()
    {
        return $this->container['invoice_consolidation_method'];
    }

    /**
     * Sets invoice_consolidation_method
     *
     * @param string $invoice_consolidation_method invoice_consolidation_method
     *
     * @return $this
     */
    public function setInvoiceConsolidationMethod($invoice_consolidation_method)
    {
        $this->container['invoice_consolidation_method'] = $invoice_consolidation_method;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return string
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param string $invoice_date Must be in format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"
     *
     * @return $this
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets invoice_no
     *
     * @return string
     */
    public function getInvoiceNo()
    {
        return $this->container['invoice_no'];
    }

    /**
     * Sets invoice_no
     *
     * @param string $invoice_no invoice_no
     *
     * @return $this
     */
    public function setInvoiceNo($invoice_no)
    {
        $this->container['invoice_no'] = $invoice_no;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string $middle_name middle_name
     *
     * @return $this
     */
    public function setMiddleName($middle_name)
    {
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets notice_period
     *
     * @return int
     */
    public function getNoticePeriod()
    {
        return $this->container['notice_period'];
    }

    /**
     * Sets notice_period
     *
     * @param int $notice_period number of days
     *
     * @return $this
     */
    public function setNoticePeriod($notice_period)
    {
        $this->container['notice_period'] = $notice_period;

        return $this;
    }

    /**
     * Gets offer_date
     *
     * @return string
     */
    public function getOfferDate()
    {
        return $this->container['offer_date'];
    }

    /**
     * Sets offer_date
     *
     * @param string $offer_date Must be in format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"
     *
     * @return $this
     */
    public function setOfferDate($offer_date)
    {
        $this->container['offer_date'] = $offer_date;

        return $this;
    }

    /**
     * Gets pay_through_entity
     *
     * @return string
     */
    public function getPayThroughEntity()
    {
        return $this->container['pay_through_entity'];
    }

    /**
     * Sets pay_through_entity
     *
     * @param string $pay_through_entity pay_through_entity
     *
     * @return $this
     */
    public function setPayThroughEntity($pay_through_entity)
    {
        $this->container['pay_through_entity'] = $pay_through_entity;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method payment_method
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($payment_method) && !in_array($payment_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets payslip_email
     *
     * @return string
     */
    public function getPayslipEmail()
    {
        return $this->container['payslip_email'];
    }

    /**
     * Sets payslip_email
     *
     * @param string $payslip_email Candidate payslip email. It's unique.
     *
     * @return $this
     */
    public function setPayslipEmail($payslip_email)
    {
        $this->container['payslip_email'] = $payslip_email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone Primary Phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets placement_date
     *
     * @return string
     */
    public function getPlacementDate()
    {
        return $this->container['placement_date'];
    }

    /**
     * Sets placement_date
     *
     * @param string $placement_date Must be in format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"
     *
     * @return $this
     */
    public function setPlacementDate($placement_date)
    {
        $this->container['placement_date'] = $placement_date;

        return $this;
    }

    /**
     * Gets preferred_name
     *
     * @return string
     */
    public function getPreferredName()
    {
        return $this->container['preferred_name'];
    }

    /**
     * Sets preferred_name
     *
     * @param string $preferred_name preferred_name
     *
     * @return $this
     */
    public function setPreferredName($preferred_name)
    {
        $this->container['preferred_name'] = $preferred_name;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date Must be in format \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return float
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param float $tax_rate tax_rate
     *
     * @return $this
     */
    public function setTaxRate($tax_rate)
    {
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets terms
     *
     * @return int
     */
    public function getTerms()
    {
        return $this->container['terms'];
    }

    /**
     * Sets terms
     *
     * @param int $terms terms of payment (in day)
     *
     * @return $this
     */
    public function setTerms($terms)
    {
        $this->container['terms'] = $terms;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
