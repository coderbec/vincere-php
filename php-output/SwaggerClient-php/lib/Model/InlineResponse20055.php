<?php
/**
 * InlineResponse20055
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Vincere REST API
 *
 * Last updated date: **2019-12-03**  Change log on **[GitHub](https://github.com/vincere-io/restful-api-support)**
 *
 * OpenAPI spec version: 2-oas3
 * Contact: integration@vincere.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse20055 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20055 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_55';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'completed' => 'bool',
'content' => 'string',
'creator' => '\Swagger\Client\Model\InlineResponse20041',
'custom_name' => 'string',
'due_date_start' => 'string',
'due_date_end' => 'string',
'id' => 'int',
'insert_timestamp' => 'string',
'kpi_action_id' => 'float',
'main_entity_type' => 'string',
'meeting_location' => 'string',
'meeting_room' => 'string',
'other_attendee' => 'string',
'subject' => 'string',
'assignee' => '\Swagger\Client\Model\InlineResponse20041'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'completed' => null,
'content' => null,
'creator' => null,
'custom_name' => null,
'due_date_start' => null,
'due_date_end' => null,
'id' => null,
'insert_timestamp' => null,
'kpi_action_id' => null,
'main_entity_type' => null,
'meeting_location' => null,
'meeting_room' => null,
'other_attendee' => null,
'subject' => null,
'assignee' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'completed' => 'completed',
'content' => 'content',
'creator' => 'creator',
'custom_name' => 'custom_name',
'due_date_start' => 'due_date_start',
'due_date_end' => 'due_date_end',
'id' => 'id',
'insert_timestamp' => 'insert_timestamp',
'kpi_action_id' => 'kpi_action_id',
'main_entity_type' => 'main_entity_type',
'meeting_location' => 'meeting_location',
'meeting_room' => 'meeting_room',
'other_attendee' => 'other_attendee',
'subject' => 'subject',
'assignee' => 'assignee'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'completed' => 'setCompleted',
'content' => 'setContent',
'creator' => 'setCreator',
'custom_name' => 'setCustomName',
'due_date_start' => 'setDueDateStart',
'due_date_end' => 'setDueDateEnd',
'id' => 'setId',
'insert_timestamp' => 'setInsertTimestamp',
'kpi_action_id' => 'setKpiActionId',
'main_entity_type' => 'setMainEntityType',
'meeting_location' => 'setMeetingLocation',
'meeting_room' => 'setMeetingRoom',
'other_attendee' => 'setOtherAttendee',
'subject' => 'setSubject',
'assignee' => 'setAssignee'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'completed' => 'getCompleted',
'content' => 'getContent',
'creator' => 'getCreator',
'custom_name' => 'getCustomName',
'due_date_start' => 'getDueDateStart',
'due_date_end' => 'getDueDateEnd',
'id' => 'getId',
'insert_timestamp' => 'getInsertTimestamp',
'kpi_action_id' => 'getKpiActionId',
'main_entity_type' => 'getMainEntityType',
'meeting_location' => 'getMeetingLocation',
'meeting_room' => 'getMeetingRoom',
'other_attendee' => 'getOtherAttendee',
'subject' => 'getSubject',
'assignee' => 'getAssignee'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MAIN_ENTITY_TYPE_CANDIDATE = 'CANDIDATE';
const MAIN_ENTITY_TYPE_COMPANY = 'COMPANY';
const MAIN_ENTITY_TYPE_CONTACT = 'CONTACT';
const MAIN_ENTITY_TYPE_JOB = 'JOB';
const MAIN_ENTITY_TYPE_OTHER_MEETING = 'OTHER_MEETING';
const MAIN_ENTITY_TYPE_PERSONAL = 'PERSONAL';
const MAIN_ENTITY_TYPE_PROJECT = 'PROJECT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMainEntityTypeAllowableValues()
    {
        return [
            self::MAIN_ENTITY_TYPE_CANDIDATE,
self::MAIN_ENTITY_TYPE_COMPANY,
self::MAIN_ENTITY_TYPE_CONTACT,
self::MAIN_ENTITY_TYPE_JOB,
self::MAIN_ENTITY_TYPE_OTHER_MEETING,
self::MAIN_ENTITY_TYPE_PERSONAL,
self::MAIN_ENTITY_TYPE_PROJECT,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['completed'] = isset($data['completed']) ? $data['completed'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['creator'] = isset($data['creator']) ? $data['creator'] : null;
        $this->container['custom_name'] = isset($data['custom_name']) ? $data['custom_name'] : null;
        $this->container['due_date_start'] = isset($data['due_date_start']) ? $data['due_date_start'] : null;
        $this->container['due_date_end'] = isset($data['due_date_end']) ? $data['due_date_end'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['insert_timestamp'] = isset($data['insert_timestamp']) ? $data['insert_timestamp'] : null;
        $this->container['kpi_action_id'] = isset($data['kpi_action_id']) ? $data['kpi_action_id'] : null;
        $this->container['main_entity_type'] = isset($data['main_entity_type']) ? $data['main_entity_type'] : null;
        $this->container['meeting_location'] = isset($data['meeting_location']) ? $data['meeting_location'] : null;
        $this->container['meeting_room'] = isset($data['meeting_room']) ? $data['meeting_room'] : null;
        $this->container['other_attendee'] = isset($data['other_attendee']) ? $data['other_attendee'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['assignee'] = isset($data['assignee']) ? $data['assignee'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMainEntityTypeAllowableValues();
        if (!is_null($this->container['main_entity_type']) && !in_array($this->container['main_entity_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'main_entity_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets completed
     *
     * @return bool
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param bool $completed completed
     *
     * @return $this
     */
    public function setCompleted($completed)
    {
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content content
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return \Swagger\Client\Model\InlineResponse20041
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param \Swagger\Client\Model\InlineResponse20041 $creator creator
     *
     * @return $this
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets custom_name
     *
     * @return string
     */
    public function getCustomName()
    {
        return $this->container['custom_name'];
    }

    /**
     * Sets custom_name
     *
     * @param string $custom_name this field is set value if the main_entity_type is not a known Contact, Candidate, Job.
     *
     * @return $this
     */
    public function setCustomName($custom_name)
    {
        $this->container['custom_name'] = $custom_name;

        return $this;
    }

    /**
     * Gets due_date_start
     *
     * @return string
     */
    public function getDueDateStart()
    {
        return $this->container['due_date_start'];
    }

    /**
     * Sets due_date_start
     *
     * @param string $due_date_start the start time for due date
     *
     * @return $this
     */
    public function setDueDateStart($due_date_start)
    {
        $this->container['due_date_start'] = $due_date_start;

        return $this;
    }

    /**
     * Gets due_date_end
     *
     * @return string
     */
    public function getDueDateEnd()
    {
        return $this->container['due_date_end'];
    }

    /**
     * Sets due_date_end
     *
     * @param string $due_date_end the end time for due date
     *
     * @return $this
     */
    public function setDueDateEnd($due_date_end)
    {
        $this->container['due_date_end'] = $due_date_end;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id internal comment id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets insert_timestamp
     *
     * @return string
     */
    public function getInsertTimestamp()
    {
        return $this->container['insert_timestamp'];
    }

    /**
     * Sets insert_timestamp
     *
     * @param string $insert_timestamp Created Date
     *
     * @return $this
     */
    public function setInsertTimestamp($insert_timestamp)
    {
        $this->container['insert_timestamp'] = $insert_timestamp;

        return $this;
    }

    /**
     * Gets kpi_action_id
     *
     * @return float
     */
    public function getKpiActionId()
    {
        return $this->container['kpi_action_id'];
    }

    /**
     * Sets kpi_action_id
     *
     * @param float $kpi_action_id the ID of the kpi action in Vincere. Please refer to the reference section for KPI actions.
     *
     * @return $this
     */
    public function setKpiActionId($kpi_action_id)
    {
        $this->container['kpi_action_id'] = $kpi_action_id;

        return $this;
    }

    /**
     * Gets main_entity_type
     *
     * @return string
     */
    public function getMainEntityType()
    {
        return $this->container['main_entity_type'];
    }

    /**
     * Sets main_entity_type
     *
     * @param string $main_entity_type The main entity of the activity. Based on the returned value, client can send request to another method to get details of the main entity.  For example, if return value is CANDIDATE, client can get details of the candidate by calling the api to get linked candidates.
     *
     * @return $this
     */
    public function setMainEntityType($main_entity_type)
    {
        $allowedValues = $this->getMainEntityTypeAllowableValues();
        if (!is_null($main_entity_type) && !in_array($main_entity_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'main_entity_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['main_entity_type'] = $main_entity_type;

        return $this;
    }

    /**
     * Gets meeting_location
     *
     * @return string
     */
    public function getMeetingLocation()
    {
        return $this->container['meeting_location'];
    }

    /**
     * Sets meeting_location
     *
     * @param string $meeting_location location of meeting.
     *
     * @return $this
     */
    public function setMeetingLocation($meeting_location)
    {
        $this->container['meeting_location'] = $meeting_location;

        return $this;
    }

    /**
     * Gets meeting_room
     *
     * @return string
     */
    public function getMeetingRoom()
    {
        return $this->container['meeting_room'];
    }

    /**
     * Sets meeting_room
     *
     * @param string $meeting_room meeting room.
     *
     * @return $this
     */
    public function setMeetingRoom($meeting_room)
    {
        $this->container['meeting_room'] = $meeting_room;

        return $this;
    }

    /**
     * Gets other_attendee
     *
     * @return string
     */
    public function getOtherAttendee()
    {
        return $this->container['other_attendee'];
    }

    /**
     * Sets other_attendee
     *
     * @param string $other_attendee a comma-separated string of emails
     *
     * @return $this
     */
    public function setOtherAttendee($other_attendee)
    {
        $this->container['other_attendee'] = $other_attendee;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject subject
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets assignee
     *
     * @return \Swagger\Client\Model\InlineResponse20041
     */
    public function getAssignee()
    {
        return $this->container['assignee'];
    }

    /**
     * Sets assignee
     *
     * @param \Swagger\Client\Model\InlineResponse20041 $assignee assignee
     *
     * @return $this
     */
    public function setAssignee($assignee)
    {
        $this->container['assignee'] = $assignee;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
